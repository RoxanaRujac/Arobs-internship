
interrupts_internal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003538  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080036cc  080036cc  000046cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003704  08003704  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003704  08003704  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003704  08003704  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003704  08003704  00004704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003708  08003708  00004708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800370c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000f4  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dde5  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001af1  00000000  00000000  00012e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00014918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000960  00000000  00000000  00015500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd00  00000000  00000000  00015e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef60  00000000  00000000  00035b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6575  00000000  00000000  00044ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010b035  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003230  00000000  00000000  0010b078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0010e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080036b4 	.word	0x080036b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080036b4 	.word	0x080036b4

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80001d8:	f000 fa5e 	bl	8000698 <HAL_Init>
  SystemClock_Config();
 80001dc:	f000 f862 	bl	80002a4 <SystemClock_Config>

  MX_GPIO_Init();
 80001e0:	f000 f8ee 	bl	80003c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f8bc 	bl	8000360 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80001e8:	f000 f808 	bl	80001fc <MX_TIM2_Init>

  HAL_TIM_Base_Start_IT(&htim2);  // Start Timer with interrupt
 80001ec:	4802      	ldr	r0, [pc, #8]	@ (80001f8 <main+0x24>)
 80001ee:	f002 fa31 	bl	8002654 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  while (1)
 80001f2:	bf00      	nop
 80001f4:	e7fd      	b.n	80001f2 <main+0x1e>
 80001f6:	bf00      	nop
 80001f8:	200000b0 	.word	0x200000b0

080001fc <MX_TIM2_Init>:

/**
  * @brief Timer2 Initialization Function (Internal Interrupt Timer)
  */
static void MX_TIM2_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000202:	463b      	mov	r3, r7
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800020e:	4b1b      	ldr	r3, [pc, #108]	@ (800027c <MX_TIM2_Init+0x80>)
 8000210:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000214:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;             // 72MHz / (7199 + 1) = 10 kHz
 8000216:	4b19      	ldr	r3, [pc, #100]	@ (800027c <MX_TIM2_Init+0x80>)
 8000218:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800021c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800021e:	4b17      	ldr	r3, [pc, #92]	@ (800027c <MX_TIM2_Init+0x80>)
 8000220:	2200      	movs	r2, #0
 8000222:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;                // 500ms interval at 10kHz
 8000224:	4b15      	ldr	r3, [pc, #84]	@ (800027c <MX_TIM2_Init+0x80>)
 8000226:	f241 3287 	movw	r2, #4999	@ 0x1387
 800022a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800022c:	4b13      	ldr	r3, [pc, #76]	@ (800027c <MX_TIM2_Init+0x80>)
 800022e:	2200      	movs	r2, #0
 8000230:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000232:	4b12      	ldr	r3, [pc, #72]	@ (800027c <MX_TIM2_Init+0x80>)
 8000234:	2200      	movs	r2, #0
 8000236:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000238:	4810      	ldr	r0, [pc, #64]	@ (800027c <MX_TIM2_Init+0x80>)
 800023a:	f002 f9b3 	bl	80025a4 <HAL_TIM_Base_Init>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <MX_TIM2_Init+0x4c>
  {
    Error_Handler();
 8000244:	f000 f922 	bl	800048c <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800024c:	603b      	str	r3, [r7, #0]

  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800024e:	463b      	mov	r3, r7
 8000250:	4619      	mov	r1, r3
 8000252:	480a      	ldr	r0, [pc, #40]	@ (800027c <MX_TIM2_Init+0x80>)
 8000254:	f002 fb70 	bl	8002938 <HAL_TIM_ConfigClockSource>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800025e:	f000 f915 	bl	800048c <Error_Handler>
  }

  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000262:	2200      	movs	r2, #0
 8000264:	2100      	movs	r1, #0
 8000266:	201c      	movs	r0, #28
 8000268:	f000 fb57 	bl	800091a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800026c:	201c      	movs	r0, #28
 800026e:	f000 fb70 	bl	8000952 <HAL_NVIC_EnableIRQ>
}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	200000b0 	.word	0x200000b0

08000280 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000290:	d104      	bne.n	800029c <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Toggle LED
 8000292:	2120      	movs	r1, #32
 8000294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000298:	f000 fd18 	bl	8000ccc <HAL_GPIO_TogglePin>
  }
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b0a6      	sub	sp, #152	@ 0x98
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002ae:	2228      	movs	r2, #40	@ 0x28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f003 f9d1 	bl	800365a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
 80002c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2258      	movs	r2, #88	@ 0x58
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f003 f9c3 	bl	800365a <memset>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d4:	2302      	movs	r3, #2
 80002d6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d8:	2301      	movs	r3, #1
 80002da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002dc:	2310      	movs	r3, #16
 80002de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e2:	2302      	movs	r3, #2
 80002e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fcfc 	bl	8000d00 <HAL_RCC_OscConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x6e>
    Error_Handler();
 800030e:	f000 f8bd 	bl	800048c <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	230f      	movs	r3, #15
 8000314:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000316:	2302      	movs	r3, #2
 8000318:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800031e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000322:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000328:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800032c:	2102      	movs	r1, #2
 800032e:	4618      	mov	r0, r3
 8000330:	f001 fd0a 	bl	8001d48 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x9a>
    Error_Handler();
 800033a:	f000 f8a7 	bl	800048c <Error_Handler>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800033e:	2302      	movs	r3, #2
 8000340:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000342:	2300      	movs	r3, #0
 8000344:	613b      	str	r3, [r7, #16]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	4618      	mov	r0, r3
 800034a:	f001 ff0f 	bl	800216c <HAL_RCCEx_PeriphCLKConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0xb4>
    Error_Handler();
 8000354:	f000 f89a 	bl	800048c <Error_Handler>
}
 8000358:	bf00      	nop
 800035a:	3798      	adds	r7, #152	@ 0x98
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <MX_USART2_UART_Init>:

/**
  * @brief USART2 Initialization Function
  */
static void MX_USART2_UART_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000364:	4b14      	ldr	r3, [pc, #80]	@ (80003b8 <MX_USART2_UART_Init+0x58>)
 8000366:	4a15      	ldr	r2, [pc, #84]	@ (80003bc <MX_USART2_UART_Init+0x5c>)
 8000368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800036a:	4b13      	ldr	r3, [pc, #76]	@ (80003b8 <MX_USART2_UART_Init+0x58>)
 800036c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000372:	4b11      	ldr	r3, [pc, #68]	@ (80003b8 <MX_USART2_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000378:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <MX_USART2_UART_Init+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800037e:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <MX_USART2_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000384:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <MX_USART2_UART_Init+0x58>)
 8000386:	220c      	movs	r2, #12
 8000388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	@ (80003b8 <MX_USART2_UART_Init+0x58>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000390:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <MX_USART2_UART_Init+0x58>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000396:	4b08      	ldr	r3, [pc, #32]	@ (80003b8 <MX_USART2_UART_Init+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800039c:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <MX_USART2_UART_Init+0x58>)
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	@ (80003b8 <MX_USART2_UART_Init+0x58>)
 80003a4:	f002 fd1c 	bl	8002de0 <HAL_UART_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_USART2_UART_Init+0x52>
    Error_Handler();
 80003ae:	f000 f86d 	bl	800048c <Error_Handler>
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000028 	.word	0x20000028
 80003bc:	40004400 	.word	0x40004400

080003c0 <MX_GPIO_Init>:

/**
  * @brief GPIO Initialization Function
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	@ 0x28
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000484 <MX_GPIO_Init+0xc4>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a2a      	ldr	r2, [pc, #168]	@ (8000484 <MX_GPIO_Init+0xc4>)
 80003dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b28      	ldr	r3, [pc, #160]	@ (8000484 <MX_GPIO_Init+0xc4>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80003ea:	613b      	str	r3, [r7, #16]
 80003ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ee:	4b25      	ldr	r3, [pc, #148]	@ (8000484 <MX_GPIO_Init+0xc4>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a24      	ldr	r2, [pc, #144]	@ (8000484 <MX_GPIO_Init+0xc4>)
 80003f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b22      	ldr	r3, [pc, #136]	@ (8000484 <MX_GPIO_Init+0xc4>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000406:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <MX_GPIO_Init+0xc4>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a1e      	ldr	r2, [pc, #120]	@ (8000484 <MX_GPIO_Init+0xc4>)
 800040c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b1c      	ldr	r3, [pc, #112]	@ (8000484 <MX_GPIO_Init+0xc4>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041e:	4b19      	ldr	r3, [pc, #100]	@ (8000484 <MX_GPIO_Init+0xc4>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a18      	ldr	r2, [pc, #96]	@ (8000484 <MX_GPIO_Init+0xc4>)
 8000424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b16      	ldr	r3, [pc, #88]	@ (8000484 <MX_GPIO_Init+0xc4>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	2120      	movs	r1, #32
 800043a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800043e:	f000 fc2d 	bl	8000c9c <HAL_GPIO_WritePin>

  // User Button (B1)
  GPIO_InitStruct.Pin = B1_Pin;
 8000442:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000448:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800044c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	4619      	mov	r1, r3
 8000458:	480b      	ldr	r0, [pc, #44]	@ (8000488 <MX_GPIO_Init+0xc8>)
 800045a:	f000 fa95 	bl	8000988 <HAL_GPIO_Init>

  // LD2 (e.g. Nucleo LED)
  GPIO_InitStruct.Pin = LD2_Pin;
 800045e:	2320      	movs	r3, #32
 8000460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046a:	2300      	movs	r3, #0
 800046c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	4619      	mov	r1, r3
 8000474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000478:	f000 fa86 	bl	8000988 <HAL_GPIO_Init>
}
 800047c:	bf00      	nop
 800047e:	3728      	adds	r7, #40	@ 0x28
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40021000 	.word	0x40021000
 8000488:	48000800 	.word	0x48000800

0800048c <Error_Handler>:

/**
  * @brief Error Handler
  */
void Error_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000490:	b672      	cpsid	i
}
 8000492:	bf00      	nop
  __disable_irq();
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <Error_Handler+0x8>

08000498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	@ (80004dc <HAL_MspInit+0x44>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	@ (80004dc <HAL_MspInit+0x44>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6193      	str	r3, [r2, #24]
 80004aa:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <HAL_MspInit+0x44>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b6:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <HAL_MspInit+0x44>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	4a08      	ldr	r2, [pc, #32]	@ (80004dc <HAL_MspInit+0x44>)
 80004bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004c0:	61d3      	str	r3, [r2, #28]
 80004c2:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <HAL_MspInit+0x44>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004ce:	2007      	movs	r0, #7
 80004d0:	f000 fa18 	bl	8000904 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40021000 	.word	0x40021000

080004e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80004f0:	d113      	bne.n	800051a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <HAL_TIM_Base_MspInit+0x44>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000524 <HAL_TIM_Base_MspInit+0x44>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	61d3      	str	r3, [r2, #28]
 80004fe:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <HAL_TIM_Base_MspInit+0x44>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	201c      	movs	r0, #28
 8000510:	f000 fa03 	bl	800091a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000514:	201c      	movs	r0, #28
 8000516:	f000 fa1c 	bl	8000952 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	@ 0x28
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a17      	ldr	r2, [pc, #92]	@ (80005a4 <HAL_UART_MspInit+0x7c>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d128      	bne.n	800059c <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800054a:	4b17      	ldr	r3, [pc, #92]	@ (80005a8 <HAL_UART_MspInit+0x80>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	4a16      	ldr	r2, [pc, #88]	@ (80005a8 <HAL_UART_MspInit+0x80>)
 8000550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000554:	61d3      	str	r3, [r2, #28]
 8000556:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <HAL_UART_MspInit+0x80>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <HAL_UART_MspInit+0x80>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a10      	ldr	r2, [pc, #64]	@ (80005a8 <HAL_UART_MspInit+0x80>)
 8000568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800056c:	6153      	str	r3, [r2, #20]
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <HAL_UART_MspInit+0x80>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800057a:	230c      	movs	r3, #12
 800057c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057e:	2302      	movs	r3, #2
 8000580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000586:	2300      	movs	r3, #0
 8000588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800058a:	2307      	movs	r3, #7
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000598:	f000 f9f6 	bl	8000988 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800059c:	bf00      	nop
 800059e:	3728      	adds	r7, #40	@ 0x28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40004400 	.word	0x40004400
 80005a8:	40021000 	.word	0x40021000

080005ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <NMI_Handler+0x4>

080005b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <MemManage_Handler+0x4>

080005c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <BusFault_Handler+0x4>

080005cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <UsageFault_Handler+0x4>

080005d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000602:	f000 f88f 	bl	8000724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000610:	4802      	ldr	r0, [pc, #8]	@ (800061c <TIM2_IRQHandler+0x10>)
 8000612:	f002 f88f 	bl	8002734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000b0 	.word	0x200000b0

08000620 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <SystemInit+0x20>)
 8000626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800062a:	4a05      	ldr	r2, [pc, #20]	@ (8000640 <SystemInit+0x20>)
 800062c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000630:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000644:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800067c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000648:	f7ff ffea 	bl	8000620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800064c:	480c      	ldr	r0, [pc, #48]	@ (8000680 <LoopForever+0x6>)
  ldr r1, =_edata
 800064e:	490d      	ldr	r1, [pc, #52]	@ (8000684 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000650:	4a0d      	ldr	r2, [pc, #52]	@ (8000688 <LoopForever+0xe>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000654:	e002      	b.n	800065c <LoopCopyDataInit>

08000656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065a:	3304      	adds	r3, #4

0800065c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800065c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000660:	d3f9      	bcc.n	8000656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000662:	4a0a      	ldr	r2, [pc, #40]	@ (800068c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000664:	4c0a      	ldr	r4, [pc, #40]	@ (8000690 <LoopForever+0x16>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000668:	e001      	b.n	800066e <LoopFillZerobss>

0800066a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800066c:	3204      	adds	r2, #4

0800066e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000670:	d3fb      	bcc.n	800066a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000672:	f002 fffb 	bl	800366c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000676:	f7ff fdad 	bl	80001d4 <main>

0800067a <LoopForever>:

LoopForever:
    b LoopForever
 800067a:	e7fe      	b.n	800067a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800067c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000684:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000688:	0800370c 	.word	0x0800370c
  ldr r2, =_sbss
 800068c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000690:	20000100 	.word	0x20000100

08000694 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000694:	e7fe      	b.n	8000694 <ADC1_2_IRQHandler>
	...

08000698 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800069c:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <HAL_Init+0x28>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a07      	ldr	r2, [pc, #28]	@ (80006c0 <HAL_Init+0x28>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a8:	2003      	movs	r0, #3
 80006aa:	f000 f92b 	bl	8000904 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 f808 	bl	80006c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b4:	f7ff fef0 	bl	8000498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40022000 	.word	0x40022000

080006c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <HAL_InitTick+0x54>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <HAL_InitTick+0x58>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006da:	fbb3 f3f1 	udiv	r3, r3, r1
 80006de:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f943 	bl	800096e <HAL_SYSTICK_Config>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e00e      	b.n	8000710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	d80a      	bhi.n	800070e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f8:	2200      	movs	r2, #0
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000700:	f000 f90b 	bl	800091a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000704:	4a06      	ldr	r2, [pc, #24]	@ (8000720 <HAL_InitTick+0x5c>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800070a:	2300      	movs	r3, #0
 800070c:	e000      	b.n	8000710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000000 	.word	0x20000000
 800071c:	20000008 	.word	0x20000008
 8000720:	20000004 	.word	0x20000004

08000724 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <HAL_IncTick+0x20>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	461a      	mov	r2, r3
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <HAL_IncTick+0x24>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4413      	add	r3, r2
 8000734:	4a04      	ldr	r2, [pc, #16]	@ (8000748 <HAL_IncTick+0x24>)
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000008 	.word	0x20000008
 8000748:	200000fc 	.word	0x200000fc

0800074c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000750:	4b03      	ldr	r3, [pc, #12]	@ (8000760 <HAL_GetTick+0x14>)
 8000752:	681b      	ldr	r3, [r3, #0]
}
 8000754:	4618      	mov	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	200000fc 	.word	0x200000fc

08000764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800078c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000796:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	60d3      	str	r3, [r2, #12]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b0:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <__NVIC_GetPriorityGrouping+0x18>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	f003 0307 	and.w	r3, r3, #7
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	db0b      	blt.n	80007f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 021f 	and.w	r2, r3, #31
 80007e0:	4907      	ldr	r1, [pc, #28]	@ (8000800 <__NVIC_EnableIRQ+0x38>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	2001      	movs	r0, #1
 80007ea:	fa00 f202 	lsl.w	r2, r0, r2
 80007ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000e100 	.word	0xe000e100

08000804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	db0a      	blt.n	800082e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	490c      	ldr	r1, [pc, #48]	@ (8000850 <__NVIC_SetPriority+0x4c>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	440b      	add	r3, r1
 8000828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800082c:	e00a      	b.n	8000844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4908      	ldr	r1, [pc, #32]	@ (8000854 <__NVIC_SetPriority+0x50>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	3b04      	subs	r3, #4
 800083c:	0112      	lsls	r2, r2, #4
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	440b      	add	r3, r1
 8000842:	761a      	strb	r2, [r3, #24]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	e000e100 	.word	0xe000e100
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000858:	b480      	push	{r7}
 800085a:	b089      	sub	sp, #36	@ 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f1c3 0307 	rsb	r3, r3, #7
 8000872:	2b04      	cmp	r3, #4
 8000874:	bf28      	it	cs
 8000876:	2304      	movcs	r3, #4
 8000878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3304      	adds	r3, #4
 800087e:	2b06      	cmp	r3, #6
 8000880:	d902      	bls.n	8000888 <NVIC_EncodePriority+0x30>
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3b03      	subs	r3, #3
 8000886:	e000      	b.n	800088a <NVIC_EncodePriority+0x32>
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	f04f 32ff 	mov.w	r2, #4294967295
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43da      	mvns	r2, r3
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	401a      	ands	r2, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a0:	f04f 31ff 	mov.w	r1, #4294967295
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	43d9      	mvns	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	4313      	orrs	r3, r2
         );
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3724      	adds	r7, #36	@ 0x24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
	...

080008c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008d0:	d301      	bcc.n	80008d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00f      	b.n	80008f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <SysTick_Config+0x40>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3b01      	subs	r3, #1
 80008dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008de:	210f      	movs	r1, #15
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f7ff ff8e 	bl	8000804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <SysTick_Config+0x40>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ee:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <SysTick_Config+0x40>)
 80008f0:	2207      	movs	r2, #7
 80008f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	e000e010 	.word	0xe000e010

08000904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff29 	bl	8000764 <__NVIC_SetPriorityGrouping>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b086      	sub	sp, #24
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
 8000926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800092c:	f7ff ff3e 	bl	80007ac <__NVIC_GetPriorityGrouping>
 8000930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	68b9      	ldr	r1, [r7, #8]
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff ff8e 	bl	8000858 <NVIC_EncodePriority>
 800093c:	4602      	mov	r2, r0
 800093e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff5d 	bl	8000804 <__NVIC_SetPriority>
}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	4603      	mov	r3, r0
 800095a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff31 	bl	80007c8 <__NVIC_EnableIRQ>
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff ffa2 	bl	80008c0 <SysTick_Config>
 800097c:	4603      	mov	r3, r0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000996:	e160      	b.n	8000c5a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	2101      	movs	r1, #1
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	fa01 f303 	lsl.w	r3, r1, r3
 80009a4:	4013      	ands	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 8152 	beq.w	8000c54 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f003 0303 	and.w	r3, r3, #3
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d005      	beq.n	80009c8 <HAL_GPIO_Init+0x40>
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f003 0303 	and.w	r3, r3, #3
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d130      	bne.n	8000a2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	2203      	movs	r2, #3
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4013      	ands	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	68da      	ldr	r2, [r3, #12]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009fe:	2201      	movs	r2, #1
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	091b      	lsrs	r3, r3, #4
 8000a14:	f003 0201 	and.w	r2, r3, #1
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d017      	beq.n	8000a66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2203      	movs	r2, #3
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	689a      	ldr	r2, [r3, #8]
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f003 0303 	and.w	r3, r3, #3
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d123      	bne.n	8000aba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	08da      	lsrs	r2, r3, #3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3208      	adds	r2, #8
 8000a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	220f      	movs	r2, #15
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	691a      	ldr	r2, [r3, #16]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	f003 0307 	and.w	r3, r3, #7
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	08da      	lsrs	r2, r3, #3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3208      	adds	r2, #8
 8000ab4:	6939      	ldr	r1, [r7, #16]
 8000ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0203 	and.w	r2, r3, #3
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 80ac 	beq.w	8000c54 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afc:	4b5e      	ldr	r3, [pc, #376]	@ (8000c78 <HAL_GPIO_Init+0x2f0>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a5d      	ldr	r2, [pc, #372]	@ (8000c78 <HAL_GPIO_Init+0x2f0>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b5b      	ldr	r3, [pc, #364]	@ (8000c78 <HAL_GPIO_Init+0x2f0>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b14:	4a59      	ldr	r2, [pc, #356]	@ (8000c7c <HAL_GPIO_Init+0x2f4>)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	089b      	lsrs	r3, r3, #2
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	220f      	movs	r2, #15
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b3e:	d025      	beq.n	8000b8c <HAL_GPIO_Init+0x204>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a4f      	ldr	r2, [pc, #316]	@ (8000c80 <HAL_GPIO_Init+0x2f8>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d01f      	beq.n	8000b88 <HAL_GPIO_Init+0x200>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a4e      	ldr	r2, [pc, #312]	@ (8000c84 <HAL_GPIO_Init+0x2fc>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d019      	beq.n	8000b84 <HAL_GPIO_Init+0x1fc>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a4d      	ldr	r2, [pc, #308]	@ (8000c88 <HAL_GPIO_Init+0x300>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d013      	beq.n	8000b80 <HAL_GPIO_Init+0x1f8>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a4c      	ldr	r2, [pc, #304]	@ (8000c8c <HAL_GPIO_Init+0x304>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d00d      	beq.n	8000b7c <HAL_GPIO_Init+0x1f4>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a4b      	ldr	r2, [pc, #300]	@ (8000c90 <HAL_GPIO_Init+0x308>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d007      	beq.n	8000b78 <HAL_GPIO_Init+0x1f0>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a4a      	ldr	r2, [pc, #296]	@ (8000c94 <HAL_GPIO_Init+0x30c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d101      	bne.n	8000b74 <HAL_GPIO_Init+0x1ec>
 8000b70:	2306      	movs	r3, #6
 8000b72:	e00c      	b.n	8000b8e <HAL_GPIO_Init+0x206>
 8000b74:	2307      	movs	r3, #7
 8000b76:	e00a      	b.n	8000b8e <HAL_GPIO_Init+0x206>
 8000b78:	2305      	movs	r3, #5
 8000b7a:	e008      	b.n	8000b8e <HAL_GPIO_Init+0x206>
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	e006      	b.n	8000b8e <HAL_GPIO_Init+0x206>
 8000b80:	2303      	movs	r3, #3
 8000b82:	e004      	b.n	8000b8e <HAL_GPIO_Init+0x206>
 8000b84:	2302      	movs	r3, #2
 8000b86:	e002      	b.n	8000b8e <HAL_GPIO_Init+0x206>
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e000      	b.n	8000b8e <HAL_GPIO_Init+0x206>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	f002 0203 	and.w	r2, r2, #3
 8000b94:	0092      	lsls	r2, r2, #2
 8000b96:	4093      	lsls	r3, r2
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b9e:	4937      	ldr	r1, [pc, #220]	@ (8000c7c <HAL_GPIO_Init+0x2f4>)
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	3302      	adds	r3, #2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bac:	4b3a      	ldr	r3, [pc, #232]	@ (8000c98 <HAL_GPIO_Init+0x310>)
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bd0:	4a31      	ldr	r2, [pc, #196]	@ (8000c98 <HAL_GPIO_Init+0x310>)
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bd6:	4b30      	ldr	r3, [pc, #192]	@ (8000c98 <HAL_GPIO_Init+0x310>)
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bfa:	4a27      	ldr	r2, [pc, #156]	@ (8000c98 <HAL_GPIO_Init+0x310>)
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c00:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <HAL_GPIO_Init+0x310>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d003      	beq.n	8000c24 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c24:	4a1c      	ldr	r2, [pc, #112]	@ (8000c98 <HAL_GPIO_Init+0x310>)
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <HAL_GPIO_Init+0x310>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <HAL_GPIO_Init+0x310>)
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	fa22 f303 	lsr.w	r3, r2, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f47f ae97 	bne.w	8000998 <HAL_GPIO_Init+0x10>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	bf00      	nop
 8000c6e:	371c      	adds	r7, #28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010000 	.word	0x40010000
 8000c80:	48000400 	.word	0x48000400
 8000c84:	48000800 	.word	0x48000800
 8000c88:	48000c00 	.word	0x48000c00
 8000c8c:	48001000 	.word	0x48001000
 8000c90:	48001400 	.word	0x48001400
 8000c94:	48001800 	.word	0x48001800
 8000c98:	40010400 	.word	0x40010400

08000c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	807b      	strh	r3, [r7, #2]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cac:	787b      	ldrb	r3, [r7, #1]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb8:	e002      	b.n	8000cc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cba:	887a      	ldrh	r2, [r7, #2]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cde:	887a      	ldrh	r2, [r7, #2]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	041a      	lsls	r2, r3, #16
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	43d9      	mvns	r1, r3
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	400b      	ands	r3, r1
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	619a      	str	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d10:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d16:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	f001 b80a 	b.w	8001d3a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 8161 	beq.w	8000ffe <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d3c:	4bae      	ldr	r3, [pc, #696]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 030c 	and.w	r3, r3, #12
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d00c      	beq.n	8000d62 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d48:	4bab      	ldr	r3, [pc, #684]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 030c 	and.w	r3, r3, #12
 8000d50:	2b08      	cmp	r3, #8
 8000d52:	d157      	bne.n	8000e04 <HAL_RCC_OscConfig+0x104>
 8000d54:	4ba8      	ldr	r3, [pc, #672]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d60:	d150      	bne.n	8000e04 <HAL_RCC_OscConfig+0x104>
 8000d62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d66:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000d6e:	fa93 f3a3 	rbit	r3, r3
 8000d72:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7a:	fab3 f383 	clz	r3, r3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d82:	d802      	bhi.n	8000d8a <HAL_RCC_OscConfig+0x8a>
 8000d84:	4b9c      	ldr	r3, [pc, #624]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	e015      	b.n	8000db6 <HAL_RCC_OscConfig+0xb6>
 8000d8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d8e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d92:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000d96:	fa93 f3a3 	rbit	r3, r3
 8000d9a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000d9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000da2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000da6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000daa:	fa93 f3a3 	rbit	r3, r3
 8000dae:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000db2:	4b91      	ldr	r3, [pc, #580]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dba:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000dbe:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000dc2:	fa92 f2a2 	rbit	r2, r2
 8000dc6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000dca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	f042 0220 	orr.w	r2, r2, #32
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	f002 021f 	and.w	r2, r2, #31
 8000dde:	2101      	movs	r1, #1
 8000de0:	fa01 f202 	lsl.w	r2, r1, r2
 8000de4:	4013      	ands	r3, r2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 8108 	beq.w	8000ffc <HAL_RCC_OscConfig+0x2fc>
 8000dec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000df0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f040 80ff 	bne.w	8000ffc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	f000 bf9b 	b.w	8001d3a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e14:	d106      	bne.n	8000e24 <HAL_RCC_OscConfig+0x124>
 8000e16:	4b78      	ldr	r3, [pc, #480]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a77      	ldr	r2, [pc, #476]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e036      	b.n	8000e92 <HAL_RCC_OscConfig+0x192>
 8000e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d10c      	bne.n	8000e4e <HAL_RCC_OscConfig+0x14e>
 8000e34:	4b70      	ldr	r3, [pc, #448]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a6f      	ldr	r2, [pc, #444]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	4b6d      	ldr	r3, [pc, #436]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a6c      	ldr	r2, [pc, #432]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000e46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	e021      	b.n	8000e92 <HAL_RCC_OscConfig+0x192>
 8000e4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e5e:	d10c      	bne.n	8000e7a <HAL_RCC_OscConfig+0x17a>
 8000e60:	4b65      	ldr	r3, [pc, #404]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a64      	ldr	r2, [pc, #400]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000e66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	4b62      	ldr	r3, [pc, #392]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a61      	ldr	r2, [pc, #388]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000e72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	e00b      	b.n	8000e92 <HAL_RCC_OscConfig+0x192>
 8000e7a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a5e      	ldr	r2, [pc, #376]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000e80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	4b5c      	ldr	r3, [pc, #368]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a5b      	ldr	r2, [pc, #364]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000e8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e90:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d054      	beq.n	8000f4c <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea2:	f7ff fc53 	bl	800074c <HAL_GetTick>
 8000ea6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eaa:	e00a      	b.n	8000ec2 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eac:	f7ff fc4e 	bl	800074c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b64      	cmp	r3, #100	@ 0x64
 8000eba:	d902      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	f000 bf3c 	b.w	8001d3a <HAL_RCC_OscConfig+0x103a>
 8000ec2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ec6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eca:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000ece:	fa93 f3a3 	rbit	r3, r3
 8000ed2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000ed6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eda:	fab3 f383 	clz	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ee2:	d802      	bhi.n	8000eea <HAL_RCC_OscConfig+0x1ea>
 8000ee4:	4b44      	ldr	r3, [pc, #272]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	e015      	b.n	8000f16 <HAL_RCC_OscConfig+0x216>
 8000eea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eee:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000ef6:	fa93 f3a3 	rbit	r3, r3
 8000efa:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000efe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f02:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000f06:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000f0a:	fa93 f3a3 	rbit	r3, r3
 8000f0e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f12:	4b39      	ldr	r3, [pc, #228]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f1a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000f1e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000f22:	fa92 f2a2 	rbit	r2, r2
 8000f26:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000f2a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f2e:	fab2 f282 	clz	r2, r2
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	f042 0220 	orr.w	r2, r2, #32
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	f002 021f 	and.w	r2, r2, #31
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f202 	lsl.w	r2, r1, r2
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0b0      	beq.n	8000eac <HAL_RCC_OscConfig+0x1ac>
 8000f4a:	e058      	b.n	8000ffe <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fbfe 	bl	800074c <HAL_GetTick>
 8000f50:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f54:	e00a      	b.n	8000f6c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f56:	f7ff fbf9 	bl	800074c <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b64      	cmp	r3, #100	@ 0x64
 8000f64:	d902      	bls.n	8000f6c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	f000 bee7 	b.w	8001d3a <HAL_RCC_OscConfig+0x103a>
 8000f6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f70:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000f80:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f84:	fab3 f383 	clz	r3, r3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f8c:	d802      	bhi.n	8000f94 <HAL_RCC_OscConfig+0x294>
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	e015      	b.n	8000fc0 <HAL_RCC_OscConfig+0x2c0>
 8000f94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f98:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000fa0:	fa93 f3a3 	rbit	r3, r3
 8000fa4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000fa8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fac:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000fb0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000fb4:	fa93 f3a3 	rbit	r3, r3
 8000fb8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <HAL_RCC_OscConfig+0x2f8>)
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fc4:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000fc8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000fcc:	fa92 f2a2 	rbit	r2, r2
 8000fd0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000fd4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000fd8:	fab2 f282 	clz	r2, r2
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	f042 0220 	orr.w	r2, r2, #32
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	f002 021f 	and.w	r2, r2, #31
 8000fe8:	2101      	movs	r1, #1
 8000fea:	fa01 f202 	lsl.w	r2, r1, r2
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1b0      	bne.n	8000f56 <HAL_RCC_OscConfig+0x256>
 8000ff4:	e003      	b.n	8000ffe <HAL_RCC_OscConfig+0x2fe>
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001002:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 816d 	beq.w	80012ee <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001014:	4bcd      	ldr	r3, [pc, #820]	@ (800134c <HAL_RCC_OscConfig+0x64c>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00c      	beq.n	800103a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001020:	4bca      	ldr	r3, [pc, #808]	@ (800134c <HAL_RCC_OscConfig+0x64c>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	2b08      	cmp	r3, #8
 800102a:	d16e      	bne.n	800110a <HAL_RCC_OscConfig+0x40a>
 800102c:	4bc7      	ldr	r3, [pc, #796]	@ (800134c <HAL_RCC_OscConfig+0x64c>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001034:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001038:	d167      	bne.n	800110a <HAL_RCC_OscConfig+0x40a>
 800103a:	2302      	movs	r3, #2
 800103c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001040:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001044:	fa93 f3a3 	rbit	r3, r3
 8001048:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800104c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001050:	fab3 f383 	clz	r3, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b3f      	cmp	r3, #63	@ 0x3f
 8001058:	d802      	bhi.n	8001060 <HAL_RCC_OscConfig+0x360>
 800105a:	4bbc      	ldr	r3, [pc, #752]	@ (800134c <HAL_RCC_OscConfig+0x64c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	e013      	b.n	8001088 <HAL_RCC_OscConfig+0x388>
 8001060:	2302      	movs	r3, #2
 8001062:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001066:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800106a:	fa93 f3a3 	rbit	r3, r3
 800106e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001078:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800107c:	fa93 f3a3 	rbit	r3, r3
 8001080:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001084:	4bb1      	ldr	r3, [pc, #708]	@ (800134c <HAL_RCC_OscConfig+0x64c>)
 8001086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001088:	2202      	movs	r2, #2
 800108a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800108e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001092:	fa92 f2a2 	rbit	r2, r2
 8001096:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800109a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800109e:	fab2 f282 	clz	r2, r2
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	f042 0220 	orr.w	r2, r2, #32
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	f002 021f 	and.w	r2, r2, #31
 80010ae:	2101      	movs	r1, #1
 80010b0:	fa01 f202 	lsl.w	r2, r1, r2
 80010b4:	4013      	ands	r3, r2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00a      	beq.n	80010d0 <HAL_RCC_OscConfig+0x3d0>
 80010ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d002      	beq.n	80010d0 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	f000 be35 	b.w	8001d3a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d0:	4b9e      	ldr	r3, [pc, #632]	@ (800134c <HAL_RCC_OscConfig+0x64c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	21f8      	movs	r1, #248	@ 0xf8
 80010e6:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ea:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80010ee:	fa91 f1a1 	rbit	r1, r1
 80010f2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80010f6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80010fa:	fab1 f181 	clz	r1, r1
 80010fe:	b2c9      	uxtb	r1, r1
 8001100:	408b      	lsls	r3, r1
 8001102:	4992      	ldr	r1, [pc, #584]	@ (800134c <HAL_RCC_OscConfig+0x64c>)
 8001104:	4313      	orrs	r3, r2
 8001106:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001108:	e0f1      	b.n	80012ee <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800110a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800110e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 8083 	beq.w	8001222 <HAL_RCC_OscConfig+0x522>
 800111c:	2301      	movs	r3, #1
 800111e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001122:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001126:	fa93 f3a3 	rbit	r3, r3
 800112a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800112e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001132:	fab3 f383 	clz	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800113c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	461a      	mov	r2, r3
 8001144:	2301      	movs	r3, #1
 8001146:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fb00 	bl	800074c <HAL_GetTick>
 800114c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001150:	e00a      	b.n	8001168 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001152:	f7ff fafb 	bl	800074c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d902      	bls.n	8001168 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	f000 bde9 	b.w	8001d3a <HAL_RCC_OscConfig+0x103a>
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800117a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b3f      	cmp	r3, #63	@ 0x3f
 8001186:	d802      	bhi.n	800118e <HAL_RCC_OscConfig+0x48e>
 8001188:	4b70      	ldr	r3, [pc, #448]	@ (800134c <HAL_RCC_OscConfig+0x64c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	e013      	b.n	80011b6 <HAL_RCC_OscConfig+0x4b6>
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001194:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001198:	fa93 f3a3 	rbit	r3, r3
 800119c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80011a6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80011b2:	4b66      	ldr	r3, [pc, #408]	@ (800134c <HAL_RCC_OscConfig+0x64c>)
 80011b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b6:	2202      	movs	r2, #2
 80011b8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80011bc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80011c0:	fa92 f2a2 	rbit	r2, r2
 80011c4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80011c8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80011cc:	fab2 f282 	clz	r2, r2
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	f042 0220 	orr.w	r2, r2, #32
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	f002 021f 	and.w	r2, r2, #31
 80011dc:	2101      	movs	r1, #1
 80011de:	fa01 f202 	lsl.w	r2, r1, r2
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0b4      	beq.n	8001152 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e8:	4b58      	ldr	r3, [pc, #352]	@ (800134c <HAL_RCC_OscConfig+0x64c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	21f8      	movs	r1, #248	@ 0xf8
 80011fe:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001206:	fa91 f1a1 	rbit	r1, r1
 800120a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800120e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001212:	fab1 f181 	clz	r1, r1
 8001216:	b2c9      	uxtb	r1, r1
 8001218:	408b      	lsls	r3, r1
 800121a:	494c      	ldr	r1, [pc, #304]	@ (800134c <HAL_RCC_OscConfig+0x64c>)
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e065      	b.n	80012ee <HAL_RCC_OscConfig+0x5ee>
 8001222:	2301      	movs	r3, #1
 8001224:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001228:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800122c:	fa93 f3a3 	rbit	r3, r3
 8001230:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001234:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001238:	fab3 f383 	clz	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001242:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	461a      	mov	r2, r3
 800124a:	2300      	movs	r3, #0
 800124c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124e:	f7ff fa7d 	bl	800074c <HAL_GetTick>
 8001252:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001256:	e00a      	b.n	800126e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001258:	f7ff fa78 	bl	800074c <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d902      	bls.n	800126e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	f000 bd66 	b.w	8001d3a <HAL_RCC_OscConfig+0x103a>
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001274:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001278:	fa93 f3a3 	rbit	r3, r3
 800127c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001280:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001284:	fab3 f383 	clz	r3, r3
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b3f      	cmp	r3, #63	@ 0x3f
 800128c:	d802      	bhi.n	8001294 <HAL_RCC_OscConfig+0x594>
 800128e:	4b2f      	ldr	r3, [pc, #188]	@ (800134c <HAL_RCC_OscConfig+0x64c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	e013      	b.n	80012bc <HAL_RCC_OscConfig+0x5bc>
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80012a6:	2302      	movs	r3, #2
 80012a8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80012ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012b0:	fa93 f3a3 	rbit	r3, r3
 80012b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80012b8:	4b24      	ldr	r3, [pc, #144]	@ (800134c <HAL_RCC_OscConfig+0x64c>)
 80012ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012bc:	2202      	movs	r2, #2
 80012be:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80012c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80012c6:	fa92 f2a2 	rbit	r2, r2
 80012ca:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80012ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80012d2:	fab2 f282 	clz	r2, r2
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	f042 0220 	orr.w	r2, r2, #32
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	f002 021f 	and.w	r2, r2, #31
 80012e2:	2101      	movs	r1, #1
 80012e4:	fa01 f202 	lsl.w	r2, r1, r2
 80012e8:	4013      	ands	r3, r2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1b4      	bne.n	8001258 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8119 	beq.w	8001536 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001304:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001308:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 8082 	beq.w	800141a <HAL_RCC_OscConfig+0x71a>
 8001316:	2301      	movs	r3, #1
 8001318:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001320:	fa93 f3a3 	rbit	r3, r3
 8001324:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001328:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132c:	fab3 f383 	clz	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_RCC_OscConfig+0x650>)
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	461a      	mov	r2, r3
 800133c:	2301      	movs	r3, #1
 800133e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001340:	f7ff fa04 	bl	800074c <HAL_GetTick>
 8001344:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001348:	e00f      	b.n	800136a <HAL_RCC_OscConfig+0x66a>
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000
 8001350:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001354:	f7ff f9fa 	bl	800074c <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d902      	bls.n	800136a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	f000 bce8 	b.w	8001d3a <HAL_RCC_OscConfig+0x103a>
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001374:	fa93 f2a3 	rbit	r2, r3
 8001378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800137c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800138a:	2202      	movs	r2, #2
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001392:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	fa93 f2a3 	rbit	r2, r3
 800139c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013ae:	2202      	movs	r2, #2
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	fa93 f2a3 	rbit	r2, r3
 80013c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ca:	4bb0      	ldr	r3, [pc, #704]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 80013cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013d6:	2102      	movs	r1, #2
 80013d8:	6019      	str	r1, [r3, #0]
 80013da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	fa93 f1a3 	rbit	r1, r3
 80013e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013f0:	6019      	str	r1, [r3, #0]
  return result;
 80013f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013f6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	fab3 f383 	clz	r3, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	2101      	movs	r1, #1
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d09d      	beq.n	8001354 <HAL_RCC_OscConfig+0x654>
 8001418:	e08d      	b.n	8001536 <HAL_RCC_OscConfig+0x836>
 800141a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800141e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800142a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	fa93 f2a3 	rbit	r2, r3
 8001434:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001438:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800143c:	601a      	str	r2, [r3, #0]
  return result;
 800143e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001442:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001446:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001448:	fab3 f383 	clz	r3, r3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	4b8f      	ldr	r3, [pc, #572]	@ (8001690 <HAL_RCC_OscConfig+0x990>)
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	461a      	mov	r2, r3
 8001458:	2300      	movs	r3, #0
 800145a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145c:	f7ff f976 	bl	800074c <HAL_GetTick>
 8001460:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff f971 	bl	800074c <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d902      	bls.n	800147c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	f000 bc5f 	b.w	8001d3a <HAL_RCC_OscConfig+0x103a>
 800147c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001480:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001484:	2202      	movs	r2, #2
 8001486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800148c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	fa93 f2a3 	rbit	r2, r3
 8001496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800149a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014a8:	2202      	movs	r2, #2
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	fa93 f2a3 	rbit	r2, r3
 80014ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014cc:	2202      	movs	r2, #2
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	fa93 f2a3 	rbit	r2, r3
 80014de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80014e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	4b68      	ldr	r3, [pc, #416]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 80014ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80014f4:	2102      	movs	r1, #2
 80014f6:	6019      	str	r1, [r3, #0]
 80014f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	fa93 f1a3 	rbit	r1, r3
 8001506:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800150a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800150e:	6019      	str	r1, [r3, #0]
  return result;
 8001510:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001514:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	fab3 f383 	clz	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001524:	b2db      	uxtb	r3, r3
 8001526:	f003 031f 	and.w	r3, r3, #31
 800152a:	2101      	movs	r1, #1
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d197      	bne.n	8001466 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001536:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800153a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 819c 	beq.w	8001884 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001552:	4b4e      	ldr	r3, [pc, #312]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d116      	bne.n	800158c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b4b      	ldr	r3, [pc, #300]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a4a      	ldr	r2, [pc, #296]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b48      	ldr	r3, [pc, #288]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001576:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001580:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001584:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001586:	2301      	movs	r3, #1
 8001588:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	4b41      	ldr	r3, [pc, #260]	@ (8001694 <HAL_RCC_OscConfig+0x994>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d11a      	bne.n	80015ce <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001598:	4b3e      	ldr	r3, [pc, #248]	@ (8001694 <HAL_RCC_OscConfig+0x994>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a3d      	ldr	r2, [pc, #244]	@ (8001694 <HAL_RCC_OscConfig+0x994>)
 800159e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a4:	f7ff f8d2 	bl	800074c <HAL_GetTick>
 80015a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	e009      	b.n	80015c2 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7ff f8cd 	bl	800074c <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	@ 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e3bb      	b.n	8001d3a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c2:	4b34      	ldr	r3, [pc, #208]	@ (8001694 <HAL_RCC_OscConfig+0x994>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0ef      	beq.n	80015ae <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d106      	bne.n	80015ec <HAL_RCC_OscConfig+0x8ec>
 80015de:	4b2b      	ldr	r3, [pc, #172]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	4a2a      	ldr	r2, [pc, #168]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6213      	str	r3, [r2, #32]
 80015ea:	e035      	b.n	8001658 <HAL_RCC_OscConfig+0x958>
 80015ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10c      	bne.n	8001616 <HAL_RCC_OscConfig+0x916>
 80015fc:	4b23      	ldr	r3, [pc, #140]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4a22      	ldr	r2, [pc, #136]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	6213      	str	r3, [r2, #32]
 8001608:	4b20      	ldr	r3, [pc, #128]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4a1f      	ldr	r2, [pc, #124]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 800160e:	f023 0304 	bic.w	r3, r3, #4
 8001612:	6213      	str	r3, [r2, #32]
 8001614:	e020      	b.n	8001658 <HAL_RCC_OscConfig+0x958>
 8001616:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800161a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b05      	cmp	r3, #5
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x940>
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4a18      	ldr	r2, [pc, #96]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6213      	str	r3, [r2, #32]
 8001632:	4b16      	ldr	r3, [pc, #88]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a15      	ldr	r2, [pc, #84]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6213      	str	r3, [r2, #32]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0x958>
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4a11      	ldr	r2, [pc, #68]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	6213      	str	r3, [r2, #32]
 800164c:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a0e      	ldr	r2, [pc, #56]	@ (800168c <HAL_RCC_OscConfig+0x98c>)
 8001652:	f023 0304 	bic.w	r3, r3, #4
 8001656:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001658:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800165c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 8085 	beq.w	8001774 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff f86f 	bl	800074c <HAL_GetTick>
 800166e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001672:	e011      	b.n	8001698 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001674:	f7ff f86a 	bl	800074c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001684:	4293      	cmp	r3, r2
 8001686:	d907      	bls.n	8001698 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e356      	b.n	8001d3a <HAL_RCC_OscConfig+0x103a>
 800168c:	40021000 	.word	0x40021000
 8001690:	10908120 	.word	0x10908120
 8001694:	40007000 	.word	0x40007000
 8001698:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800169c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016a0:	2202      	movs	r2, #2
 80016a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	fa93 f2a3 	rbit	r2, r3
 80016b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016b6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016c0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80016c4:	2202      	movs	r2, #2
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016cc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	fa93 f2a3 	rbit	r2, r3
 80016d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016da:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80016de:	601a      	str	r2, [r3, #0]
  return result;
 80016e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80016e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ea:	fab3 f383 	clz	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <HAL_RCC_OscConfig+0xa00>
 80016fa:	4b98      	ldr	r3, [pc, #608]	@ (800195c <HAL_RCC_OscConfig+0xc5c>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	e013      	b.n	8001728 <HAL_RCC_OscConfig+0xa28>
 8001700:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001704:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001708:	2202      	movs	r2, #2
 800170a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001710:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fa93 f2a3 	rbit	r2, r3
 800171a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800171e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	4b8d      	ldr	r3, [pc, #564]	@ (800195c <HAL_RCC_OscConfig+0xc5c>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800172c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001730:	2102      	movs	r1, #2
 8001732:	6011      	str	r1, [r2, #0]
 8001734:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001738:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	fa92 f1a2 	rbit	r1, r2
 8001742:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001746:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800174a:	6011      	str	r1, [r2, #0]
  return result;
 800174c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001750:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	fab2 f282 	clz	r2, r2
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	f002 021f 	and.w	r2, r2, #31
 8001766:	2101      	movs	r1, #1
 8001768:	fa01 f202 	lsl.w	r2, r1, r2
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d080      	beq.n	8001674 <HAL_RCC_OscConfig+0x974>
 8001772:	e07d      	b.n	8001870 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7fe ffea 	bl	800074c <HAL_GetTick>
 8001778:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177c:	e00b      	b.n	8001796 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177e:	f7fe ffe5 	bl	800074c <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e2d1      	b.n	8001d3a <HAL_RCC_OscConfig+0x103a>
 8001796:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800179e:	2202      	movs	r2, #2
 80017a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	fa93 f2a3 	rbit	r2, r3
 80017b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017be:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017c2:	2202      	movs	r2, #2
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ca:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	fa93 f2a3 	rbit	r2, r3
 80017d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80017dc:	601a      	str	r2, [r3, #0]
  return result;
 80017de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80017e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e8:	fab3 f383 	clz	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <HAL_RCC_OscConfig+0xafe>
 80017f8:	4b58      	ldr	r3, [pc, #352]	@ (800195c <HAL_RCC_OscConfig+0xc5c>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	e013      	b.n	8001826 <HAL_RCC_OscConfig+0xb26>
 80017fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001802:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001806:	2202      	movs	r2, #2
 8001808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800180e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	fa93 f2a3 	rbit	r2, r3
 8001818:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800181c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	4b4e      	ldr	r3, [pc, #312]	@ (800195c <HAL_RCC_OscConfig+0xc5c>)
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001826:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800182a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800182e:	2102      	movs	r1, #2
 8001830:	6011      	str	r1, [r2, #0]
 8001832:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001836:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	fa92 f1a2 	rbit	r1, r2
 8001840:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001844:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001848:	6011      	str	r1, [r2, #0]
  return result;
 800184a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800184e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	fab2 f282 	clz	r2, r2
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	f002 021f 	and.w	r2, r2, #31
 8001864:	2101      	movs	r1, #1
 8001866:	fa01 f202 	lsl.w	r2, r1, r2
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d186      	bne.n	800177e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001870:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001874:	2b01      	cmp	r3, #1
 8001876:	d105      	bne.n	8001884 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001878:	4b38      	ldr	r3, [pc, #224]	@ (800195c <HAL_RCC_OscConfig+0xc5c>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	4a37      	ldr	r2, [pc, #220]	@ (800195c <HAL_RCC_OscConfig+0xc5c>)
 800187e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001882:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001884:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001888:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 8251 	beq.w	8001d38 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001896:	4b31      	ldr	r3, [pc, #196]	@ (800195c <HAL_RCC_OscConfig+0xc5c>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b08      	cmp	r3, #8
 80018a0:	f000 820f 	beq.w	8001cc2 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	f040 8165 	bne.w	8001b80 <HAL_RCC_OscConfig+0xe80>
 80018b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ba:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80018be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	fa93 f2a3 	rbit	r2, r3
 80018d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80018da:	601a      	str	r2, [r3, #0]
  return result;
 80018dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80018e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	461a      	mov	r2, r3
 80018f8:	2300      	movs	r3, #0
 80018fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7fe ff26 	bl	800074c <HAL_GetTick>
 8001900:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001904:	e009      	b.n	800191a <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001906:	f7fe ff21 	bl	800074c <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e20f      	b.n	8001d3a <HAL_RCC_OscConfig+0x103a>
 800191a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800191e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001922:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	fa93 f2a3 	rbit	r2, r3
 8001936:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800193a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800193e:	601a      	str	r2, [r3, #0]
  return result;
 8001940:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001944:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001948:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b3f      	cmp	r3, #63	@ 0x3f
 8001952:	d805      	bhi.n	8001960 <HAL_RCC_OscConfig+0xc60>
 8001954:	4b01      	ldr	r3, [pc, #4]	@ (800195c <HAL_RCC_OscConfig+0xc5c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	e02a      	b.n	80019b0 <HAL_RCC_OscConfig+0xcb0>
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001964:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001968:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800196c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001972:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fa93 f2a3 	rbit	r2, r3
 800197c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001980:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800198a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800198e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001998:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	fa93 f2a3 	rbit	r2, r3
 80019a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a6:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	4bca      	ldr	r3, [pc, #808]	@ (8001cd8 <HAL_RCC_OscConfig+0xfd8>)
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019b4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80019b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80019bc:	6011      	str	r1, [r2, #0]
 80019be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019c2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	fa92 f1a2 	rbit	r1, r2
 80019cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019d0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80019d4:	6011      	str	r1, [r2, #0]
  return result;
 80019d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019da:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	fab2 f282 	clz	r2, r2
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	f042 0220 	orr.w	r2, r2, #32
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	f002 021f 	and.w	r2, r2, #31
 80019f0:	2101      	movs	r1, #1
 80019f2:	fa01 f202 	lsl.w	r2, r1, r2
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d184      	bne.n	8001906 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019fc:	4bb6      	ldr	r3, [pc, #728]	@ (8001cd8 <HAL_RCC_OscConfig+0xfd8>)
 80019fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a00:	f023 020f 	bic.w	r2, r3, #15
 8001a04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	49b1      	ldr	r1, [pc, #708]	@ (8001cd8 <HAL_RCC_OscConfig+0xfd8>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001a16:	4bb0      	ldr	r3, [pc, #704]	@ (8001cd8 <HAL_RCC_OscConfig+0xfd8>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6a19      	ldr	r1, [r3, #32]
 8001a2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	430b      	orrs	r3, r1
 8001a38:	49a7      	ldr	r1, [pc, #668]	@ (8001cd8 <HAL_RCC_OscConfig+0xfd8>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
 8001a3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a42:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a46:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a50:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	fa93 f2a3 	rbit	r2, r3
 8001a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a5e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a62:	601a      	str	r2, [r3, #0]
  return result;
 8001a64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a68:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a6c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a6e:	fab3 f383 	clz	r3, r3
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2301      	movs	r3, #1
 8001a82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7fe fe62 	bl	800074c <HAL_GetTick>
 8001a88:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a8c:	e009      	b.n	8001aa2 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7fe fe5d 	bl	800074c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e14b      	b.n	8001d3a <HAL_RCC_OscConfig+0x103a>
 8001aa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001aaa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	fa93 f2a3 	rbit	r2, r3
 8001abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ac6:	601a      	str	r2, [r3, #0]
  return result;
 8001ac8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001acc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ad0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ada:	d802      	bhi.n	8001ae2 <HAL_RCC_OscConfig+0xde2>
 8001adc:	4b7e      	ldr	r3, [pc, #504]	@ (8001cd8 <HAL_RCC_OscConfig+0xfd8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	e027      	b.n	8001b32 <HAL_RCC_OscConfig+0xe32>
 8001ae2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001aea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fa93 f2a3 	rbit	r2, r3
 8001afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b02:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b0c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b1a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	fa93 f2a3 	rbit	r2, r3
 8001b24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b28:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cd8 <HAL_RCC_OscConfig+0xfd8>)
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b36:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b3a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b3e:	6011      	str	r1, [r2, #0]
 8001b40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b44:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	fa92 f1a2 	rbit	r1, r2
 8001b4e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b52:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001b56:	6011      	str	r1, [r2, #0]
  return result;
 8001b58:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b5c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	fab2 f282 	clz	r2, r2
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	f042 0220 	orr.w	r2, r2, #32
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	f002 021f 	and.w	r2, r2, #31
 8001b72:	2101      	movs	r1, #1
 8001b74:	fa01 f202 	lsl.w	r2, r1, r2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d087      	beq.n	8001a8e <HAL_RCC_OscConfig+0xd8e>
 8001b7e:	e0db      	b.n	8001d38 <HAL_RCC_OscConfig+0x1038>
 8001b80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b84:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b92:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	fa93 f2a3 	rbit	r2, r3
 8001b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001ba4:	601a      	str	r2, [r3, #0]
  return result;
 8001ba6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001baa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001bae:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7fe fdc1 	bl	800074c <HAL_GetTick>
 8001bca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bce:	e009      	b.n	8001be4 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7fe fdbc 	bl	800074c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e0aa      	b.n	8001d3a <HAL_RCC_OscConfig+0x103a>
 8001be4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001bec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	fa93 f2a3 	rbit	r2, r3
 8001c00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c04:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c08:	601a      	str	r2, [r3, #0]
  return result;
 8001c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c0e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c1c:	d802      	bhi.n	8001c24 <HAL_RCC_OscConfig+0xf24>
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd8 <HAL_RCC_OscConfig+0xfd8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	e027      	b.n	8001c74 <HAL_RCC_OscConfig+0xf74>
 8001c24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c28:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c36:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	fa93 f2a3 	rbit	r2, r3
 8001c40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c44:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c4e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c5c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	fa93 f2a3 	rbit	r2, r3
 8001c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c6a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <HAL_RCC_OscConfig+0xfd8>)
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c78:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c7c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c80:	6011      	str	r1, [r2, #0]
 8001c82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c86:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	fa92 f1a2 	rbit	r1, r2
 8001c90:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c94:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001c98:	6011      	str	r1, [r2, #0]
  return result;
 8001c9a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c9e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	fab2 f282 	clz	r2, r2
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	f042 0220 	orr.w	r2, r2, #32
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	f002 021f 	and.w	r2, r2, #31
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d187      	bne.n	8001bd0 <HAL_RCC_OscConfig+0xed0>
 8001cc0:	e03a      	b.n	8001d38 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d104      	bne.n	8001cdc <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e031      	b.n	8001d3a <HAL_RCC_OscConfig+0x103a>
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cdc:	4b19      	ldr	r3, [pc, #100]	@ (8001d44 <HAL_RCC_OscConfig+0x1044>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001ce4:	4b17      	ldr	r3, [pc, #92]	@ (8001d44 <HAL_RCC_OscConfig+0x1044>)
 8001ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001cf0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001cf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d117      	bne.n	8001d34 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d08:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d10b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d20:	f003 020f 	and.w	r2, r3, #15
 8001d24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000

08001d48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b09e      	sub	sp, #120	@ 0x78
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e154      	b.n	800200a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d60:	4b89      	ldr	r3, [pc, #548]	@ (8001f88 <HAL_RCC_ClockConfig+0x240>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d910      	bls.n	8001d90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6e:	4b86      	ldr	r3, [pc, #536]	@ (8001f88 <HAL_RCC_ClockConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 0207 	bic.w	r2, r3, #7
 8001d76:	4984      	ldr	r1, [pc, #528]	@ (8001f88 <HAL_RCC_ClockConfig+0x240>)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b82      	ldr	r3, [pc, #520]	@ (8001f88 <HAL_RCC_ClockConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e13c      	b.n	800200a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d9c:	4b7b      	ldr	r3, [pc, #492]	@ (8001f8c <HAL_RCC_ClockConfig+0x244>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4978      	ldr	r1, [pc, #480]	@ (8001f8c <HAL_RCC_ClockConfig+0x244>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80cd 	beq.w	8001f56 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d137      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xec>
 8001dc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001dd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ddc:	d802      	bhi.n	8001de4 <HAL_RCC_ClockConfig+0x9c>
 8001dde:	4b6b      	ldr	r3, [pc, #428]	@ (8001f8c <HAL_RCC_ClockConfig+0x244>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	e00f      	b.n	8001e04 <HAL_RCC_ClockConfig+0xbc>
 8001de4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001de8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	667b      	str	r3, [r7, #100]	@ 0x64
 8001df2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001df6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001df8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e00:	4b62      	ldr	r3, [pc, #392]	@ (8001f8c <HAL_RCC_ClockConfig+0x244>)
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001e0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e0c:	fa92 f2a2 	rbit	r2, r2
 8001e10:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001e12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e14:	fab2 f282 	clz	r2, r2
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	f042 0220 	orr.w	r2, r2, #32
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	f002 021f 	and.w	r2, r2, #31
 8001e24:	2101      	movs	r1, #1
 8001e26:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d171      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0ea      	b.n	800200a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d137      	bne.n	8001eac <HAL_RCC_ClockConfig+0x164>
 8001e3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e40:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e54:	d802      	bhi.n	8001e5c <HAL_RCC_ClockConfig+0x114>
 8001e56:	4b4d      	ldr	r3, [pc, #308]	@ (8001f8c <HAL_RCC_ClockConfig+0x244>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	e00f      	b.n	8001e7c <HAL_RCC_ClockConfig+0x134>
 8001e5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e60:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e78:	4b44      	ldr	r3, [pc, #272]	@ (8001f8c <HAL_RCC_ClockConfig+0x244>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e80:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001e82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e84:	fa92 f2a2 	rbit	r2, r2
 8001e88:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001e8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e8c:	fab2 f282 	clz	r2, r2
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f042 0220 	orr.w	r2, r2, #32
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f002 021f 	and.w	r2, r2, #31
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d135      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0ae      	b.n	800200a <HAL_RCC_ClockConfig+0x2c2>
 8001eac:	2302      	movs	r3, #2
 8001eae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ec2:	d802      	bhi.n	8001eca <HAL_RCC_ClockConfig+0x182>
 8001ec4:	4b31      	ldr	r3, [pc, #196]	@ (8001f8c <HAL_RCC_ClockConfig+0x244>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	e00d      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x19e>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	623b      	str	r3, [r7, #32]
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f8c <HAL_RCC_ClockConfig+0x244>)
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	61ba      	str	r2, [r7, #24]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	fa92 f2a2 	rbit	r2, r2
 8001ef0:	617a      	str	r2, [r7, #20]
  return result;
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	fab2 f282 	clz	r2, r2
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f042 0220 	orr.w	r2, r2, #32
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f002 021f 	and.w	r2, r2, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e07a      	b.n	800200a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f14:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <HAL_RCC_ClockConfig+0x244>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f023 0203 	bic.w	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	491a      	ldr	r1, [pc, #104]	@ (8001f8c <HAL_RCC_ClockConfig+0x244>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f26:	f7fe fc11 	bl	800074c <HAL_GetTick>
 8001f2a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2e:	f7fe fc0d 	bl	800074c <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e062      	b.n	800200a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <HAL_RCC_ClockConfig+0x244>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 020c 	and.w	r2, r3, #12
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d1eb      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f56:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <HAL_RCC_ClockConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d215      	bcs.n	8001f90 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <HAL_RCC_ClockConfig+0x240>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 0207 	bic.w	r2, r3, #7
 8001f6c:	4906      	ldr	r1, [pc, #24]	@ (8001f88 <HAL_RCC_ClockConfig+0x240>)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f74:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <HAL_RCC_ClockConfig+0x240>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d006      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e041      	b.n	800200a <HAL_RCC_ClockConfig+0x2c2>
 8001f86:	bf00      	nop
 8001f88:	40022000 	.word	0x40022000
 8001f8c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002014 <HAL_RCC_ClockConfig+0x2cc>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	491a      	ldr	r1, [pc, #104]	@ (8002014 <HAL_RCC_ClockConfig+0x2cc>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fba:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <HAL_RCC_ClockConfig+0x2cc>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4912      	ldr	r1, [pc, #72]	@ (8002014 <HAL_RCC_ClockConfig+0x2cc>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fce:	f000 f829 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <HAL_RCC_ClockConfig+0x2cc>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fdc:	22f0      	movs	r2, #240	@ 0xf0
 8001fde:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	fa92 f2a2 	rbit	r2, r2
 8001fe6:	60fa      	str	r2, [r7, #12]
  return result;
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	fab2 f282 	clz	r2, r2
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	40d3      	lsrs	r3, r2
 8001ff2:	4a09      	ldr	r2, [pc, #36]	@ (8002018 <HAL_RCC_ClockConfig+0x2d0>)
 8001ff4:	5cd3      	ldrb	r3, [r2, r3]
 8001ff6:	fa21 f303 	lsr.w	r3, r1, r3
 8001ffa:	4a08      	ldr	r2, [pc, #32]	@ (800201c <HAL_RCC_ClockConfig+0x2d4>)
 8001ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <HAL_RCC_ClockConfig+0x2d8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fb5e 	bl	80006c4 <HAL_InitTick>
  
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3778      	adds	r7, #120	@ 0x78
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	080036cc 	.word	0x080036cc
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800203e:	4b1f      	ldr	r3, [pc, #124]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b04      	cmp	r3, #4
 800204c:	d002      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x30>
 800204e:	2b08      	cmp	r3, #8
 8002050:	d003      	beq.n	800205a <HAL_RCC_GetSysClockFreq+0x36>
 8002052:	e029      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002054:	4b1a      	ldr	r3, [pc, #104]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002056:	613b      	str	r3, [r7, #16]
      break;
 8002058:	e029      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	0c9b      	lsrs	r3, r3, #18
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	4a18      	ldr	r2, [pc, #96]	@ (80020c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002064:	5cd3      	ldrb	r3, [r2, r3]
 8002066:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002068:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x98>)
 800206a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	4a15      	ldr	r2, [pc, #84]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002072:	5cd3      	ldrb	r3, [r2, r3]
 8002074:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002080:	4a0f      	ldr	r2, [pc, #60]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	fbb2 f2f3 	udiv	r2, r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	e007      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002092:	4a0b      	ldr	r2, [pc, #44]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	fbb2 f2f3 	udiv	r2, r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	613b      	str	r3, [r7, #16]
      break;
 80020a6:	e002      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020aa:	613b      	str	r3, [r7, #16]
      break;
 80020ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ae:	693b      	ldr	r3, [r7, #16]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	40021000 	.word	0x40021000
 80020c0:	007a1200 	.word	0x007a1200
 80020c4:	080036e4 	.word	0x080036e4
 80020c8:	080036f4 	.word	0x080036f4

080020cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d0:	4b03      	ldr	r3, [pc, #12]	@ (80020e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000000 	.word	0x20000000

080020e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020ea:	f7ff ffef 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 80020ee:	4601      	mov	r1, r0
 80020f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020f8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80020fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	fa92 f2a2 	rbit	r2, r2
 8002104:	603a      	str	r2, [r7, #0]
  return result;
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	fab2 f282 	clz	r2, r2
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	40d3      	lsrs	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	080036dc 	.word	0x080036dc

08002128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800212e:	f7ff ffcd 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 8002132:	4601      	mov	r1, r0
 8002134:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800213c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002140:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	fa92 f2a2 	rbit	r2, r2
 8002148:	603a      	str	r2, [r7, #0]
  return result;
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	fab2 f282 	clz	r2, r2
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	40d3      	lsrs	r3, r2
 8002154:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	080036dc 	.word	0x080036dc

0800216c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b092      	sub	sp, #72	@ 0x48
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80d2 	beq.w	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002190:	4b4d      	ldr	r3, [pc, #308]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10e      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	4b4a      	ldr	r3, [pc, #296]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	4a49      	ldr	r2, [pc, #292]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a6:	61d3      	str	r3, [r2, #28]
 80021a8:	4b47      	ldr	r3, [pc, #284]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ba:	4b44      	ldr	r3, [pc, #272]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d118      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c6:	4b41      	ldr	r3, [pc, #260]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a40      	ldr	r2, [pc, #256]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d2:	f7fe fabb 	bl	800074c <HAL_GetTick>
 80021d6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	e008      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021da:	f7fe fab7 	bl	800074c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b64      	cmp	r3, #100	@ 0x64
 80021e6:	d901      	bls.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e1d4      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ec:	4b37      	ldr	r3, [pc, #220]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021f8:	4b33      	ldr	r3, [pc, #204]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002200:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8082 	beq.w	800230e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002212:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002214:	429a      	cmp	r2, r3
 8002216:	d07a      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002218:	4b2b      	ldr	r3, [pc, #172]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002222:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002226:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	4b25      	ldr	r3, [pc, #148]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	461a      	mov	r2, r3
 8002242:	2301      	movs	r3, #1
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800224a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	4b1c      	ldr	r3, [pc, #112]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	461a      	mov	r2, r3
 8002266:	2300      	movs	r3, #0
 8002268:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800226a:	4a17      	ldr	r2, [pc, #92]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800226c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800226e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d049      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7fe fa67 	bl	800074c <HAL_GetTick>
 800227e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002280:	e00a      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fa63 	bl	800074c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e17e      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002298:	2302      	movs	r3, #2
 800229a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80022a4:	2302      	movs	r3, #2
 80022a6:	623b      	str	r3, [r7, #32]
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	61fb      	str	r3, [r7, #28]
  return result;
 80022b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d108      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80022c2:	4b01      	ldr	r3, [pc, #4]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	e00d      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40007000 	.word	0x40007000
 80022d0:	10908100 	.word	0x10908100
 80022d4:	2302      	movs	r3, #2
 80022d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	4b9a      	ldr	r3, [pc, #616]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e4:	2202      	movs	r2, #2
 80022e6:	613a      	str	r2, [r7, #16]
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	fa92 f2a2 	rbit	r2, r2
 80022ee:	60fa      	str	r2, [r7, #12]
  return result;
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	fab2 f282 	clz	r2, r2
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f002 021f 	and.w	r2, r2, #31
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0b9      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800230e:	4b8f      	ldr	r3, [pc, #572]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	498c      	ldr	r1, [pc, #560]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800231c:	4313      	orrs	r3, r2
 800231e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002320:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002324:	2b01      	cmp	r3, #1
 8002326:	d105      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002328:	4b88      	ldr	r3, [pc, #544]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	4a87      	ldr	r2, [pc, #540]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002332:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002340:	4b82      	ldr	r3, [pc, #520]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002344:	f023 0203 	bic.w	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	497f      	ldr	r1, [pc, #508]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234e:	4313      	orrs	r3, r2
 8002350:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800235e:	4b7b      	ldr	r3, [pc, #492]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4978      	ldr	r1, [pc, #480]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236c:	4313      	orrs	r3, r2
 800236e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800237c:	4b73      	ldr	r3, [pc, #460]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002380:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	4970      	ldr	r1, [pc, #448]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238a:	4313      	orrs	r3, r2
 800238c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800239a:	4b6c      	ldr	r3, [pc, #432]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	f023 0210 	bic.w	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4969      	ldr	r1, [pc, #420]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80023b8:	4b64      	ldr	r3, [pc, #400]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c4:	4961      	ldr	r1, [pc, #388]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023d6:	4b5d      	ldr	r3, [pc, #372]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	f023 0220 	bic.w	r2, r3, #32
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	495a      	ldr	r1, [pc, #360]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023f4:	4b55      	ldr	r3, [pc, #340]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	4952      	ldr	r1, [pc, #328]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002402:	4313      	orrs	r3, r2
 8002404:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002412:	4b4e      	ldr	r3, [pc, #312]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	494b      	ldr	r1, [pc, #300]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002420:	4313      	orrs	r3, r2
 8002422:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002430:	4b46      	ldr	r3, [pc, #280]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002434:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	4943      	ldr	r1, [pc, #268]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800243e:	4313      	orrs	r3, r2
 8002440:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800244e:	4b3f      	ldr	r3, [pc, #252]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	493c      	ldr	r1, [pc, #240]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800246c:	4b37      	ldr	r3, [pc, #220]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002470:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	4934      	ldr	r1, [pc, #208]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800247a:	4313      	orrs	r3, r2
 800247c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800248a:	4b30      	ldr	r3, [pc, #192]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800248c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002496:	492d      	ldr	r1, [pc, #180]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002498:	4313      	orrs	r3, r2
 800249a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024a8:	4b28      	ldr	r3, [pc, #160]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b4:	4925      	ldr	r1, [pc, #148]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d008      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80024c6:	4b21      	ldr	r3, [pc, #132]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	491e      	ldr	r1, [pc, #120]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80024e4:	4b19      	ldr	r3, [pc, #100]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f0:	4916      	ldr	r1, [pc, #88]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d008      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002502:	4b12      	ldr	r3, [pc, #72]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800250e:	490f      	ldr	r1, [pc, #60]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002510:	4313      	orrs	r3, r2
 8002512:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002520:	4b0a      	ldr	r3, [pc, #40]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002524:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252c:	4907      	ldr	r1, [pc, #28]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252e:	4313      	orrs	r3, r2
 8002530:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00c      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800253e:	4b03      	ldr	r3, [pc, #12]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	e002      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002552:	4913      	ldr	r1, [pc, #76]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002554:	4313      	orrs	r3, r2
 8002556:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002564:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002568:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002570:	490b      	ldr	r1, [pc, #44]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002572:	4313      	orrs	r3, r2
 8002574:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002582:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800258e:	4904      	ldr	r1, [pc, #16]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002590:	4313      	orrs	r3, r2
 8002592:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3748      	adds	r7, #72	@ 0x48
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e049      	b.n	800264a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fd ff88 	bl	80004e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f000 fa9a 	bl	8002b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d001      	beq.n	800266c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e04f      	b.n	800270c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a23      	ldr	r2, [pc, #140]	@ (8002718 <HAL_TIM_Base_Start_IT+0xc4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01d      	beq.n	80026ca <HAL_TIM_Base_Start_IT+0x76>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002696:	d018      	beq.n	80026ca <HAL_TIM_Base_Start_IT+0x76>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1f      	ldr	r2, [pc, #124]	@ (800271c <HAL_TIM_Base_Start_IT+0xc8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_TIM_Base_Start_IT+0x76>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002720 <HAL_TIM_Base_Start_IT+0xcc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00e      	beq.n	80026ca <HAL_TIM_Base_Start_IT+0x76>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002724 <HAL_TIM_Base_Start_IT+0xd0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d009      	beq.n	80026ca <HAL_TIM_Base_Start_IT+0x76>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002728 <HAL_TIM_Base_Start_IT+0xd4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d004      	beq.n	80026ca <HAL_TIM_Base_Start_IT+0x76>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a19      	ldr	r2, [pc, #100]	@ (800272c <HAL_TIM_Base_Start_IT+0xd8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d115      	bne.n	80026f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <HAL_TIM_Base_Start_IT+0xdc>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d015      	beq.n	8002708 <HAL_TIM_Base_Start_IT+0xb4>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026e2:	d011      	beq.n	8002708 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f4:	e008      	b.n	8002708 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0201 	orr.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e000      	b.n	800270a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002708:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	40012c00 	.word	0x40012c00
 800271c:	40000400 	.word	0x40000400
 8002720:	40000800 	.word	0x40000800
 8002724:	40013400 	.word	0x40013400
 8002728:	40014000 	.word	0x40014000
 800272c:	40015000 	.word	0x40015000
 8002730:	00010007 	.word	0x00010007

08002734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d020      	beq.n	8002798 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01b      	beq.n	8002798 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0202 	mvn.w	r2, #2
 8002768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f9ad 	bl	8002ade <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f99f 	bl	8002aca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f9b0 	bl	8002af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d020      	beq.n	80027e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01b      	beq.n	80027e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0204 	mvn.w	r2, #4
 80027b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f987 	bl	8002ade <HAL_TIM_IC_CaptureCallback>
 80027d0:	e005      	b.n	80027de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f979 	bl	8002aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f98a 	bl	8002af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d020      	beq.n	8002830 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01b      	beq.n	8002830 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0208 	mvn.w	r2, #8
 8002800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2204      	movs	r2, #4
 8002806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f961 	bl	8002ade <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f953 	bl	8002aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f964 	bl	8002af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	d020      	beq.n	800287c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01b      	beq.n	800287c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0210 	mvn.w	r2, #16
 800284c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2208      	movs	r2, #8
 8002852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f93b 	bl	8002ade <HAL_TIM_IC_CaptureCallback>
 8002868:	e005      	b.n	8002876 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f92d 	bl	8002aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f93e 	bl	8002af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0201 	mvn.w	r2, #1
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fd fcf0 	bl	8000280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00c      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fa7a 	bl	8002db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00c      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fa72 	bl	8002dcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f8fd 	bl	8002b06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0220 	mvn.w	r2, #32
 8002928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fa3a 	bl	8002da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_TIM_ConfigClockSource+0x1c>
 8002950:	2302      	movs	r3, #2
 8002952:	e0b6      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x18a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002972:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800297e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002990:	d03e      	beq.n	8002a10 <HAL_TIM_ConfigClockSource+0xd8>
 8002992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002996:	f200 8087 	bhi.w	8002aa8 <HAL_TIM_ConfigClockSource+0x170>
 800299a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800299e:	f000 8086 	beq.w	8002aae <HAL_TIM_ConfigClockSource+0x176>
 80029a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029a6:	d87f      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x170>
 80029a8:	2b70      	cmp	r3, #112	@ 0x70
 80029aa:	d01a      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0xaa>
 80029ac:	2b70      	cmp	r3, #112	@ 0x70
 80029ae:	d87b      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x170>
 80029b0:	2b60      	cmp	r3, #96	@ 0x60
 80029b2:	d050      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x11e>
 80029b4:	2b60      	cmp	r3, #96	@ 0x60
 80029b6:	d877      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x170>
 80029b8:	2b50      	cmp	r3, #80	@ 0x50
 80029ba:	d03c      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0xfe>
 80029bc:	2b50      	cmp	r3, #80	@ 0x50
 80029be:	d873      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x170>
 80029c0:	2b40      	cmp	r3, #64	@ 0x40
 80029c2:	d058      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x13e>
 80029c4:	2b40      	cmp	r3, #64	@ 0x40
 80029c6:	d86f      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x170>
 80029c8:	2b30      	cmp	r3, #48	@ 0x30
 80029ca:	d064      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x15e>
 80029cc:	2b30      	cmp	r3, #48	@ 0x30
 80029ce:	d86b      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x170>
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d060      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x15e>
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d867      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x170>
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d05c      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x15e>
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d05a      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x15e>
 80029e0:	e062      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029f2:	f000 f9b7 	bl	8002d64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	609a      	str	r2, [r3, #8]
      break;
 8002a0e:	e04f      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a20:	f000 f9a0 	bl	8002d64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a32:	609a      	str	r2, [r3, #8]
      break;
 8002a34:	e03c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a42:	461a      	mov	r2, r3
 8002a44:	f000 f914 	bl	8002c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2150      	movs	r1, #80	@ 0x50
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f96d 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8002a54:	e02c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a62:	461a      	mov	r2, r3
 8002a64:	f000 f933 	bl	8002cce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2160      	movs	r1, #96	@ 0x60
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f95d 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8002a74:	e01c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a82:	461a      	mov	r2, r3
 8002a84:	f000 f8f4 	bl	8002c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2140      	movs	r1, #64	@ 0x40
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f94d 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8002a94:	e00c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f000 f944 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8002aa6:	e003      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002aac:	e000      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a48      	ldr	r2, [pc, #288]	@ (8002c50 <TIM_Base_SetConfig+0x134>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d013      	beq.n	8002b5c <TIM_Base_SetConfig+0x40>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3a:	d00f      	beq.n	8002b5c <TIM_Base_SetConfig+0x40>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a45      	ldr	r2, [pc, #276]	@ (8002c54 <TIM_Base_SetConfig+0x138>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00b      	beq.n	8002b5c <TIM_Base_SetConfig+0x40>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a44      	ldr	r2, [pc, #272]	@ (8002c58 <TIM_Base_SetConfig+0x13c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d007      	beq.n	8002b5c <TIM_Base_SetConfig+0x40>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a43      	ldr	r2, [pc, #268]	@ (8002c5c <TIM_Base_SetConfig+0x140>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d003      	beq.n	8002b5c <TIM_Base_SetConfig+0x40>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a42      	ldr	r2, [pc, #264]	@ (8002c60 <TIM_Base_SetConfig+0x144>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d108      	bne.n	8002b6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a37      	ldr	r2, [pc, #220]	@ (8002c50 <TIM_Base_SetConfig+0x134>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d01f      	beq.n	8002bb6 <TIM_Base_SetConfig+0x9a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7c:	d01b      	beq.n	8002bb6 <TIM_Base_SetConfig+0x9a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a34      	ldr	r2, [pc, #208]	@ (8002c54 <TIM_Base_SetConfig+0x138>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d017      	beq.n	8002bb6 <TIM_Base_SetConfig+0x9a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a33      	ldr	r2, [pc, #204]	@ (8002c58 <TIM_Base_SetConfig+0x13c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d013      	beq.n	8002bb6 <TIM_Base_SetConfig+0x9a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a32      	ldr	r2, [pc, #200]	@ (8002c5c <TIM_Base_SetConfig+0x140>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00f      	beq.n	8002bb6 <TIM_Base_SetConfig+0x9a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a32      	ldr	r2, [pc, #200]	@ (8002c64 <TIM_Base_SetConfig+0x148>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00b      	beq.n	8002bb6 <TIM_Base_SetConfig+0x9a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a31      	ldr	r2, [pc, #196]	@ (8002c68 <TIM_Base_SetConfig+0x14c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d007      	beq.n	8002bb6 <TIM_Base_SetConfig+0x9a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a30      	ldr	r2, [pc, #192]	@ (8002c6c <TIM_Base_SetConfig+0x150>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d003      	beq.n	8002bb6 <TIM_Base_SetConfig+0x9a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8002c60 <TIM_Base_SetConfig+0x144>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d108      	bne.n	8002bc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a18      	ldr	r2, [pc, #96]	@ (8002c50 <TIM_Base_SetConfig+0x134>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d013      	beq.n	8002c1c <TIM_Base_SetConfig+0x100>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a19      	ldr	r2, [pc, #100]	@ (8002c5c <TIM_Base_SetConfig+0x140>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00f      	beq.n	8002c1c <TIM_Base_SetConfig+0x100>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a19      	ldr	r2, [pc, #100]	@ (8002c64 <TIM_Base_SetConfig+0x148>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00b      	beq.n	8002c1c <TIM_Base_SetConfig+0x100>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a18      	ldr	r2, [pc, #96]	@ (8002c68 <TIM_Base_SetConfig+0x14c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d007      	beq.n	8002c1c <TIM_Base_SetConfig+0x100>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a17      	ldr	r2, [pc, #92]	@ (8002c6c <TIM_Base_SetConfig+0x150>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_Base_SetConfig+0x100>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a12      	ldr	r2, [pc, #72]	@ (8002c60 <TIM_Base_SetConfig+0x144>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d103      	bne.n	8002c24 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d105      	bne.n	8002c42 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f023 0201 	bic.w	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	611a      	str	r2, [r3, #16]
  }
}
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40012c00 	.word	0x40012c00
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40000800 	.word	0x40000800
 8002c5c:	40013400 	.word	0x40013400
 8002c60:	40015000 	.word	0x40015000
 8002c64:	40014000 	.word	0x40014000
 8002c68:	40014400 	.word	0x40014400
 8002c6c:	40014800 	.word	0x40014800

08002c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f023 0201 	bic.w	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f023 030a 	bic.w	r3, r3, #10
 8002cac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	621a      	str	r2, [r3, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b087      	sub	sp, #28
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	f023 0210 	bic.w	r2, r3, #16
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	031b      	lsls	r3, r3, #12
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f043 0307 	orr.w	r3, r3, #7
 8002d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	609a      	str	r2, [r3, #8]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	021a      	lsls	r2, r3, #8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	609a      	str	r2, [r3, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	371c      	adds	r7, #28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e040      	b.n	8002e74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fd fb90 	bl	8000528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2224      	movs	r2, #36	@ 0x24
 8002e0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f9fc 	bl	8003224 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f825 	bl	8002e7c <UART_SetConfig>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e01b      	b.n	8002e74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fa7b 	bl	8003368 <UART_CheckIdleState>
 8002e72:	4603      	mov	r3, r0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b92      	ldr	r3, [pc, #584]	@ (80030f0 <UART_SetConfig+0x274>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	6979      	ldr	r1, [r7, #20]
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a80      	ldr	r2, [pc, #512]	@ (80030f4 <UART_SetConfig+0x278>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d120      	bne.n	8002f3a <UART_SetConfig+0xbe>
 8002ef8:	4b7f      	ldr	r3, [pc, #508]	@ (80030f8 <UART_SetConfig+0x27c>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d817      	bhi.n	8002f34 <UART_SetConfig+0xb8>
 8002f04:	a201      	add	r2, pc, #4	@ (adr r2, 8002f0c <UART_SetConfig+0x90>)
 8002f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f1d 	.word	0x08002f1d
 8002f10:	08002f29 	.word	0x08002f29
 8002f14:	08002f2f 	.word	0x08002f2f
 8002f18:	08002f23 	.word	0x08002f23
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	77fb      	strb	r3, [r7, #31]
 8002f20:	e0b5      	b.n	800308e <UART_SetConfig+0x212>
 8002f22:	2302      	movs	r3, #2
 8002f24:	77fb      	strb	r3, [r7, #31]
 8002f26:	e0b2      	b.n	800308e <UART_SetConfig+0x212>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	77fb      	strb	r3, [r7, #31]
 8002f2c:	e0af      	b.n	800308e <UART_SetConfig+0x212>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	77fb      	strb	r3, [r7, #31]
 8002f32:	e0ac      	b.n	800308e <UART_SetConfig+0x212>
 8002f34:	2310      	movs	r3, #16
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e0a9      	b.n	800308e <UART_SetConfig+0x212>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a6f      	ldr	r2, [pc, #444]	@ (80030fc <UART_SetConfig+0x280>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d124      	bne.n	8002f8e <UART_SetConfig+0x112>
 8002f44:	4b6c      	ldr	r3, [pc, #432]	@ (80030f8 <UART_SetConfig+0x27c>)
 8002f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f50:	d011      	beq.n	8002f76 <UART_SetConfig+0xfa>
 8002f52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f56:	d817      	bhi.n	8002f88 <UART_SetConfig+0x10c>
 8002f58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f5c:	d011      	beq.n	8002f82 <UART_SetConfig+0x106>
 8002f5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f62:	d811      	bhi.n	8002f88 <UART_SetConfig+0x10c>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <UART_SetConfig+0xf4>
 8002f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f6c:	d006      	beq.n	8002f7c <UART_SetConfig+0x100>
 8002f6e:	e00b      	b.n	8002f88 <UART_SetConfig+0x10c>
 8002f70:	2300      	movs	r3, #0
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	e08b      	b.n	800308e <UART_SetConfig+0x212>
 8002f76:	2302      	movs	r3, #2
 8002f78:	77fb      	strb	r3, [r7, #31]
 8002f7a:	e088      	b.n	800308e <UART_SetConfig+0x212>
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	77fb      	strb	r3, [r7, #31]
 8002f80:	e085      	b.n	800308e <UART_SetConfig+0x212>
 8002f82:	2308      	movs	r3, #8
 8002f84:	77fb      	strb	r3, [r7, #31]
 8002f86:	e082      	b.n	800308e <UART_SetConfig+0x212>
 8002f88:	2310      	movs	r3, #16
 8002f8a:	77fb      	strb	r3, [r7, #31]
 8002f8c:	e07f      	b.n	800308e <UART_SetConfig+0x212>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a5b      	ldr	r2, [pc, #364]	@ (8003100 <UART_SetConfig+0x284>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d124      	bne.n	8002fe2 <UART_SetConfig+0x166>
 8002f98:	4b57      	ldr	r3, [pc, #348]	@ (80030f8 <UART_SetConfig+0x27c>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002fa0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fa4:	d011      	beq.n	8002fca <UART_SetConfig+0x14e>
 8002fa6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002faa:	d817      	bhi.n	8002fdc <UART_SetConfig+0x160>
 8002fac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fb0:	d011      	beq.n	8002fd6 <UART_SetConfig+0x15a>
 8002fb2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fb6:	d811      	bhi.n	8002fdc <UART_SetConfig+0x160>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <UART_SetConfig+0x148>
 8002fbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fc0:	d006      	beq.n	8002fd0 <UART_SetConfig+0x154>
 8002fc2:	e00b      	b.n	8002fdc <UART_SetConfig+0x160>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	77fb      	strb	r3, [r7, #31]
 8002fc8:	e061      	b.n	800308e <UART_SetConfig+0x212>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	77fb      	strb	r3, [r7, #31]
 8002fce:	e05e      	b.n	800308e <UART_SetConfig+0x212>
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	77fb      	strb	r3, [r7, #31]
 8002fd4:	e05b      	b.n	800308e <UART_SetConfig+0x212>
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	77fb      	strb	r3, [r7, #31]
 8002fda:	e058      	b.n	800308e <UART_SetConfig+0x212>
 8002fdc:	2310      	movs	r3, #16
 8002fde:	77fb      	strb	r3, [r7, #31]
 8002fe0:	e055      	b.n	800308e <UART_SetConfig+0x212>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a47      	ldr	r2, [pc, #284]	@ (8003104 <UART_SetConfig+0x288>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d124      	bne.n	8003036 <UART_SetConfig+0x1ba>
 8002fec:	4b42      	ldr	r3, [pc, #264]	@ (80030f8 <UART_SetConfig+0x27c>)
 8002fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002ff4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ff8:	d011      	beq.n	800301e <UART_SetConfig+0x1a2>
 8002ffa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ffe:	d817      	bhi.n	8003030 <UART_SetConfig+0x1b4>
 8003000:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003004:	d011      	beq.n	800302a <UART_SetConfig+0x1ae>
 8003006:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800300a:	d811      	bhi.n	8003030 <UART_SetConfig+0x1b4>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <UART_SetConfig+0x19c>
 8003010:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003014:	d006      	beq.n	8003024 <UART_SetConfig+0x1a8>
 8003016:	e00b      	b.n	8003030 <UART_SetConfig+0x1b4>
 8003018:	2300      	movs	r3, #0
 800301a:	77fb      	strb	r3, [r7, #31]
 800301c:	e037      	b.n	800308e <UART_SetConfig+0x212>
 800301e:	2302      	movs	r3, #2
 8003020:	77fb      	strb	r3, [r7, #31]
 8003022:	e034      	b.n	800308e <UART_SetConfig+0x212>
 8003024:	2304      	movs	r3, #4
 8003026:	77fb      	strb	r3, [r7, #31]
 8003028:	e031      	b.n	800308e <UART_SetConfig+0x212>
 800302a:	2308      	movs	r3, #8
 800302c:	77fb      	strb	r3, [r7, #31]
 800302e:	e02e      	b.n	800308e <UART_SetConfig+0x212>
 8003030:	2310      	movs	r3, #16
 8003032:	77fb      	strb	r3, [r7, #31]
 8003034:	e02b      	b.n	800308e <UART_SetConfig+0x212>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a33      	ldr	r2, [pc, #204]	@ (8003108 <UART_SetConfig+0x28c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d124      	bne.n	800308a <UART_SetConfig+0x20e>
 8003040:	4b2d      	ldr	r3, [pc, #180]	@ (80030f8 <UART_SetConfig+0x27c>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003044:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003048:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800304c:	d011      	beq.n	8003072 <UART_SetConfig+0x1f6>
 800304e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003052:	d817      	bhi.n	8003084 <UART_SetConfig+0x208>
 8003054:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003058:	d011      	beq.n	800307e <UART_SetConfig+0x202>
 800305a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800305e:	d811      	bhi.n	8003084 <UART_SetConfig+0x208>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <UART_SetConfig+0x1f0>
 8003064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003068:	d006      	beq.n	8003078 <UART_SetConfig+0x1fc>
 800306a:	e00b      	b.n	8003084 <UART_SetConfig+0x208>
 800306c:	2300      	movs	r3, #0
 800306e:	77fb      	strb	r3, [r7, #31]
 8003070:	e00d      	b.n	800308e <UART_SetConfig+0x212>
 8003072:	2302      	movs	r3, #2
 8003074:	77fb      	strb	r3, [r7, #31]
 8003076:	e00a      	b.n	800308e <UART_SetConfig+0x212>
 8003078:	2304      	movs	r3, #4
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e007      	b.n	800308e <UART_SetConfig+0x212>
 800307e:	2308      	movs	r3, #8
 8003080:	77fb      	strb	r3, [r7, #31]
 8003082:	e004      	b.n	800308e <UART_SetConfig+0x212>
 8003084:	2310      	movs	r3, #16
 8003086:	77fb      	strb	r3, [r7, #31]
 8003088:	e001      	b.n	800308e <UART_SetConfig+0x212>
 800308a:	2310      	movs	r3, #16
 800308c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003096:	d16b      	bne.n	8003170 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003098:	7ffb      	ldrb	r3, [r7, #31]
 800309a:	2b08      	cmp	r3, #8
 800309c:	d838      	bhi.n	8003110 <UART_SetConfig+0x294>
 800309e:	a201      	add	r2, pc, #4	@ (adr r2, 80030a4 <UART_SetConfig+0x228>)
 80030a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a4:	080030c9 	.word	0x080030c9
 80030a8:	080030d1 	.word	0x080030d1
 80030ac:	080030d9 	.word	0x080030d9
 80030b0:	08003111 	.word	0x08003111
 80030b4:	080030df 	.word	0x080030df
 80030b8:	08003111 	.word	0x08003111
 80030bc:	08003111 	.word	0x08003111
 80030c0:	08003111 	.word	0x08003111
 80030c4:	080030e7 	.word	0x080030e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030c8:	f7ff f80c 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80030cc:	61b8      	str	r0, [r7, #24]
        break;
 80030ce:	e024      	b.n	800311a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030d0:	f7ff f82a 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 80030d4:	61b8      	str	r0, [r7, #24]
        break;
 80030d6:	e020      	b.n	800311a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030d8:	4b0c      	ldr	r3, [pc, #48]	@ (800310c <UART_SetConfig+0x290>)
 80030da:	61bb      	str	r3, [r7, #24]
        break;
 80030dc:	e01d      	b.n	800311a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030de:	f7fe ffa1 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 80030e2:	61b8      	str	r0, [r7, #24]
        break;
 80030e4:	e019      	b.n	800311a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ea:	61bb      	str	r3, [r7, #24]
        break;
 80030ec:	e015      	b.n	800311a <UART_SetConfig+0x29e>
 80030ee:	bf00      	nop
 80030f0:	efff69f3 	.word	0xefff69f3
 80030f4:	40013800 	.word	0x40013800
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40004400 	.word	0x40004400
 8003100:	40004800 	.word	0x40004800
 8003104:	40004c00 	.word	0x40004c00
 8003108:	40005000 	.word	0x40005000
 800310c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	77bb      	strb	r3, [r7, #30]
        break;
 8003118:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d073      	beq.n	8003208 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	005a      	lsls	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	441a      	add	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b0f      	cmp	r3, #15
 800313a:	d916      	bls.n	800316a <UART_SetConfig+0x2ee>
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003142:	d212      	bcs.n	800316a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	b29b      	uxth	r3, r3
 8003148:	f023 030f 	bic.w	r3, r3, #15
 800314c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	b29b      	uxth	r3, r3
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	b29a      	uxth	r2, r3
 800315a:	89fb      	ldrh	r3, [r7, #14]
 800315c:	4313      	orrs	r3, r2
 800315e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	89fa      	ldrh	r2, [r7, #14]
 8003166:	60da      	str	r2, [r3, #12]
 8003168:	e04e      	b.n	8003208 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	77bb      	strb	r3, [r7, #30]
 800316e:	e04b      	b.n	8003208 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003170:	7ffb      	ldrb	r3, [r7, #31]
 8003172:	2b08      	cmp	r3, #8
 8003174:	d827      	bhi.n	80031c6 <UART_SetConfig+0x34a>
 8003176:	a201      	add	r2, pc, #4	@ (adr r2, 800317c <UART_SetConfig+0x300>)
 8003178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317c:	080031a1 	.word	0x080031a1
 8003180:	080031a9 	.word	0x080031a9
 8003184:	080031b1 	.word	0x080031b1
 8003188:	080031c7 	.word	0x080031c7
 800318c:	080031b7 	.word	0x080031b7
 8003190:	080031c7 	.word	0x080031c7
 8003194:	080031c7 	.word	0x080031c7
 8003198:	080031c7 	.word	0x080031c7
 800319c:	080031bf 	.word	0x080031bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a0:	f7fe ffa0 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80031a4:	61b8      	str	r0, [r7, #24]
        break;
 80031a6:	e013      	b.n	80031d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031a8:	f7fe ffbe 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 80031ac:	61b8      	str	r0, [r7, #24]
        break;
 80031ae:	e00f      	b.n	80031d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003220 <UART_SetConfig+0x3a4>)
 80031b2:	61bb      	str	r3, [r7, #24]
        break;
 80031b4:	e00c      	b.n	80031d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031b6:	f7fe ff35 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 80031ba:	61b8      	str	r0, [r7, #24]
        break;
 80031bc:	e008      	b.n	80031d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031c2:	61bb      	str	r3, [r7, #24]
        break;
 80031c4:	e004      	b.n	80031d0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	77bb      	strb	r3, [r7, #30]
        break;
 80031ce:	bf00      	nop
    }

    if (pclk != 0U)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d018      	beq.n	8003208 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	085a      	lsrs	r2, r3, #1
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	441a      	add	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b0f      	cmp	r3, #15
 80031ee:	d909      	bls.n	8003204 <UART_SetConfig+0x388>
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f6:	d205      	bcs.n	8003204 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	e001      	b.n	8003208 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003214:	7fbb      	ldrb	r3, [r7, #30]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3720      	adds	r7, #32
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	007a1200 	.word	0x007a1200

08003224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01a      	beq.n	800333a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003322:	d10a      	bne.n	800333a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	605a      	str	r2, [r3, #4]
  }
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b098      	sub	sp, #96	@ 0x60
 800336c:	af02      	add	r7, sp, #8
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003378:	f7fd f9e8 	bl	800074c <HAL_GetTick>
 800337c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b08      	cmp	r3, #8
 800338a:	d12e      	bne.n	80033ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800338c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003394:	2200      	movs	r2, #0
 8003396:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f88c 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d021      	beq.n	80033ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ae:	e853 3f00 	ldrex	r3, [r3]
 80033b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033cc:	e841 2300 	strex	r3, r2, [r1]
 80033d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e6      	bne.n	80033a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e062      	b.n	80034b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d149      	bne.n	800348c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003400:	2200      	movs	r2, #0
 8003402:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f856 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d03c      	beq.n	800348c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	623b      	str	r3, [r7, #32]
   return(result);
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003430:	633b      	str	r3, [r7, #48]	@ 0x30
 8003432:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003434:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003438:	e841 2300 	strex	r3, r2, [r1]
 800343c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800343e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e6      	bne.n	8003412 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3308      	adds	r3, #8
 800344a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	e853 3f00 	ldrex	r3, [r3]
 8003452:	60fb      	str	r3, [r7, #12]
   return(result);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3308      	adds	r3, #8
 8003462:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003464:	61fa      	str	r2, [r7, #28]
 8003466:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	69b9      	ldr	r1, [r7, #24]
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	617b      	str	r3, [r7, #20]
   return(result);
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e5      	bne.n	8003444 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e011      	b.n	80034b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3758      	adds	r7, #88	@ 0x58
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c8:	e04f      	b.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d04b      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d2:	f7fd f93b 	bl	800074c <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d302      	bcc.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e04e      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d037      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b80      	cmp	r3, #128	@ 0x80
 80034fe:	d034      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b40      	cmp	r3, #64	@ 0x40
 8003504:	d031      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b08      	cmp	r3, #8
 8003512:	d110      	bne.n	8003536 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2208      	movs	r2, #8
 800351a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f838 	bl	8003592 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2208      	movs	r2, #8
 8003526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e029      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003540:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003544:	d111      	bne.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800354e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f81e 	bl	8003592 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e00f      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	429a      	cmp	r2, r3
 8003586:	d0a0      	beq.n	80034ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003592:	b480      	push	{r7}
 8003594:	b095      	sub	sp, #84	@ 0x54
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a2:	e853 3f00 	ldrex	r3, [r3]
 80035a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80035ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035c0:	e841 2300 	strex	r3, r2, [r1]
 80035c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e6      	bne.n	800359a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3308      	adds	r3, #8
 80035d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	e853 3f00 	ldrex	r3, [r3]
 80035da:	61fb      	str	r3, [r7, #28]
   return(result);
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3308      	adds	r3, #8
 80035ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e5      	bne.n	80035cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003604:	2b01      	cmp	r3, #1
 8003606:	d118      	bne.n	800363a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	e853 3f00 	ldrex	r3, [r3]
 8003614:	60bb      	str	r3, [r7, #8]
   return(result);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f023 0310 	bic.w	r3, r3, #16
 800361c:	647b      	str	r3, [r7, #68]	@ 0x44
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	6979      	ldr	r1, [r7, #20]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	613b      	str	r3, [r7, #16]
   return(result);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e6      	bne.n	8003608 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800364e:	bf00      	nop
 8003650:	3754      	adds	r7, #84	@ 0x54
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <memset>:
 800365a:	4402      	add	r2, r0
 800365c:	4603      	mov	r3, r0
 800365e:	4293      	cmp	r3, r2
 8003660:	d100      	bne.n	8003664 <memset+0xa>
 8003662:	4770      	bx	lr
 8003664:	f803 1b01 	strb.w	r1, [r3], #1
 8003668:	e7f9      	b.n	800365e <memset+0x4>
	...

0800366c <__libc_init_array>:
 800366c:	b570      	push	{r4, r5, r6, lr}
 800366e:	4d0d      	ldr	r5, [pc, #52]	@ (80036a4 <__libc_init_array+0x38>)
 8003670:	4c0d      	ldr	r4, [pc, #52]	@ (80036a8 <__libc_init_array+0x3c>)
 8003672:	1b64      	subs	r4, r4, r5
 8003674:	10a4      	asrs	r4, r4, #2
 8003676:	2600      	movs	r6, #0
 8003678:	42a6      	cmp	r6, r4
 800367a:	d109      	bne.n	8003690 <__libc_init_array+0x24>
 800367c:	4d0b      	ldr	r5, [pc, #44]	@ (80036ac <__libc_init_array+0x40>)
 800367e:	4c0c      	ldr	r4, [pc, #48]	@ (80036b0 <__libc_init_array+0x44>)
 8003680:	f000 f818 	bl	80036b4 <_init>
 8003684:	1b64      	subs	r4, r4, r5
 8003686:	10a4      	asrs	r4, r4, #2
 8003688:	2600      	movs	r6, #0
 800368a:	42a6      	cmp	r6, r4
 800368c:	d105      	bne.n	800369a <__libc_init_array+0x2e>
 800368e:	bd70      	pop	{r4, r5, r6, pc}
 8003690:	f855 3b04 	ldr.w	r3, [r5], #4
 8003694:	4798      	blx	r3
 8003696:	3601      	adds	r6, #1
 8003698:	e7ee      	b.n	8003678 <__libc_init_array+0xc>
 800369a:	f855 3b04 	ldr.w	r3, [r5], #4
 800369e:	4798      	blx	r3
 80036a0:	3601      	adds	r6, #1
 80036a2:	e7f2      	b.n	800368a <__libc_init_array+0x1e>
 80036a4:	08003704 	.word	0x08003704
 80036a8:	08003704 	.word	0x08003704
 80036ac:	08003704 	.word	0x08003704
 80036b0:	08003708 	.word	0x08003708

080036b4 <_init>:
 80036b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b6:	bf00      	nop
 80036b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ba:	bc08      	pop	{r3}
 80036bc:	469e      	mov	lr, r3
 80036be:	4770      	bx	lr

080036c0 <_fini>:
 80036c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c2:	bf00      	nop
 80036c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036c6:	bc08      	pop	{r3}
 80036c8:	469e      	mov	lr, r3
 80036ca:	4770      	bx	lr
