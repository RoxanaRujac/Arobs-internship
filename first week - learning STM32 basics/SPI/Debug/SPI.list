
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002abc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002c50  08002c50  00003c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c80  08002c80  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002c80  08002c80  00004010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002c80  08002c80  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c80  08002c80  00003c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c84  08002c84  00003c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002c88  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004010  2**0
                  CONTENTS
 10 .bss          000000c8  20000010  20000010  00004010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  00004010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006e95  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000156c  00000000  00000000  0000aed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000680  00000000  00000000  0000c448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004d7  00000000  00000000  0000cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e9f7  00000000  00000000  0000cf9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000852e  00000000  00000000  0002b996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9826  00000000  00000000  00033ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ed6ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000192c  00000000  00000000  000ed730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000ef05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002c38 	.word	0x08002c38

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08002c38 	.word	0x08002c38

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f9ee 	bl	80005b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f816 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8b4 	bl	800034c <MX_GPIO_Init>
  MX_DMA_Init();
 80001e4:	f000 f894 	bl	8000310 <MX_DMA_Init>
  MX_SPI1_Init();
 80001e8:	f000 f854 	bl	8000294 <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_SPI_Transmit(&hspi1, TX_Buffer, 1, 1000); //Sending in Blocking mode
 80001ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001f0:	2201      	movs	r2, #1
 80001f2:	4904      	ldr	r1, [pc, #16]	@ (8000204 <main+0x30>)
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <main+0x34>)
 80001f6:	f002 f8fa 	bl	80023ee <HAL_SPI_Transmit>
	  HAL_Delay(100);
 80001fa:	2064      	movs	r0, #100	@ 0x64
 80001fc:	f000 fa42 	bl	8000684 <HAL_Delay>
	  HAL_SPI_Transmit(&hspi1, TX_Buffer, 1, 1000); //Sending in Blocking mode
 8000200:	bf00      	nop
 8000202:	e7f3      	b.n	80001ec <main+0x18>
 8000204:	20000000 	.word	0x20000000
 8000208:	2000002c 	.word	0x2000002c

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	@ 0x40
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	@ 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f002 fce0 	bl	8002be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800023e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000242:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000244:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000248:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fe3a 	bl	8000ecc <HAL_RCC_OscConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800025e:	f000 f88d 	bl	800037c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000262:	230f      	movs	r3, #15
 8000264:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000266:	2302      	movs	r3, #2
 8000268:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000272:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2102      	movs	r1, #2
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fe49 	bl	8001f14 <HAL_RCC_ClockConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000288:	f000 f878 	bl	800037c <Error_Handler>
  }
}
 800028c:	bf00      	nop
 800028e:	3740      	adds	r7, #64	@ 0x40
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000298:	4b1b      	ldr	r3, [pc, #108]	@ (8000308 <MX_SPI1_Init+0x74>)
 800029a:	4a1c      	ldr	r2, [pc, #112]	@ (800030c <MX_SPI1_Init+0x78>)
 800029c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800029e:	4b1a      	ldr	r3, [pc, #104]	@ (8000308 <MX_SPI1_Init+0x74>)
 80002a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80002a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002a6:	4b18      	ldr	r3, [pc, #96]	@ (8000308 <MX_SPI1_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80002ac:	4b16      	ldr	r3, [pc, #88]	@ (8000308 <MX_SPI1_Init+0x74>)
 80002ae:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80002b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002b4:	4b14      	ldr	r3, [pc, #80]	@ (8000308 <MX_SPI1_Init+0x74>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002ba:	4b13      	ldr	r3, [pc, #76]	@ (8000308 <MX_SPI1_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002c0:	4b11      	ldr	r3, [pc, #68]	@ (8000308 <MX_SPI1_Init+0x74>)
 80002c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000308 <MX_SPI1_Init+0x74>)
 80002ca:	2208      	movs	r2, #8
 80002cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000308 <MX_SPI1_Init+0x74>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <MX_SPI1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002da:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <MX_SPI1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80002e0:	4b09      	ldr	r3, [pc, #36]	@ (8000308 <MX_SPI1_Init+0x74>)
 80002e2:	2207      	movs	r2, #7
 80002e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002e6:	4b08      	ldr	r3, [pc, #32]	@ (8000308 <MX_SPI1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80002ec:	4b06      	ldr	r3, [pc, #24]	@ (8000308 <MX_SPI1_Init+0x74>)
 80002ee:	2208      	movs	r2, #8
 80002f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002f2:	4805      	ldr	r0, [pc, #20]	@ (8000308 <MX_SPI1_Init+0x74>)
 80002f4:	f001 ffd0 	bl	8002298 <HAL_SPI_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80002fe:	f000 f83d 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	2000002c 	.word	0x2000002c
 800030c:	40013000 	.word	0x40013000

08000310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000316:	4b0c      	ldr	r3, [pc, #48]	@ (8000348 <MX_DMA_Init+0x38>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	4a0b      	ldr	r2, [pc, #44]	@ (8000348 <MX_DMA_Init+0x38>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6153      	str	r3, [r2, #20]
 8000322:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <MX_DMA_Init+0x38>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	200d      	movs	r0, #13
 8000334:	f000 faa5 	bl	8000882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000338:	200d      	movs	r0, #13
 800033a:	f000 fabe 	bl	80008ba <HAL_NVIC_EnableIRQ>

}
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000352:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <MX_GPIO_Init+0x2c>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a08      	ldr	r2, [pc, #32]	@ (8000378 <MX_GPIO_Init+0x2c>)
 8000358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800035c:	6153      	str	r3, [r2, #20]
 800035e:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <MX_GPIO_Init+0x2c>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000380:	b672      	cpsid	i
}
 8000382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <Error_Handler+0x8>

08000388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800038e:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <HAL_MspInit+0x44>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a0e      	ldr	r2, [pc, #56]	@ (80003cc <HAL_MspInit+0x44>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <HAL_MspInit+0x44>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a6:	4b09      	ldr	r3, [pc, #36]	@ (80003cc <HAL_MspInit+0x44>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	4a08      	ldr	r2, [pc, #32]	@ (80003cc <HAL_MspInit+0x44>)
 80003ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003b0:	61d3      	str	r3, [r2, #28]
 80003b2:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <HAL_MspInit+0x44>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80003be:	2007      	movs	r0, #7
 80003c0:	f000 fa54 	bl	800086c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40021000 	.word	0x40021000

080003d0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b08a      	sub	sp, #40	@ 0x28
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d8:	f107 0314 	add.w	r3, r7, #20
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a2e      	ldr	r2, [pc, #184]	@ (80004a8 <HAL_SPI_MspInit+0xd8>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d156      	bne.n	80004a0 <HAL_SPI_MspInit+0xd0>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003f2:	4b2e      	ldr	r3, [pc, #184]	@ (80004ac <HAL_SPI_MspInit+0xdc>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a2d      	ldr	r2, [pc, #180]	@ (80004ac <HAL_SPI_MspInit+0xdc>)
 80003f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003fc:	6193      	str	r3, [r2, #24]
 80003fe:	4b2b      	ldr	r3, [pc, #172]	@ (80004ac <HAL_SPI_MspInit+0xdc>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000406:	613b      	str	r3, [r7, #16]
 8000408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800040a:	4b28      	ldr	r3, [pc, #160]	@ (80004ac <HAL_SPI_MspInit+0xdc>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a27      	ldr	r2, [pc, #156]	@ (80004ac <HAL_SPI_MspInit+0xdc>)
 8000410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b25      	ldr	r3, [pc, #148]	@ (80004ac <HAL_SPI_MspInit+0xdc>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000422:	23e0      	movs	r3, #224	@ 0xe0
 8000424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000426:	2302      	movs	r3, #2
 8000428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800042e:	2303      	movs	r3, #3
 8000430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000432:	2305      	movs	r3, #5
 8000434:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	4619      	mov	r1, r3
 800043c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000440:	f000 fbba 	bl	8000bb8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000444:	4b1a      	ldr	r3, [pc, #104]	@ (80004b0 <HAL_SPI_MspInit+0xe0>)
 8000446:	4a1b      	ldr	r2, [pc, #108]	@ (80004b4 <HAL_SPI_MspInit+0xe4>)
 8000448:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800044a:	4b19      	ldr	r3, [pc, #100]	@ (80004b0 <HAL_SPI_MspInit+0xe0>)
 800044c:	2210      	movs	r2, #16
 800044e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000450:	4b17      	ldr	r3, [pc, #92]	@ (80004b0 <HAL_SPI_MspInit+0xe0>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000456:	4b16      	ldr	r3, [pc, #88]	@ (80004b0 <HAL_SPI_MspInit+0xe0>)
 8000458:	2280      	movs	r2, #128	@ 0x80
 800045a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800045c:	4b14      	ldr	r3, [pc, #80]	@ (80004b0 <HAL_SPI_MspInit+0xe0>)
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000462:	4b13      	ldr	r3, [pc, #76]	@ (80004b0 <HAL_SPI_MspInit+0xe0>)
 8000464:	2200      	movs	r2, #0
 8000466:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000468:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <HAL_SPI_MspInit+0xe0>)
 800046a:	2200      	movs	r2, #0
 800046c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800046e:	4b10      	ldr	r3, [pc, #64]	@ (80004b0 <HAL_SPI_MspInit+0xe0>)
 8000470:	2200      	movs	r2, #0
 8000472:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000474:	480e      	ldr	r0, [pc, #56]	@ (80004b0 <HAL_SPI_MspInit+0xe0>)
 8000476:	f000 fa3a 	bl	80008ee <HAL_DMA_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8000480:	f7ff ff7c 	bl	800037c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a0a      	ldr	r2, [pc, #40]	@ (80004b0 <HAL_SPI_MspInit+0xe0>)
 8000488:	655a      	str	r2, [r3, #84]	@ 0x54
 800048a:	4a09      	ldr	r2, [pc, #36]	@ (80004b0 <HAL_SPI_MspInit+0xe0>)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000490:	2200      	movs	r2, #0
 8000492:	2100      	movs	r1, #0
 8000494:	2023      	movs	r0, #35	@ 0x23
 8000496:	f000 f9f4 	bl	8000882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800049a:	2023      	movs	r0, #35	@ 0x23
 800049c:	f000 fa0d 	bl	80008ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80004a0:	bf00      	nop
 80004a2:	3728      	adds	r7, #40	@ 0x28
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40013000 	.word	0x40013000
 80004ac:	40021000 	.word	0x40021000
 80004b0:	20000090 	.word	0x20000090
 80004b4:	40020030 	.word	0x40020030

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <NMI_Handler+0x4>

080004c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <HardFault_Handler+0x4>

080004c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <MemManage_Handler+0x4>

080004d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <BusFault_Handler+0x4>

080004d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <UsageFault_Handler+0x4>

080004e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050e:	f000 f899 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800051c:	4802      	ldr	r0, [pc, #8]	@ (8000528 <DMA1_Channel3_IRQHandler+0x10>)
 800051e:	f000 fa6b 	bl	80009f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000090 	.word	0x20000090

0800052c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000530:	4802      	ldr	r0, [pc, #8]	@ (800053c <SPI1_IRQHandler+0x10>)
 8000532:	f002 f8d1 	bl	80026d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	2000002c 	.word	0x2000002c

08000540 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <SystemInit+0x20>)
 8000546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800054a:	4a05      	ldr	r2, [pc, #20]	@ (8000560 <SystemInit+0x20>)
 800054c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000550:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000564:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800059c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000568:	f7ff ffea 	bl	8000540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800056c:	480c      	ldr	r0, [pc, #48]	@ (80005a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800056e:	490d      	ldr	r1, [pc, #52]	@ (80005a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000570:	4a0d      	ldr	r2, [pc, #52]	@ (80005a8 <LoopForever+0xe>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800057c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000582:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000584:	4c0a      	ldr	r4, [pc, #40]	@ (80005b0 <LoopForever+0x16>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000592:	f002 fb2d 	bl	8002bf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000596:	f7ff fe1d 	bl	80001d4 <main>

0800059a <LoopForever>:

LoopForever:
    b LoopForever
 800059a:	e7fe      	b.n	800059a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800059c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80005a8:	08002c88 	.word	0x08002c88
  ldr r2, =_sbss
 80005ac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80005b0:	200000d8 	.word	0x200000d8

080005b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005b4:	e7fe      	b.n	80005b4 <ADC1_2_IRQHandler>
	...

080005b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <HAL_Init+0x28>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a07      	ldr	r2, [pc, #28]	@ (80005e0 <HAL_Init+0x28>)
 80005c2:	f043 0310 	orr.w	r3, r3, #16
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f94f 	bl	800086c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f808 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f7ff fed8 	bl	8000388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40022000 	.word	0x40022000

080005e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f967 	bl	80008d6 <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f92f 	bl	8000882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	@ (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000004 	.word	0x20000004
 800063c:	2000000c 	.word	0x2000000c
 8000640:	20000008 	.word	0x20000008

08000644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	@ (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	2000000c 	.word	0x2000000c
 8000668:	200000d4 	.word	0x200000d4

0800066c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000670:	4b03      	ldr	r3, [pc, #12]	@ (8000680 <HAL_GetTick+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	200000d4 	.word	0x200000d4

08000684 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800069c:	d005      	beq.n	80006aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800069e:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <HAL_Delay+0x44>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4413      	add	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006aa:	bf00      	nop
 80006ac:	f7ff ffde 	bl	800066c <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d8f7      	bhi.n	80006ac <HAL_Delay+0x28>
  {
  }
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2000000c 	.word	0x2000000c

080006cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fe:	4a04      	ldr	r2, [pc, #16]	@ (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	60d3      	str	r3, [r2, #12]
}
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000718:	4b04      	ldr	r3, [pc, #16]	@ (800072c <__NVIC_GetPriorityGrouping+0x18>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	0a1b      	lsrs	r3, r3, #8
 800071e:	f003 0307 	and.w	r3, r3, #7
}
 8000722:	4618      	mov	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	2b00      	cmp	r3, #0
 8000740:	db0b      	blt.n	800075a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	f003 021f 	and.w	r2, r3, #31
 8000748:	4907      	ldr	r1, [pc, #28]	@ (8000768 <__NVIC_EnableIRQ+0x38>)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	095b      	lsrs	r3, r3, #5
 8000750:	2001      	movs	r0, #1
 8000752:	fa00 f202 	lsl.w	r2, r0, r2
 8000756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000e100 	.word	0xe000e100

0800076c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	db0a      	blt.n	8000796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	b2da      	uxtb	r2, r3
 8000784:	490c      	ldr	r1, [pc, #48]	@ (80007b8 <__NVIC_SetPriority+0x4c>)
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	0112      	lsls	r2, r2, #4
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	440b      	add	r3, r1
 8000790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000794:	e00a      	b.n	80007ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4908      	ldr	r1, [pc, #32]	@ (80007bc <__NVIC_SetPriority+0x50>)
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	3b04      	subs	r3, #4
 80007a4:	0112      	lsls	r2, r2, #4
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	440b      	add	r3, r1
 80007aa:	761a      	strb	r2, [r3, #24]
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000e100 	.word	0xe000e100
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b089      	sub	sp, #36	@ 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	f1c3 0307 	rsb	r3, r3, #7
 80007da:	2b04      	cmp	r3, #4
 80007dc:	bf28      	it	cs
 80007de:	2304      	movcs	r3, #4
 80007e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3304      	adds	r3, #4
 80007e6:	2b06      	cmp	r3, #6
 80007e8:	d902      	bls.n	80007f0 <NVIC_EncodePriority+0x30>
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3b03      	subs	r3, #3
 80007ee:	e000      	b.n	80007f2 <NVIC_EncodePriority+0x32>
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	f04f 32ff 	mov.w	r2, #4294967295
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	43da      	mvns	r2, r3
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	401a      	ands	r2, r3
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000808:	f04f 31ff 	mov.w	r1, #4294967295
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	43d9      	mvns	r1, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000818:	4313      	orrs	r3, r2
         );
}
 800081a:	4618      	mov	r0, r3
 800081c:	3724      	adds	r7, #36	@ 0x24
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000838:	d301      	bcc.n	800083e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083a:	2301      	movs	r3, #1
 800083c:	e00f      	b.n	800085e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083e:	4a0a      	ldr	r2, [pc, #40]	@ (8000868 <SysTick_Config+0x40>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000846:	210f      	movs	r1, #15
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f7ff ff8e 	bl	800076c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000850:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <SysTick_Config+0x40>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000856:	4b04      	ldr	r3, [pc, #16]	@ (8000868 <SysTick_Config+0x40>)
 8000858:	2207      	movs	r2, #7
 800085a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	e000e010 	.word	0xe000e010

0800086c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ff29 	bl	80006cc <__NVIC_SetPriorityGrouping>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b086      	sub	sp, #24
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
 800088e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000894:	f7ff ff3e 	bl	8000714 <__NVIC_GetPriorityGrouping>
 8000898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	68b9      	ldr	r1, [r7, #8]
 800089e:	6978      	ldr	r0, [r7, #20]
 80008a0:	f7ff ff8e 	bl	80007c0 <NVIC_EncodePriority>
 80008a4:	4602      	mov	r2, r0
 80008a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff5d 	bl	800076c <__NVIC_SetPriority>
}
 80008b2:	bf00      	nop
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff31 	bl	8000730 <__NVIC_EnableIRQ>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff ffa2 	bl	8000828 <SysTick_Config>
 80008e4:	4603      	mov	r3, r0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b084      	sub	sp, #16
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000900:	2301      	movs	r3, #1
 8000902:	e037      	b.n	8000974 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2202      	movs	r2, #2
 8000908:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800091a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800091e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000928:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000934:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000940:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	4313      	orrs	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 f8f2 	bl	8000b40 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2201      	movs	r2, #1
 8000966:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000984:	2300      	movs	r3, #0
 8000986:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800098e:	2b02      	cmp	r3, #2
 8000990:	d005      	beq.n	800099e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2204      	movs	r2, #4
 8000996:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	e027      	b.n	80009ee <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f022 020e 	bic.w	r2, r2, #14
 80009ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f022 0201 	bic.w	r2, r2, #1
 80009bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009c6:	2101      	movs	r1, #1
 80009c8:	fa01 f202 	lsl.w	r2, r1, r2
 80009cc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	4798      	blx	r3
    }
  }
  return status;
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a14:	2204      	movs	r2, #4
 8000a16:	409a      	lsls	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d024      	beq.n	8000a6a <HAL_DMA_IRQHandler+0x72>
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d01f      	beq.n	8000a6a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f003 0320 	and.w	r3, r3, #32
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d107      	bne.n	8000a48 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f022 0204 	bic.w	r2, r2, #4
 8000a46:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a50:	2104      	movs	r1, #4
 8000a52:	fa01 f202 	lsl.w	r2, r1, r2
 8000a56:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d06a      	beq.n	8000b36 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000a68:	e065      	b.n	8000b36 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	2202      	movs	r2, #2
 8000a70:	409a      	lsls	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4013      	ands	r3, r2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d02c      	beq.n	8000ad4 <HAL_DMA_IRQHandler+0xdc>
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d027      	beq.n	8000ad4 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f003 0320 	and.w	r3, r3, #32
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10b      	bne.n	8000aaa <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f022 020a 	bic.w	r2, r2, #10
 8000aa0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d035      	beq.n	8000b36 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000ad2:	e030      	b.n	8000b36 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad8:	2208      	movs	r2, #8
 8000ada:	409a      	lsls	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d028      	beq.n	8000b36 <HAL_DMA_IRQHandler+0x13e>
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	f003 0308 	and.w	r3, r3, #8
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d023      	beq.n	8000b36 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f022 020e 	bic.w	r2, r2, #14
 8000afc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b06:	2101      	movs	r1, #1
 8000b08:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2201      	movs	r2, #1
 8000b12:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2201      	movs	r2, #1
 8000b18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d004      	beq.n	8000b36 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	4798      	blx	r3
    }
  }
}
 8000b34:	e7ff      	b.n	8000b36 <HAL_DMA_IRQHandler+0x13e>
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <DMA_CalcBaseAndBitshift+0x60>)
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d80f      	bhi.n	8000b74 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <DMA_CalcBaseAndBitshift+0x64>)
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ba8 <DMA_CalcBaseAndBitshift+0x68>)
 8000b60:	fba2 2303 	umull	r2, r3, r2, r3
 8000b64:	091b      	lsrs	r3, r3, #4
 8000b66:	009a      	lsls	r2, r3, #2
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bac <DMA_CalcBaseAndBitshift+0x6c>)
 8000b70:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000b72:	e00e      	b.n	8000b92 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <DMA_CalcBaseAndBitshift+0x70>)
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <DMA_CalcBaseAndBitshift+0x68>)
 8000b80:	fba2 2303 	umull	r2, r3, r2, r3
 8000b84:	091b      	lsrs	r3, r3, #4
 8000b86:	009a      	lsls	r2, r3, #2
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a09      	ldr	r2, [pc, #36]	@ (8000bb4 <DMA_CalcBaseAndBitshift+0x74>)
 8000b90:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40020407 	.word	0x40020407
 8000ba4:	bffdfff8 	.word	0xbffdfff8
 8000ba8:	cccccccd 	.word	0xcccccccd
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	bffdfbf8 	.word	0xbffdfbf8
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc6:	e160      	b.n	8000e8a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 8152 	beq.w	8000e84 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d005      	beq.n	8000bf8 <HAL_GPIO_Init+0x40>
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d130      	bne.n	8000c5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2203      	movs	r2, #3
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c2e:	2201      	movs	r2, #1
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	091b      	lsrs	r3, r3, #4
 8000c44:	f003 0201 	and.w	r2, r3, #1
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d017      	beq.n	8000c96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d123      	bne.n	8000cea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	08da      	lsrs	r2, r3, #3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3208      	adds	r2, #8
 8000caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	220f      	movs	r2, #15
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	691a      	ldr	r2, [r3, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	6939      	ldr	r1, [r7, #16]
 8000ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0203 	and.w	r2, r3, #3
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 80ac 	beq.w	8000e84 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2c:	4b5e      	ldr	r3, [pc, #376]	@ (8000ea8 <HAL_GPIO_Init+0x2f0>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a5d      	ldr	r2, [pc, #372]	@ (8000ea8 <HAL_GPIO_Init+0x2f0>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b5b      	ldr	r3, [pc, #364]	@ (8000ea8 <HAL_GPIO_Init+0x2f0>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d44:	4a59      	ldr	r2, [pc, #356]	@ (8000eac <HAL_GPIO_Init+0x2f4>)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d6e:	d025      	beq.n	8000dbc <HAL_GPIO_Init+0x204>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a4f      	ldr	r2, [pc, #316]	@ (8000eb0 <HAL_GPIO_Init+0x2f8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d01f      	beq.n	8000db8 <HAL_GPIO_Init+0x200>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a4e      	ldr	r2, [pc, #312]	@ (8000eb4 <HAL_GPIO_Init+0x2fc>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d019      	beq.n	8000db4 <HAL_GPIO_Init+0x1fc>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a4d      	ldr	r2, [pc, #308]	@ (8000eb8 <HAL_GPIO_Init+0x300>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d013      	beq.n	8000db0 <HAL_GPIO_Init+0x1f8>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a4c      	ldr	r2, [pc, #304]	@ (8000ebc <HAL_GPIO_Init+0x304>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d00d      	beq.n	8000dac <HAL_GPIO_Init+0x1f4>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a4b      	ldr	r2, [pc, #300]	@ (8000ec0 <HAL_GPIO_Init+0x308>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d007      	beq.n	8000da8 <HAL_GPIO_Init+0x1f0>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a4a      	ldr	r2, [pc, #296]	@ (8000ec4 <HAL_GPIO_Init+0x30c>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d101      	bne.n	8000da4 <HAL_GPIO_Init+0x1ec>
 8000da0:	2306      	movs	r3, #6
 8000da2:	e00c      	b.n	8000dbe <HAL_GPIO_Init+0x206>
 8000da4:	2307      	movs	r3, #7
 8000da6:	e00a      	b.n	8000dbe <HAL_GPIO_Init+0x206>
 8000da8:	2305      	movs	r3, #5
 8000daa:	e008      	b.n	8000dbe <HAL_GPIO_Init+0x206>
 8000dac:	2304      	movs	r3, #4
 8000dae:	e006      	b.n	8000dbe <HAL_GPIO_Init+0x206>
 8000db0:	2303      	movs	r3, #3
 8000db2:	e004      	b.n	8000dbe <HAL_GPIO_Init+0x206>
 8000db4:	2302      	movs	r3, #2
 8000db6:	e002      	b.n	8000dbe <HAL_GPIO_Init+0x206>
 8000db8:	2301      	movs	r3, #1
 8000dba:	e000      	b.n	8000dbe <HAL_GPIO_Init+0x206>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	f002 0203 	and.w	r2, r2, #3
 8000dc4:	0092      	lsls	r2, r2, #2
 8000dc6:	4093      	lsls	r3, r2
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dce:	4937      	ldr	r1, [pc, #220]	@ (8000eac <HAL_GPIO_Init+0x2f4>)
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ec8 <HAL_GPIO_Init+0x310>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e00:	4a31      	ldr	r2, [pc, #196]	@ (8000ec8 <HAL_GPIO_Init+0x310>)
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e06:	4b30      	ldr	r3, [pc, #192]	@ (8000ec8 <HAL_GPIO_Init+0x310>)
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e2a:	4a27      	ldr	r2, [pc, #156]	@ (8000ec8 <HAL_GPIO_Init+0x310>)
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e30:	4b25      	ldr	r3, [pc, #148]	@ (8000ec8 <HAL_GPIO_Init+0x310>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e54:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec8 <HAL_GPIO_Init+0x310>)
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <HAL_GPIO_Init+0x310>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ec8 <HAL_GPIO_Init+0x310>)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	3301      	adds	r3, #1
 8000e88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	fa22 f303 	lsr.w	r3, r2, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f47f ae97 	bne.w	8000bc8 <HAL_GPIO_Init+0x10>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	bf00      	nop
 8000e9e:	371c      	adds	r7, #28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	48000400 	.word	0x48000400
 8000eb4:	48000800 	.word	0x48000800
 8000eb8:	48000c00 	.word	0x48000c00
 8000ebc:	48001000 	.word	0x48001000
 8000ec0:	48001400 	.word	0x48001400
 8000ec4:	48001800 	.word	0x48001800
 8000ec8:	40010400 	.word	0x40010400

08000ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ed8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000edc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ee2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	f001 b80a 	b.w	8001f06 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ef6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 8161 	beq.w	80011ca <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f08:	4bae      	ldr	r3, [pc, #696]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 030c 	and.w	r3, r3, #12
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d00c      	beq.n	8000f2e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f14:	4bab      	ldr	r3, [pc, #684]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d157      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x104>
 8000f20:	4ba8      	ldr	r3, [pc, #672]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f2c:	d150      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x104>
 8000f2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f32:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000f3a:	fa93 f3a3 	rbit	r3, r3
 8000f3e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f42:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f46:	fab3 f383 	clz	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f4e:	d802      	bhi.n	8000f56 <HAL_RCC_OscConfig+0x8a>
 8000f50:	4b9c      	ldr	r3, [pc, #624]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	e015      	b.n	8000f82 <HAL_RCC_OscConfig+0xb6>
 8000f56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f5a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000f62:	fa93 f3a3 	rbit	r3, r3
 8000f66:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000f6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f6e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000f72:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000f76:	fa93 f3a3 	rbit	r3, r3
 8000f7a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000f7e:	4b91      	ldr	r3, [pc, #580]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f86:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000f8a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000f8e:	fa92 f2a2 	rbit	r2, r2
 8000f92:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000f96:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000f9a:	fab2 f282 	clz	r2, r2
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	f042 0220 	orr.w	r2, r2, #32
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	f002 021f 	and.w	r2, r2, #31
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8108 	beq.w	80011c8 <HAL_RCC_OscConfig+0x2fc>
 8000fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fbc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f040 80ff 	bne.w	80011c8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f000 bf9b 	b.w	8001f06 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fd4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fe0:	d106      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x124>
 8000fe2:	4b78      	ldr	r3, [pc, #480]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a77      	ldr	r2, [pc, #476]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e036      	b.n	800105e <HAL_RCC_OscConfig+0x192>
 8000ff0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ff4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10c      	bne.n	800101a <HAL_RCC_OscConfig+0x14e>
 8001000:	4b70      	ldr	r3, [pc, #448]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a6f      	ldr	r2, [pc, #444]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8001006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b6d      	ldr	r3, [pc, #436]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a6c      	ldr	r2, [pc, #432]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8001012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	e021      	b.n	800105e <HAL_RCC_OscConfig+0x192>
 800101a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800101e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800102a:	d10c      	bne.n	8001046 <HAL_RCC_OscConfig+0x17a>
 800102c:	4b65      	ldr	r3, [pc, #404]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a64      	ldr	r2, [pc, #400]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8001032:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b62      	ldr	r3, [pc, #392]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a61      	ldr	r2, [pc, #388]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 800103e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	e00b      	b.n	800105e <HAL_RCC_OscConfig+0x192>
 8001046:	4b5f      	ldr	r3, [pc, #380]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a5e      	ldr	r2, [pc, #376]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 800104c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b5c      	ldr	r3, [pc, #368]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a5b      	ldr	r2, [pc, #364]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 8001058:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800105c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800105e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001062:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d054      	beq.n	8001118 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106e:	f7ff fafd 	bl	800066c <HAL_GetTick>
 8001072:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001076:	e00a      	b.n	800108e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff faf8 	bl	800066c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b64      	cmp	r3, #100	@ 0x64
 8001086:	d902      	bls.n	800108e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	f000 bf3c 	b.w	8001f06 <HAL_RCC_OscConfig+0x103a>
 800108e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001092:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001096:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800109a:	fa93 f3a3 	rbit	r3, r3
 800109e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80010a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a6:	fab3 f383 	clz	r3, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80010ae:	d802      	bhi.n	80010b6 <HAL_RCC_OscConfig+0x1ea>
 80010b0:	4b44      	ldr	r3, [pc, #272]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	e015      	b.n	80010e2 <HAL_RCC_OscConfig+0x216>
 80010b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010ba:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80010ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010ce:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80010d2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80010de:	4b39      	ldr	r3, [pc, #228]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 80010e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010e6:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80010ea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80010ee:	fa92 f2a2 	rbit	r2, r2
 80010f2:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80010f6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80010fa:	fab2 f282 	clz	r2, r2
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	f042 0220 	orr.w	r2, r2, #32
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	f002 021f 	and.w	r2, r2, #31
 800110a:	2101      	movs	r1, #1
 800110c:	fa01 f202 	lsl.w	r2, r1, r2
 8001110:	4013      	ands	r3, r2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0b0      	beq.n	8001078 <HAL_RCC_OscConfig+0x1ac>
 8001116:	e058      	b.n	80011ca <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff faa8 	bl	800066c <HAL_GetTick>
 800111c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001120:	e00a      	b.n	8001138 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001122:	f7ff faa3 	bl	800066c <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b64      	cmp	r3, #100	@ 0x64
 8001130:	d902      	bls.n	8001138 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	f000 bee7 	b.w	8001f06 <HAL_RCC_OscConfig+0x103a>
 8001138:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800113c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001140:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001144:	fa93 f3a3 	rbit	r3, r3
 8001148:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 800114c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b3f      	cmp	r3, #63	@ 0x3f
 8001158:	d802      	bhi.n	8001160 <HAL_RCC_OscConfig+0x294>
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	e015      	b.n	800118c <HAL_RCC_OscConfig+0x2c0>
 8001160:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001164:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001168:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800116c:	fa93 f3a3 	rbit	r3, r3
 8001170:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001174:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001178:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800117c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001180:	fa93 f3a3 	rbit	r3, r3
 8001184:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001188:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <HAL_RCC_OscConfig+0x2f8>)
 800118a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001190:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001194:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001198:	fa92 f2a2 	rbit	r2, r2
 800119c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80011a0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80011a4:	fab2 f282 	clz	r2, r2
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	f042 0220 	orr.w	r2, r2, #32
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	f002 021f 	and.w	r2, r2, #31
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1b0      	bne.n	8001122 <HAL_RCC_OscConfig+0x256>
 80011c0:	e003      	b.n	80011ca <HAL_RCC_OscConfig+0x2fe>
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 816d 	beq.w	80014ba <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011e0:	4bcd      	ldr	r3, [pc, #820]	@ (8001518 <HAL_RCC_OscConfig+0x64c>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 030c 	and.w	r3, r3, #12
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00c      	beq.n	8001206 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011ec:	4bca      	ldr	r3, [pc, #808]	@ (8001518 <HAL_RCC_OscConfig+0x64c>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d16e      	bne.n	80012d6 <HAL_RCC_OscConfig+0x40a>
 80011f8:	4bc7      	ldr	r3, [pc, #796]	@ (8001518 <HAL_RCC_OscConfig+0x64c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001204:	d167      	bne.n	80012d6 <HAL_RCC_OscConfig+0x40a>
 8001206:	2302      	movs	r3, #2
 8001208:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001210:	fa93 f3a3 	rbit	r3, r3
 8001214:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001218:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121c:	fab3 f383 	clz	r3, r3
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b3f      	cmp	r3, #63	@ 0x3f
 8001224:	d802      	bhi.n	800122c <HAL_RCC_OscConfig+0x360>
 8001226:	4bbc      	ldr	r3, [pc, #752]	@ (8001518 <HAL_RCC_OscConfig+0x64c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	e013      	b.n	8001254 <HAL_RCC_OscConfig+0x388>
 800122c:	2302      	movs	r3, #2
 800122e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001244:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001250:	4bb1      	ldr	r3, [pc, #708]	@ (8001518 <HAL_RCC_OscConfig+0x64c>)
 8001252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001254:	2202      	movs	r2, #2
 8001256:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800125a:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800125e:	fa92 f2a2 	rbit	r2, r2
 8001262:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001266:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800126a:	fab2 f282 	clz	r2, r2
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	f042 0220 	orr.w	r2, r2, #32
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	f002 021f 	and.w	r2, r2, #31
 800127a:	2101      	movs	r1, #1
 800127c:	fa01 f202 	lsl.w	r2, r1, r2
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00a      	beq.n	800129c <HAL_RCC_OscConfig+0x3d0>
 8001286:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800128a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d002      	beq.n	800129c <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	f000 be35 	b.w	8001f06 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129c:	4b9e      	ldr	r3, [pc, #632]	@ (8001518 <HAL_RCC_OscConfig+0x64c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	21f8      	movs	r1, #248	@ 0xf8
 80012b2:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b6:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80012ba:	fa91 f1a1 	rbit	r1, r1
 80012be:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80012c2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80012c6:	fab1 f181 	clz	r1, r1
 80012ca:	b2c9      	uxtb	r1, r1
 80012cc:	408b      	lsls	r3, r1
 80012ce:	4992      	ldr	r1, [pc, #584]	@ (8001518 <HAL_RCC_OscConfig+0x64c>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d4:	e0f1      	b.n	80014ba <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 8083 	beq.w	80013ee <HAL_RCC_OscConfig+0x522>
 80012e8:	2301      	movs	r3, #1
 80012ea:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80012fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fe:	fab3 f383 	clz	r3, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001308:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	461a      	mov	r2, r3
 8001310:	2301      	movs	r3, #1
 8001312:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff f9aa 	bl	800066c <HAL_GetTick>
 8001318:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	e00a      	b.n	8001334 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800131e:	f7ff f9a5 	bl	800066c <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d902      	bls.n	8001334 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	f000 bde9 	b.w	8001f06 <HAL_RCC_OscConfig+0x103a>
 8001334:	2302      	movs	r3, #2
 8001336:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800133e:	fa93 f3a3 	rbit	r3, r3
 8001342:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001346:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b3f      	cmp	r3, #63	@ 0x3f
 8001352:	d802      	bhi.n	800135a <HAL_RCC_OscConfig+0x48e>
 8001354:	4b70      	ldr	r3, [pc, #448]	@ (8001518 <HAL_RCC_OscConfig+0x64c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	e013      	b.n	8001382 <HAL_RCC_OscConfig+0x4b6>
 800135a:	2302      	movs	r3, #2
 800135c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001372:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001376:	fa93 f3a3 	rbit	r3, r3
 800137a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800137e:	4b66      	ldr	r3, [pc, #408]	@ (8001518 <HAL_RCC_OscConfig+0x64c>)
 8001380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001382:	2202      	movs	r2, #2
 8001384:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001388:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800138c:	fa92 f2a2 	rbit	r2, r2
 8001390:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001394:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001398:	fab2 f282 	clz	r2, r2
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	f042 0220 	orr.w	r2, r2, #32
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	f002 021f 	and.w	r2, r2, #31
 80013a8:	2101      	movs	r1, #1
 80013aa:	fa01 f202 	lsl.w	r2, r1, r2
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0b4      	beq.n	800131e <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b4:	4b58      	ldr	r3, [pc, #352]	@ (8001518 <HAL_RCC_OscConfig+0x64c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	21f8      	movs	r1, #248	@ 0xf8
 80013ca:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ce:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80013d2:	fa91 f1a1 	rbit	r1, r1
 80013d6:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80013da:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80013de:	fab1 f181 	clz	r1, r1
 80013e2:	b2c9      	uxtb	r1, r1
 80013e4:	408b      	lsls	r3, r1
 80013e6:	494c      	ldr	r1, [pc, #304]	@ (8001518 <HAL_RCC_OscConfig+0x64c>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
 80013ec:	e065      	b.n	80014ba <HAL_RCC_OscConfig+0x5ee>
 80013ee:	2301      	movs	r3, #1
 80013f0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80013f8:	fa93 f3a3 	rbit	r3, r3
 80013fc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001400:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001404:	fab3 f383 	clz	r3, r3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800140e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	461a      	mov	r2, r3
 8001416:	2300      	movs	r3, #0
 8001418:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff f927 	bl	800066c <HAL_GetTick>
 800141e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	e00a      	b.n	800143a <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001424:	f7ff f922 	bl	800066c <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d902      	bls.n	800143a <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	f000 bd66 	b.w	8001f06 <HAL_RCC_OscConfig+0x103a>
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001444:	fa93 f3a3 	rbit	r3, r3
 8001448:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800144c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001450:	fab3 f383 	clz	r3, r3
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b3f      	cmp	r3, #63	@ 0x3f
 8001458:	d802      	bhi.n	8001460 <HAL_RCC_OscConfig+0x594>
 800145a:	4b2f      	ldr	r3, [pc, #188]	@ (8001518 <HAL_RCC_OscConfig+0x64c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	e013      	b.n	8001488 <HAL_RCC_OscConfig+0x5bc>
 8001460:	2302      	movs	r3, #2
 8001462:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001466:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800146a:	fa93 f3a3 	rbit	r3, r3
 800146e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001472:	2302      	movs	r3, #2
 8001474:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001478:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800147c:	fa93 f3a3 	rbit	r3, r3
 8001480:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001484:	4b24      	ldr	r3, [pc, #144]	@ (8001518 <HAL_RCC_OscConfig+0x64c>)
 8001486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001488:	2202      	movs	r2, #2
 800148a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800148e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001492:	fa92 f2a2 	rbit	r2, r2
 8001496:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800149a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800149e:	fab2 f282 	clz	r2, r2
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	f042 0220 	orr.w	r2, r2, #32
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	f002 021f 	and.w	r2, r2, #31
 80014ae:	2101      	movs	r1, #1
 80014b0:	fa01 f202 	lsl.w	r2, r1, r2
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1b4      	bne.n	8001424 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8119 	beq.w	8001702 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 8082 	beq.w	80015e6 <HAL_RCC_OscConfig+0x71a>
 80014e2:	2301      	movs	r3, #1
 80014e4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014ec:	fa93 f3a3 	rbit	r3, r3
 80014f0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80014f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f8:	fab3 f383 	clz	r3, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_RCC_OscConfig+0x650>)
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	461a      	mov	r2, r3
 8001508:	2301      	movs	r3, #1
 800150a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150c:	f7ff f8ae 	bl	800066c <HAL_GetTick>
 8001510:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001514:	e00f      	b.n	8001536 <HAL_RCC_OscConfig+0x66a>
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000
 800151c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff f8a4 	bl	800066c <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d902      	bls.n	8001536 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	f000 bce8 	b.w	8001f06 <HAL_RCC_OscConfig+0x103a>
 8001536:	2302      	movs	r3, #2
 8001538:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001540:	fa93 f2a3 	rbit	r2, r3
 8001544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001548:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001552:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001556:	2202      	movs	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800155e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	fa93 f2a3 	rbit	r2, r3
 8001568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800156c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001576:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800157a:	2202      	movs	r2, #2
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001582:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	fa93 f2a3 	rbit	r2, r3
 800158c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001590:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001594:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001596:	4bb0      	ldr	r3, [pc, #704]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 8001598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800159a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800159e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015a2:	2102      	movs	r1, #2
 80015a4:	6019      	str	r1, [r3, #0]
 80015a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	fa93 f1a3 	rbit	r1, r3
 80015b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015b8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80015bc:	6019      	str	r1, [r3, #0]
  return result;
 80015be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015c2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	fab3 f383 	clz	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f003 031f 	and.w	r3, r3, #31
 80015d8:	2101      	movs	r1, #1
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d09d      	beq.n	8001520 <HAL_RCC_OscConfig+0x654>
 80015e4:	e08d      	b.n	8001702 <HAL_RCC_OscConfig+0x836>
 80015e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	fa93 f2a3 	rbit	r2, r3
 8001600:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001604:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001608:	601a      	str	r2, [r3, #0]
  return result;
 800160a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800160e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001612:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001614:	fab3 f383 	clz	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	461a      	mov	r2, r3
 800161c:	4b8f      	ldr	r3, [pc, #572]	@ (800185c <HAL_RCC_OscConfig+0x990>)
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	461a      	mov	r2, r3
 8001624:	2300      	movs	r3, #0
 8001626:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff f820 	bl	800066c <HAL_GetTick>
 800162c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001632:	f7ff f81b 	bl	800066c <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d902      	bls.n	8001648 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	f000 bc5f 	b.w	8001f06 <HAL_RCC_OscConfig+0x103a>
 8001648:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800164c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001650:	2202      	movs	r2, #2
 8001652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001658:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	fa93 f2a3 	rbit	r2, r3
 8001662:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001666:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001670:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001674:	2202      	movs	r2, #2
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800167c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	fa93 f2a3 	rbit	r2, r3
 8001686:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800168a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001694:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001698:	2202      	movs	r2, #2
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	fa93 f2a3 	rbit	r2, r3
 80016aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80016b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	4b68      	ldr	r3, [pc, #416]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 80016b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80016c0:	2102      	movs	r1, #2
 80016c2:	6019      	str	r1, [r3, #0]
 80016c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	fa93 f1a3 	rbit	r1, r3
 80016d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016d6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016da:	6019      	str	r1, [r3, #0]
  return result;
 80016dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	fab3 f383 	clz	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d197      	bne.n	8001632 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001706:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 819c 	beq.w	8001a50 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171e:	4b4e      	ldr	r3, [pc, #312]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d116      	bne.n	8001758 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	4b4b      	ldr	r3, [pc, #300]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a4a      	ldr	r2, [pc, #296]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001734:	61d3      	str	r3, [r2, #28]
 8001736:	4b48      	ldr	r3, [pc, #288]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800173e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001742:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800174c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001750:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001752:	2301      	movs	r3, #1
 8001754:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	4b41      	ldr	r3, [pc, #260]	@ (8001860 <HAL_RCC_OscConfig+0x994>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d11a      	bne.n	800179a <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001764:	4b3e      	ldr	r3, [pc, #248]	@ (8001860 <HAL_RCC_OscConfig+0x994>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a3d      	ldr	r2, [pc, #244]	@ (8001860 <HAL_RCC_OscConfig+0x994>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800176e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001770:	f7fe ff7c 	bl	800066c <HAL_GetTick>
 8001774:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	e009      	b.n	800178e <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177a:	f7fe ff77 	bl	800066c <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	@ 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e3bb      	b.n	8001f06 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178e:	4b34      	ldr	r3, [pc, #208]	@ (8001860 <HAL_RCC_OscConfig+0x994>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0ef      	beq.n	800177a <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_OscConfig+0x8ec>
 80017aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6213      	str	r3, [r2, #32]
 80017b6:	e035      	b.n	8001824 <HAL_RCC_OscConfig+0x958>
 80017b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10c      	bne.n	80017e2 <HAL_RCC_OscConfig+0x916>
 80017c8:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	4a22      	ldr	r2, [pc, #136]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	6213      	str	r3, [r2, #32]
 80017d4:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 80017da:	f023 0304 	bic.w	r3, r3, #4
 80017de:	6213      	str	r3, [r2, #32]
 80017e0:	e020      	b.n	8001824 <HAL_RCC_OscConfig+0x958>
 80017e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0x940>
 80017f2:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4a18      	ldr	r2, [pc, #96]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6213      	str	r3, [r2, #32]
 80017fe:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4a15      	ldr	r2, [pc, #84]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6213      	str	r3, [r2, #32]
 800180a:	e00b      	b.n	8001824 <HAL_RCC_OscConfig+0x958>
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4a11      	ldr	r2, [pc, #68]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	6213      	str	r3, [r2, #32]
 8001818:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4a0e      	ldr	r2, [pc, #56]	@ (8001858 <HAL_RCC_OscConfig+0x98c>)
 800181e:	f023 0304 	bic.w	r3, r3, #4
 8001822:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001828:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 8085 	beq.w	8001940 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7fe ff19 	bl	800066c <HAL_GetTick>
 800183a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183e:	e011      	b.n	8001864 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001840:	f7fe ff14 	bl	800066c <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001850:	4293      	cmp	r3, r2
 8001852:	d907      	bls.n	8001864 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e356      	b.n	8001f06 <HAL_RCC_OscConfig+0x103a>
 8001858:	40021000 	.word	0x40021000
 800185c:	10908120 	.word	0x10908120
 8001860:	40007000 	.word	0x40007000
 8001864:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001868:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800186c:	2202      	movs	r2, #2
 800186e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001874:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	fa93 f2a3 	rbit	r2, r3
 800187e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001882:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001890:	2202      	movs	r2, #2
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001898:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	fa93 f2a3 	rbit	r2, r3
 80018a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80018aa:	601a      	str	r2, [r3, #0]
  return result;
 80018ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80018b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <HAL_RCC_OscConfig+0xa00>
 80018c6:	4b98      	ldr	r3, [pc, #608]	@ (8001b28 <HAL_RCC_OscConfig+0xc5c>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	e013      	b.n	80018f4 <HAL_RCC_OscConfig+0xa28>
 80018cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80018d4:	2202      	movs	r2, #2
 80018d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018dc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	fa93 f2a3 	rbit	r2, r3
 80018e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ea:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	4b8d      	ldr	r3, [pc, #564]	@ (8001b28 <HAL_RCC_OscConfig+0xc5c>)
 80018f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018f8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80018fc:	2102      	movs	r1, #2
 80018fe:	6011      	str	r1, [r2, #0]
 8001900:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001904:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	fa92 f1a2 	rbit	r1, r2
 800190e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001912:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001916:	6011      	str	r1, [r2, #0]
  return result;
 8001918:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800191c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	fab2 f282 	clz	r2, r2
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f002 021f 	and.w	r2, r2, #31
 8001932:	2101      	movs	r1, #1
 8001934:	fa01 f202 	lsl.w	r2, r1, r2
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d080      	beq.n	8001840 <HAL_RCC_OscConfig+0x974>
 800193e:	e07d      	b.n	8001a3c <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001940:	f7fe fe94 	bl	800066c <HAL_GetTick>
 8001944:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001948:	e00b      	b.n	8001962 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194a:	f7fe fe8f 	bl	800066c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e2d1      	b.n	8001f06 <HAL_RCC_OscConfig+0x103a>
 8001962:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001966:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800196a:	2202      	movs	r2, #2
 800196c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001972:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fa93 f2a3 	rbit	r2, r3
 800197c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001980:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800198a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800198e:	2202      	movs	r2, #2
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001996:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80019a8:	601a      	str	r2, [r3, #0]
  return result;
 80019aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ae:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80019b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <HAL_RCC_OscConfig+0xafe>
 80019c4:	4b58      	ldr	r3, [pc, #352]	@ (8001b28 <HAL_RCC_OscConfig+0xc5c>)
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	e013      	b.n	80019f2 <HAL_RCC_OscConfig+0xb26>
 80019ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ce:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80019d2:	2202      	movs	r2, #2
 80019d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019da:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fa93 f2a3 	rbit	r2, r3
 80019e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e8:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001b28 <HAL_RCC_OscConfig+0xc5c>)
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019f6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80019fa:	2102      	movs	r1, #2
 80019fc:	6011      	str	r1, [r2, #0]
 80019fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a02:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	fa92 f1a2 	rbit	r1, r2
 8001a0c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a10:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001a14:	6011      	str	r1, [r2, #0]
  return result;
 8001a16:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a1a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	fab2 f282 	clz	r2, r2
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	f002 021f 	and.w	r2, r2, #31
 8001a30:	2101      	movs	r1, #1
 8001a32:	fa01 f202 	lsl.w	r2, r1, r2
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d186      	bne.n	800194a <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a3c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d105      	bne.n	8001a50 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a44:	4b38      	ldr	r3, [pc, #224]	@ (8001b28 <HAL_RCC_OscConfig+0xc5c>)
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	4a37      	ldr	r2, [pc, #220]	@ (8001b28 <HAL_RCC_OscConfig+0xc5c>)
 8001a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a4e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 8251 	beq.w	8001f04 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a62:	4b31      	ldr	r3, [pc, #196]	@ (8001b28 <HAL_RCC_OscConfig+0xc5c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	f000 820f 	beq.w	8001e8e <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	f040 8165 	bne.w	8001d4c <HAL_RCC_OscConfig+0xe80>
 8001a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a86:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a8a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a94:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001aa6:	601a      	str	r2, [r3, #0]
  return result;
 8001aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001ab0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001abc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7fe fdd0 	bl	800066c <HAL_GetTick>
 8001acc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad0:	e009      	b.n	8001ae6 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7fe fdcb 	bl	800066c <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e20f      	b.n	8001f06 <HAL_RCC_OscConfig+0x103a>
 8001ae6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aea:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001aee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	fa93 f2a3 	rbit	r2, r3
 8001b02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b06:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001b0a:	601a      	str	r2, [r3, #0]
  return result;
 8001b0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b10:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001b14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b1e:	d805      	bhi.n	8001b2c <HAL_RCC_OscConfig+0xc60>
 8001b20:	4b01      	ldr	r3, [pc, #4]	@ (8001b28 <HAL_RCC_OscConfig+0xc5c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	e02a      	b.n	8001b7c <HAL_RCC_OscConfig+0xcb0>
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b30:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001b34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fa93 f2a3 	rbit	r2, r3
 8001b48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b4c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b56:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001b5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b64:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	fa93 f2a3 	rbit	r2, r3
 8001b6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b72:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	4bca      	ldr	r3, [pc, #808]	@ (8001ea4 <HAL_RCC_OscConfig+0xfd8>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b80:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001b84:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b88:	6011      	str	r1, [r2, #0]
 8001b8a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b8e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	fa92 f1a2 	rbit	r1, r2
 8001b98:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b9c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001ba0:	6011      	str	r1, [r2, #0]
  return result;
 8001ba2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ba6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	fab2 f282 	clz	r2, r2
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f042 0220 	orr.w	r2, r2, #32
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f002 021f 	and.w	r2, r2, #31
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d184      	bne.n	8001ad2 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc8:	4bb6      	ldr	r3, [pc, #728]	@ (8001ea4 <HAL_RCC_OscConfig+0xfd8>)
 8001bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bcc:	f023 020f 	bic.w	r2, r3, #15
 8001bd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	49b1      	ldr	r1, [pc, #708]	@ (8001ea4 <HAL_RCC_OscConfig+0xfd8>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001be2:	4bb0      	ldr	r3, [pc, #704]	@ (8001ea4 <HAL_RCC_OscConfig+0xfd8>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6a19      	ldr	r1, [r3, #32]
 8001bf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bfa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	430b      	orrs	r3, r1
 8001c04:	49a7      	ldr	r1, [pc, #668]	@ (8001ea4 <HAL_RCC_OscConfig+0xfd8>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
 8001c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c0e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001c12:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c1c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	fa93 f2a3 	rbit	r2, r3
 8001c26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001c2e:	601a      	str	r2, [r3, #0]
  return result;
 8001c30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c34:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001c38:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3a:	fab3 f383 	clz	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c44:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7fe fd0c 	bl	800066c <HAL_GetTick>
 8001c54:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c58:	e009      	b.n	8001c6e <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7fe fd07 	bl	800066c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e14b      	b.n	8001f06 <HAL_RCC_OscConfig+0x103a>
 8001c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c72:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001c76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c80:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	fa93 f2a3 	rbit	r2, r3
 8001c8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c8e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001c92:	601a      	str	r2, [r3, #0]
  return result;
 8001c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c98:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001c9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ca6:	d802      	bhi.n	8001cae <HAL_RCC_OscConfig+0xde2>
 8001ca8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ea4 <HAL_RCC_OscConfig+0xfd8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	e027      	b.n	8001cfe <HAL_RCC_OscConfig+0xe32>
 8001cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cb6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	fa93 f2a3 	rbit	r2, r3
 8001cca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cce:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001cdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	fa93 f2a3 	rbit	r2, r3
 8001cf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf4:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea4 <HAL_RCC_OscConfig+0xfd8>)
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d02:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001d06:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d0a:	6011      	str	r1, [r2, #0]
 8001d0c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d10:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	fa92 f1a2 	rbit	r1, r2
 8001d1a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d1e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001d22:	6011      	str	r1, [r2, #0]
  return result;
 8001d24:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d28:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	fab2 f282 	clz	r2, r2
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	f042 0220 	orr.w	r2, r2, #32
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f002 021f 	and.w	r2, r2, #31
 8001d3e:	2101      	movs	r1, #1
 8001d40:	fa01 f202 	lsl.w	r2, r1, r2
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d087      	beq.n	8001c5a <HAL_RCC_OscConfig+0xd8e>
 8001d4a:	e0db      	b.n	8001f04 <HAL_RCC_OscConfig+0x1038>
 8001d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d50:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001d54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d70:	601a      	str	r2, [r3, #0]
  return result;
 8001d72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d76:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d7a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d86:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2300      	movs	r3, #0
 8001d90:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7fe fc6b 	bl	800066c <HAL_GetTick>
 8001d96:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9a:	e009      	b.n	8001db0 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7fe fc66 	bl	800066c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0aa      	b.n	8001f06 <HAL_RCC_OscConfig+0x103a>
 8001db0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001db8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fa93 f2a3 	rbit	r2, r3
 8001dcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001dd4:	601a      	str	r2, [r3, #0]
  return result;
 8001dd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dda:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001dde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001de8:	d802      	bhi.n	8001df0 <HAL_RCC_OscConfig+0xf24>
 8001dea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea4 <HAL_RCC_OscConfig+0xfd8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	e027      	b.n	8001e40 <HAL_RCC_OscConfig+0xf74>
 8001df0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001df8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e02:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e10:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001e1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e28:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	fa93 f2a3 	rbit	r2, r3
 8001e32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e36:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <HAL_RCC_OscConfig+0xfd8>)
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e44:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001e48:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e4c:	6011      	str	r1, [r2, #0]
 8001e4e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e52:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	fa92 f1a2 	rbit	r1, r2
 8001e5c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e60:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001e64:	6011      	str	r1, [r2, #0]
  return result;
 8001e66:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e6a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	fab2 f282 	clz	r2, r2
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	f042 0220 	orr.w	r2, r2, #32
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	f002 021f 	and.w	r2, r2, #31
 8001e80:	2101      	movs	r1, #1
 8001e82:	fa01 f202 	lsl.w	r2, r1, r2
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d187      	bne.n	8001d9c <HAL_RCC_OscConfig+0xed0>
 8001e8c:	e03a      	b.n	8001f04 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d104      	bne.n	8001ea8 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e031      	b.n	8001f06 <HAL_RCC_OscConfig+0x103a>
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ea8:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <HAL_RCC_OscConfig+0x1044>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001eb0:	4b17      	ldr	r3, [pc, #92]	@ (8001f10 <HAL_RCC_OscConfig+0x1044>)
 8001eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001eb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ebc:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001ec0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d117      	bne.n	8001f00 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ed0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ed4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ed8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001edc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d10b      	bne.n	8001f00 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001ee8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001eec:	f003 020f 	and.w	r2, r3, #15
 8001ef0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000

08001f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b09e      	sub	sp, #120	@ 0x78
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e154      	b.n	80021d6 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b89      	ldr	r3, [pc, #548]	@ (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d910      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b86      	ldr	r3, [pc, #536]	@ (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4984      	ldr	r1, [pc, #528]	@ (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b82      	ldr	r3, [pc, #520]	@ (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e13c      	b.n	80021d6 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f68:	4b7b      	ldr	r3, [pc, #492]	@ (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	4978      	ldr	r1, [pc, #480]	@ (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80cd 	beq.w	8002122 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d137      	bne.n	8002000 <HAL_RCC_ClockConfig+0xec>
 8001f90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f94:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001f9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fa8:	d802      	bhi.n	8001fb0 <HAL_RCC_ClockConfig+0x9c>
 8001faa:	4b6b      	ldr	r3, [pc, #428]	@ (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	e00f      	b.n	8001fd0 <HAL_RCC_ClockConfig+0xbc>
 8001fb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8001fbe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8001fc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001fcc:	4b62      	ldr	r3, [pc, #392]	@ (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fd4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001fd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001fd8:	fa92 f2a2 	rbit	r2, r2
 8001fdc:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001fde:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001fe0:	fab2 f282 	clz	r2, r2
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	f042 0220 	orr.w	r2, r2, #32
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	f002 021f 	and.w	r2, r2, #31
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d171      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0ea      	b.n	80021d6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d137      	bne.n	8002078 <HAL_RCC_ClockConfig+0x164>
 8002008:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800200c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002020:	d802      	bhi.n	8002028 <HAL_RCC_ClockConfig+0x114>
 8002022:	4b4d      	ldr	r3, [pc, #308]	@ (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	e00f      	b.n	8002048 <HAL_RCC_ClockConfig+0x134>
 8002028:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800202c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	647b      	str	r3, [r7, #68]	@ 0x44
 8002036:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800203a:	643b      	str	r3, [r7, #64]	@ 0x40
 800203c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002044:	4b44      	ldr	r3, [pc, #272]	@ (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002048:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800204c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800204e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002050:	fa92 f2a2 	rbit	r2, r2
 8002054:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002056:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002058:	fab2 f282 	clz	r2, r2
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	f042 0220 	orr.w	r2, r2, #32
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	f002 021f 	and.w	r2, r2, #31
 8002068:	2101      	movs	r1, #1
 800206a:	fa01 f202 	lsl.w	r2, r1, r2
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d135      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0ae      	b.n	80021d6 <HAL_RCC_ClockConfig+0x2c2>
 8002078:	2302      	movs	r3, #2
 800207a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b3f      	cmp	r3, #63	@ 0x3f
 800208e:	d802      	bhi.n	8002096 <HAL_RCC_ClockConfig+0x182>
 8002090:	4b31      	ldr	r3, [pc, #196]	@ (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	e00d      	b.n	80020b2 <HAL_RCC_ClockConfig+0x19e>
 8002096:	2302      	movs	r3, #2
 8002098:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020a2:	2302      	movs	r3, #2
 80020a4:	623b      	str	r3, [r7, #32]
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <HAL_RCC_ClockConfig+0x244>)
 80020b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b2:	2202      	movs	r2, #2
 80020b4:	61ba      	str	r2, [r7, #24]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	fa92 f2a2 	rbit	r2, r2
 80020bc:	617a      	str	r2, [r7, #20]
  return result;
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	fab2 f282 	clz	r2, r2
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	f042 0220 	orr.w	r2, r2, #32
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	f002 021f 	and.w	r2, r2, #31
 80020d0:	2101      	movs	r1, #1
 80020d2:	fa01 f202 	lsl.w	r2, r1, r2
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e07a      	b.n	80021d6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <HAL_RCC_ClockConfig+0x244>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 0203 	bic.w	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	491a      	ldr	r1, [pc, #104]	@ (8002158 <HAL_RCC_ClockConfig+0x244>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f2:	f7fe fabb 	bl	800066c <HAL_GetTick>
 80020f6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fa:	f7fe fab7 	bl	800066c <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e062      	b.n	80021d6 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 020c 	and.w	r2, r3, #12
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	429a      	cmp	r2, r3
 8002120:	d1eb      	bne.n	80020fa <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002122:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <HAL_RCC_ClockConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d215      	bcs.n	800215c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <HAL_RCC_ClockConfig+0x240>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 0207 	bic.w	r2, r3, #7
 8002138:	4906      	ldr	r1, [pc, #24]	@ (8002154 <HAL_RCC_ClockConfig+0x240>)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002140:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <HAL_RCC_ClockConfig+0x240>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d006      	beq.n	800215c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e041      	b.n	80021d6 <HAL_RCC_ClockConfig+0x2c2>
 8002152:	bf00      	nop
 8002154:	40022000 	.word	0x40022000
 8002158:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002168:	4b1d      	ldr	r3, [pc, #116]	@ (80021e0 <HAL_RCC_ClockConfig+0x2cc>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	491a      	ldr	r1, [pc, #104]	@ (80021e0 <HAL_RCC_ClockConfig+0x2cc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002186:	4b16      	ldr	r3, [pc, #88]	@ (80021e0 <HAL_RCC_ClockConfig+0x2cc>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4912      	ldr	r1, [pc, #72]	@ (80021e0 <HAL_RCC_ClockConfig+0x2cc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800219a:	f000 f829 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 800219e:	4601      	mov	r1, r0
 80021a0:	4b0f      	ldr	r3, [pc, #60]	@ (80021e0 <HAL_RCC_ClockConfig+0x2cc>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021a8:	22f0      	movs	r2, #240	@ 0xf0
 80021aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	fa92 f2a2 	rbit	r2, r2
 80021b2:	60fa      	str	r2, [r7, #12]
  return result;
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	fab2 f282 	clz	r2, r2
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	40d3      	lsrs	r3, r2
 80021be:	4a09      	ldr	r2, [pc, #36]	@ (80021e4 <HAL_RCC_ClockConfig+0x2d0>)
 80021c0:	5cd3      	ldrb	r3, [r2, r3]
 80021c2:	fa21 f303 	lsr.w	r3, r1, r3
 80021c6:	4a08      	ldr	r2, [pc, #32]	@ (80021e8 <HAL_RCC_ClockConfig+0x2d4>)
 80021c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021ca:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <HAL_RCC_ClockConfig+0x2d8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fa08 	bl	80005e4 <HAL_InitTick>
  
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3778      	adds	r7, #120	@ 0x78
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	08002c50 	.word	0x08002c50
 80021e8:	20000004 	.word	0x20000004
 80021ec:	20000008 	.word	0x20000008

080021f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800220a:	4b1f      	ldr	r3, [pc, #124]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x98>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b04      	cmp	r3, #4
 8002218:	d002      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x30>
 800221a:	2b08      	cmp	r3, #8
 800221c:	d003      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x36>
 800221e:	e029      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002220:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002222:	613b      	str	r3, [r7, #16]
      break;
 8002224:	e029      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	0c9b      	lsrs	r3, r3, #18
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	4a18      	ldr	r2, [pc, #96]	@ (8002290 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002230:	5cd3      	ldrb	r3, [r2, r3]
 8002232:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002234:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x98>)
 8002236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	4a15      	ldr	r2, [pc, #84]	@ (8002294 <HAL_RCC_GetSysClockFreq+0xa4>)
 800223e:	5cd3      	ldrb	r3, [r2, r3]
 8002240:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800224c:	4a0f      	ldr	r2, [pc, #60]	@ (800228c <HAL_RCC_GetSysClockFreq+0x9c>)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	fbb2 f2f3 	udiv	r2, r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	e007      	b.n	800226e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800225e:	4a0b      	ldr	r2, [pc, #44]	@ (800228c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	fbb2 f2f3 	udiv	r2, r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	613b      	str	r3, [r7, #16]
      break;
 8002272:	e002      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b05      	ldr	r3, [pc, #20]	@ (800228c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002276:	613b      	str	r3, [r7, #16]
      break;
 8002278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227a:	693b      	ldr	r3, [r7, #16]
}
 800227c:	4618      	mov	r0, r3
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40021000 	.word	0x40021000
 800228c:	007a1200 	.word	0x007a1200
 8002290:	08002c60 	.word	0x08002c60
 8002294:	08002c70 	.word	0x08002c70

08002298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e09d      	b.n	80023e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d108      	bne.n	80022c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022ba:	d009      	beq.n	80022d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
 80022c2:	e005      	b.n	80022d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe f870 	bl	80003d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002306:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002310:	d902      	bls.n	8002318 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e002      	b.n	800231e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800231c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002326:	d007      	beq.n	8002338 <HAL_SPI_Init+0xa0>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002330:	d002      	beq.n	8002338 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237a:	ea42 0103 	orr.w	r1, r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002382:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	0c1b      	lsrs	r3, r3, #16
 8002394:	f003 0204 	and.w	r2, r3, #4
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80023b4:	ea42 0103 	orr.w	r1, r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69da      	ldr	r2, [r3, #28]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b088      	sub	sp, #32
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_SPI_Transmit+0x22>
 800240c:	2302      	movs	r3, #2
 800240e:	e15f      	b.n	80026d0 <HAL_SPI_Transmit+0x2e2>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002418:	f7fe f928 	bl	800066c <HAL_GetTick>
 800241c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d002      	beq.n	8002434 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800242e:	2302      	movs	r3, #2
 8002430:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002432:	e148      	b.n	80026c6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <HAL_SPI_Transmit+0x52>
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d102      	bne.n	8002446 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002444:	e13f      	b.n	80026c6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2203      	movs	r2, #3
 800244a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	88fa      	ldrh	r2, [r7, #6]
 800245e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	88fa      	ldrh	r2, [r7, #6]
 8002464:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002490:	d10f      	bne.n	80024b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024bc:	2b40      	cmp	r3, #64	@ 0x40
 80024be:	d007      	beq.n	80024d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80024d8:	d94f      	bls.n	800257a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_SPI_Transmit+0xfa>
 80024e2:	8afb      	ldrh	r3, [r7, #22]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d142      	bne.n	800256e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ec:	881a      	ldrh	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f8:	1c9a      	adds	r2, r3, #2
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800250c:	e02f      	b.n	800256e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b02      	cmp	r3, #2
 800251a:	d112      	bne.n	8002542 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002520:	881a      	ldrh	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252c:	1c9a      	adds	r2, r3, #2
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002540:	e015      	b.n	800256e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002542:	f7fe f893 	bl	800066c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d803      	bhi.n	800255a <HAL_SPI_Transmit+0x16c>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d102      	bne.n	8002560 <HAL_SPI_Transmit+0x172>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d106      	bne.n	800256e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800256c:	e0ab      	b.n	80026c6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1ca      	bne.n	800250e <HAL_SPI_Transmit+0x120>
 8002578:	e080      	b.n	800267c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_SPI_Transmit+0x19a>
 8002582:	8afb      	ldrh	r3, [r7, #22]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d174      	bne.n	8002672 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d912      	bls.n	80025b8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002596:	881a      	ldrh	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a2:	1c9a      	adds	r2, r3, #2
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b02      	subs	r3, #2
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025b6:	e05c      	b.n	8002672 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	330c      	adds	r3, #12
 80025c2:	7812      	ldrb	r2, [r2, #0]
 80025c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80025de:	e048      	b.n	8002672 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d12b      	bne.n	8002646 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d912      	bls.n	800261e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fc:	881a      	ldrh	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002608:	1c9a      	adds	r2, r3, #2
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b02      	subs	r3, #2
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800261c:	e029      	b.n	8002672 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	330c      	adds	r3, #12
 8002628:	7812      	ldrb	r2, [r2, #0]
 800262a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002644:	e015      	b.n	8002672 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002646:	f7fe f811 	bl	800066c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d803      	bhi.n	800265e <HAL_SPI_Transmit+0x270>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d102      	bne.n	8002664 <HAL_SPI_Transmit+0x276>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d106      	bne.n	8002672 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002670:	e029      	b.n	80026c6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1b1      	bne.n	80025e0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	6839      	ldr	r1, [r7, #0]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fa67 	bl	8002b54 <SPI_EndRxTxTransaction>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10a      	bne.n	80026b0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	77fb      	strb	r3, [r7, #31]
 80026bc:	e003      	b.n	80026c6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80026ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3720      	adds	r7, #32
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	099b      	lsrs	r3, r3, #6
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10f      	bne.n	800271c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	099b      	lsrs	r3, r3, #6
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d004      	beq.n	800271c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	4798      	blx	r3
    return;
 800271a:	e0d7      	b.n	80028cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <HAL_SPI_IRQHandler+0x66>
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	09db      	lsrs	r3, r3, #7
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
    return;
 800273c:	e0c6      	b.n	80028cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10c      	bne.n	8002764 <HAL_SPI_IRQHandler+0x8c>
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	099b      	lsrs	r3, r3, #6
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80b4 	beq.w	80028cc <HAL_SPI_IRQHandler+0x1f4>
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80ad 	beq.w	80028cc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	099b      	lsrs	r3, r3, #6
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d023      	beq.n	80027c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b03      	cmp	r3, #3
 8002788:	d011      	beq.n	80027ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278e:	f043 0204 	orr.w	r2, r3, #4
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	e00b      	b.n	80027c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]
        return;
 80027c4:	e082      	b.n	80028cc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d014      	beq.n	80027fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00c      	beq.n	8002822 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800280c:	f043 0208 	orr.w	r2, r3, #8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002826:	2b00      	cmp	r3, #0
 8002828:	d04f      	beq.n	80028ca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002838:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d104      	bne.n	8002856 <HAL_SPI_IRQHandler+0x17e>
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d034      	beq.n	80028c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0203 	bic.w	r2, r2, #3
 8002864:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286a:	2b00      	cmp	r3, #0
 800286c:	d011      	beq.n	8002892 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002872:	4a18      	ldr	r2, [pc, #96]	@ (80028d4 <HAL_SPI_IRQHandler+0x1fc>)
 8002874:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe f87e 	bl	800097c <HAL_DMA_Abort_IT>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800288a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289e:	4a0d      	ldr	r2, [pc, #52]	@ (80028d4 <HAL_SPI_IRQHandler+0x1fc>)
 80028a0:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe f868 	bl	800097c <HAL_DMA_Abort_IT>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80028be:	e003      	b.n	80028c8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f809 	bl	80028d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80028c6:	e000      	b.n	80028ca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80028c8:	bf00      	nop
    return;
 80028ca:	bf00      	nop
  }
}
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	080028ed 	.word	0x080028ed

080028d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff ffe5 	bl	80028d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	4613      	mov	r3, r2
 8002926:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002928:	f7fd fea0 	bl	800066c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	4413      	add	r3, r2
 8002936:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002938:	f7fd fe98 	bl	800066c <HAL_GetTick>
 800293c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800293e:	4b39      	ldr	r3, [pc, #228]	@ (8002a24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	015b      	lsls	r3, r3, #5
 8002944:	0d1b      	lsrs	r3, r3, #20
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800294e:	e054      	b.n	80029fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002956:	d050      	beq.n	80029fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002958:	f7fd fe88 	bl	800066c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	429a      	cmp	r2, r3
 8002966:	d902      	bls.n	800296e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d13d      	bne.n	80029ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800297c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002986:	d111      	bne.n	80029ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002990:	d004      	beq.n	800299c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299a:	d107      	bne.n	80029ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029b4:	d10f      	bne.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e017      	b.n	8002a1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4013      	ands	r3, r2
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	bf0c      	ite	eq
 8002a0a:	2301      	moveq	r3, #1
 8002a0c:	2300      	movne	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d19b      	bne.n	8002950 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000004 	.word	0x20000004

08002a28 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	@ 0x28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002a3a:	f7fd fe17 	bl	800066c <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	4413      	add	r3, r2
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002a4a:	f7fd fe0f 	bl	800066c <HAL_GetTick>
 8002a4e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	330c      	adds	r3, #12
 8002a56:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002a58:	4b3d      	ldr	r3, [pc, #244]	@ (8002b50 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	00da      	lsls	r2, r3, #3
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	0d1b      	lsrs	r3, r3, #20
 8002a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002a70:	e060      	b.n	8002b34 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002a78:	d107      	bne.n	8002a8a <SPI_WaitFifoStateUntilTimeout+0x62>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d104      	bne.n	8002a8a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d050      	beq.n	8002b34 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a92:	f7fd fdeb 	bl	800066c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d902      	bls.n	8002aa8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d13d      	bne.n	8002b24 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ab6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ac0:	d111      	bne.n	8002ae6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aca:	d004      	beq.n	8002ad6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad4:	d107      	bne.n	8002ae6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ae4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aee:	d10f      	bne.n	8002b10 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e010      	b.n	8002b46 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d196      	bne.n	8002a72 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3728      	adds	r7, #40	@ 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000004 	.word	0x20000004

08002b54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f7ff ff5b 	bl	8002a28 <SPI_WaitFifoStateUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e027      	b.n	8002bd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2180      	movs	r1, #128	@ 0x80
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f7ff fec0 	bl	8002918 <SPI_WaitFlagStateUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba2:	f043 0220 	orr.w	r2, r3, #32
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e014      	b.n	8002bd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f7ff ff34 	bl	8002a28 <SPI_WaitFifoStateUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bca:	f043 0220 	orr.w	r2, r3, #32
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e000      	b.n	8002bd8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <memset>:
 8002be0:	4402      	add	r2, r0
 8002be2:	4603      	mov	r3, r0
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d100      	bne.n	8002bea <memset+0xa>
 8002be8:	4770      	bx	lr
 8002bea:	f803 1b01 	strb.w	r1, [r3], #1
 8002bee:	e7f9      	b.n	8002be4 <memset+0x4>

08002bf0 <__libc_init_array>:
 8002bf0:	b570      	push	{r4, r5, r6, lr}
 8002bf2:	4d0d      	ldr	r5, [pc, #52]	@ (8002c28 <__libc_init_array+0x38>)
 8002bf4:	4c0d      	ldr	r4, [pc, #52]	@ (8002c2c <__libc_init_array+0x3c>)
 8002bf6:	1b64      	subs	r4, r4, r5
 8002bf8:	10a4      	asrs	r4, r4, #2
 8002bfa:	2600      	movs	r6, #0
 8002bfc:	42a6      	cmp	r6, r4
 8002bfe:	d109      	bne.n	8002c14 <__libc_init_array+0x24>
 8002c00:	4d0b      	ldr	r5, [pc, #44]	@ (8002c30 <__libc_init_array+0x40>)
 8002c02:	4c0c      	ldr	r4, [pc, #48]	@ (8002c34 <__libc_init_array+0x44>)
 8002c04:	f000 f818 	bl	8002c38 <_init>
 8002c08:	1b64      	subs	r4, r4, r5
 8002c0a:	10a4      	asrs	r4, r4, #2
 8002c0c:	2600      	movs	r6, #0
 8002c0e:	42a6      	cmp	r6, r4
 8002c10:	d105      	bne.n	8002c1e <__libc_init_array+0x2e>
 8002c12:	bd70      	pop	{r4, r5, r6, pc}
 8002c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c18:	4798      	blx	r3
 8002c1a:	3601      	adds	r6, #1
 8002c1c:	e7ee      	b.n	8002bfc <__libc_init_array+0xc>
 8002c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c22:	4798      	blx	r3
 8002c24:	3601      	adds	r6, #1
 8002c26:	e7f2      	b.n	8002c0e <__libc_init_array+0x1e>
 8002c28:	08002c80 	.word	0x08002c80
 8002c2c:	08002c80 	.word	0x08002c80
 8002c30:	08002c80 	.word	0x08002c80
 8002c34:	08002c84 	.word	0x08002c84

08002c38 <_init>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr

08002c44 <_fini>:
 8002c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c46:	bf00      	nop
 8002c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4a:	bc08      	pop	{r3}
 8002c4c:	469e      	mov	lr, r3
 8002c4e:	4770      	bx	lr
