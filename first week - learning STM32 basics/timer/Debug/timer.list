
timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002e38  08002e38  00003e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e68  08002e68  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002e68  08002e68  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002e68  08002e68  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e68  08002e68  00003e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e6c  08002e6c  00003e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e70  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000090e0  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014c6  00000000  00000000  0000d11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  0000e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000075b  00000000  00000000  0000ef70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f935  00000000  00000000  0000f6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b30f  00000000  00000000  0002f000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5a19  00000000  00000000  0003a30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ffd28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027a4  00000000  00000000  000ffd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00102510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002e20 	.word	0x08002e20

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002e20 	.word	0x08002e20

080001d4 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  HAL_Init();
 80001d8:	f000 f9ac 	bl	8000534 <HAL_Init>
  SystemClock_Config();
 80001dc:	f000 f82e 	bl	800023c <SystemClock_Config>
  MX_GPIO_Init();
 80001e0:	f000 f868 	bl	80002b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001e4:	f000 f890 	bl	8000308 <MX_TIM2_Init>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80001e8:	2100      	movs	r1, #0
 80001ea:	4802      	ldr	r0, [pc, #8]	@ (80001f4 <main+0x20>)
 80001ec:	f001 fefc 	bl	8001fe8 <HAL_TIM_OC_Start_IT>

  while (1)
 80001f0:	bf00      	nop
 80001f2:	e7fd      	b.n	80001f0 <main+0x1c>
 80001f4:	20000028 	.word	0x20000028

080001f8 <HAL_TIM_OC_DelayElapsedCallback>:
    // nothing here, toggling done in timer interrupt
  }
}

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000208:	d111      	bne.n	800022e <HAL_TIM_OC_DelayElapsedCallback+0x36>
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	7f1b      	ldrb	r3, [r3, #28]
 800020e:	2b01      	cmp	r3, #1
 8000210:	d10d      	bne.n	800022e <HAL_TIM_OC_DelayElapsedCallback+0x36>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000212:	2120      	movs	r1, #32
 8000214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000218:	f000 fc8e 	bl	8000b38 <HAL_GPIO_TogglePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1) + 5000); //pulse increment: bigger the value, larger the ON/OFF periods
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000222:	4a05      	ldr	r2, [pc, #20]	@ (8000238 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 8000224:	6812      	ldr	r2, [r2, #0]
 8000226:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800022a:	3308      	adds	r3, #8
 800022c:	6353      	str	r3, [r2, #52]	@ 0x34
  }
}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	20000028 	.word	0x20000028

0800023c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b090      	sub	sp, #64	@ 0x40
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2228      	movs	r2, #40	@ 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f002 fdbb 	bl	8002dc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025e:	2302      	movs	r3, #2
 8000260:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000262:	2301      	movs	r3, #1
 8000264:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000266:	2310      	movs	r3, #16
 8000268:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800026a:	2300      	movs	r3, #0
 800026c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	4618      	mov	r0, r3
 8000274:	f000 fc7a 	bl	8000b6c <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x46>
 800027e:	f000 f8a7 	bl	80003d0 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|
 8000282:	230f      	movs	r3, #15
 8000284:	607b      	str	r3, [r7, #4]
                               RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000286:	2300      	movs	r3, #0
 8000288:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) Error_Handler();
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f001 fc8a 	bl	8001bb4 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x6e>
 80002a6:	f000 f893 	bl	80003d0 <Error_Handler>
}
 80002aa:	bf00      	nop
 80002ac:	3740      	adds	r7, #64	@ 0x40
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b086      	sub	sp, #24
 80002b8:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ba:	4b12      	ldr	r3, [pc, #72]	@ (8000304 <MX_GPIO_Init+0x50>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	4a11      	ldr	r2, [pc, #68]	@ (8000304 <MX_GPIO_Init+0x50>)
 80002c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002c4:	6153      	str	r3, [r2, #20]
 80002c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <MX_GPIO_Init+0x50>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002ce:	603b      	str	r3, [r7, #0]
 80002d0:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_5;         // LED pin on PA5
 80002e0:	2320      	movs	r3, #32
 80002e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e4:	2301      	movs	r3, #1
 80002e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ec:	2300      	movs	r3, #0
 80002ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	4619      	mov	r1, r3
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f8:	f000 fa94 	bl	8000824 <HAL_GPIO_Init>
}
 80002fc:	bf00      	nop
 80002fe:	3718      	adds	r7, #24
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40021000 	.word	0x40021000

08000308 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
  __HAL_RCC_TIM2_CLK_ENABLE();
 800030e:	4b29      	ldr	r3, [pc, #164]	@ (80003b4 <MX_TIM2_Init+0xac>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	4a28      	ldr	r2, [pc, #160]	@ (80003b4 <MX_TIM2_Init+0xac>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	61d3      	str	r3, [r2, #28]
 800031a:	4b26      	ldr	r3, [pc, #152]	@ (80003b4 <MX_TIM2_Init+0xac>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	603b      	str	r3, [r7, #0]
 8000324:	683b      	ldr	r3, [r7, #0]

  htim2.Instance = TIM2;
 8000326:	4b24      	ldr	r3, [pc, #144]	@ (80003b8 <MX_TIM2_Init+0xb0>)
 8000328:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800032c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;     // Timer clock = 72 MHz / (7199+1) = 10 kHz
 800032e:	4b22      	ldr	r3, [pc, #136]	@ (80003b8 <MX_TIM2_Init+0xb0>)
 8000330:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000334:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000336:	4b20      	ldr	r3, [pc, #128]	@ (80003b8 <MX_TIM2_Init+0xb0>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;      // Max period
 800033c:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <MX_TIM2_Init+0xb0>)
 800033e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000342:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000344:	4b1c      	ldr	r3, [pc, #112]	@ (80003b8 <MX_TIM2_Init+0xb0>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034a:	4b1b      	ldr	r3, [pc, #108]	@ (80003b8 <MX_TIM2_Init+0xb0>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK) Error_Handler();
 8000350:	4819      	ldr	r0, [pc, #100]	@ (80003b8 <MX_TIM2_Init+0xb0>)
 8000352:	f001 fdf1 	bl	8001f38 <HAL_TIM_OC_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM2_Init+0x58>
 800035c:	f000 f838 	bl	80003d0 <Error_Handler>

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]
 800036e:	615a      	str	r2, [r3, #20]
 8000370:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000372:	2300      	movs	r3, #0
 8000374:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;          // Compare value
 8000376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800037a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	4619      	mov	r1, r3
 800038a:	480b      	ldr	r0, [pc, #44]	@ (80003b8 <MX_TIM2_Init+0xb0>)
 800038c:	f002 f886 	bl	800249c <HAL_TIM_OC_ConfigChannel>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_TIM2_Init+0x92>
 8000396:	f000 f81b 	bl	80003d0 <Error_Handler>

  // Enable interrupt in NVIC
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	2100      	movs	r1, #0
 800039e:	201c      	movs	r0, #28
 80003a0:	f000 fa09 	bl	80007b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80003a4:	201c      	movs	r0, #28
 80003a6:	f000 fa22 	bl	80007ee <HAL_NVIC_EnableIRQ>
}
 80003aa:	bf00      	nop
 80003ac:	3720      	adds	r7, #32
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000
 80003b8:	20000028 	.word	0x20000028

080003bc <TIM2_IRQHandler>:

// Interrupt handler calls HAL handler
void TIM2_IRQHandler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 80003c0:	4802      	ldr	r0, [pc, #8]	@ (80003cc <TIM2_IRQHandler+0x10>)
 80003c2:	f001 ff69 	bl	8002298 <HAL_TIM_IRQHandler>
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000028 	.word	0x20000028

080003d0 <Error_Handler>:

void Error_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  while (1) { }
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <Error_Handler+0x4>

080003d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003de:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <HAL_MspInit+0x44>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a0e      	ldr	r2, [pc, #56]	@ (800041c <HAL_MspInit+0x44>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <HAL_MspInit+0x44>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	4b09      	ldr	r3, [pc, #36]	@ (800041c <HAL_MspInit+0x44>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	4a08      	ldr	r2, [pc, #32]	@ (800041c <HAL_MspInit+0x44>)
 80003fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000400:	61d3      	str	r3, [r2, #28]
 8000402:	4b06      	ldr	r3, [pc, #24]	@ (800041c <HAL_MspInit+0x44>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800040e:	2007      	movs	r0, #7
 8000410:	f000 f9c6 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40021000 	.word	0x40021000

08000420 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000430:	d10b      	bne.n	800044a <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000432:	4b09      	ldr	r3, [pc, #36]	@ (8000458 <HAL_TIM_OC_MspInit+0x38>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	4a08      	ldr	r2, [pc, #32]	@ (8000458 <HAL_TIM_OC_MspInit+0x38>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	61d3      	str	r3, [r2, #28]
 800043e:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <HAL_TIM_OC_MspInit+0x38>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800044a:	bf00      	nop
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000

0800045c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <NMI_Handler+0x4>

08000464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <HardFault_Handler+0x4>

0800046c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <MemManage_Handler+0x4>

08000474 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <BusFault_Handler+0x4>

0800047c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <UsageFault_Handler+0x4>

08000484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b2:	f000 f885 	bl	80005c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <SystemInit+0x20>)
 80004c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004c6:	4a05      	ldr	r2, [pc, #20]	@ (80004dc <SystemInit+0x20>)
 80004c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000518 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80004e4:	f7ff ffea 	bl	80004bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480c      	ldr	r0, [pc, #48]	@ (800051c <LoopForever+0x6>)
  ldr r1, =_edata
 80004ea:	490d      	ldr	r1, [pc, #52]	@ (8000520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000524 <LoopForever+0xe>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000500:	4c0a      	ldr	r4, [pc, #40]	@ (800052c <LoopForever+0x16>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800050e:	f002 fc63 	bl	8002dd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000512:	f7ff fe5f 	bl	80001d4 <main>

08000516 <LoopForever>:

LoopForever:
    b LoopForever
 8000516:	e7fe      	b.n	8000516 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000518:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000524:	08002e70 	.word	0x08002e70
  ldr r2, =_sbss
 8000528:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800052c:	20000078 	.word	0x20000078

08000530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC1_2_IRQHandler>
	...

08000534 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000538:	4b08      	ldr	r3, [pc, #32]	@ (800055c <HAL_Init+0x28>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a07      	ldr	r2, [pc, #28]	@ (800055c <HAL_Init+0x28>)
 800053e:	f043 0310 	orr.w	r3, r3, #16
 8000542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f92b 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 f808 	bl	8000560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000550:	f7ff ff42 	bl	80003d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40022000 	.word	0x40022000

08000560 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000568:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <HAL_InitTick+0x54>)
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4b12      	ldr	r3, [pc, #72]	@ (80005b8 <HAL_InitTick+0x58>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4619      	mov	r1, r3
 8000572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000576:	fbb3 f3f1 	udiv	r3, r3, r1
 800057a:	fbb2 f3f3 	udiv	r3, r2, r3
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f943 	bl	800080a <HAL_SYSTICK_Config>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
 800058c:	e00e      	b.n	80005ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b0f      	cmp	r3, #15
 8000592:	d80a      	bhi.n	80005aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000594:	2200      	movs	r2, #0
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	f04f 30ff 	mov.w	r0, #4294967295
 800059c:	f000 f90b 	bl	80007b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a0:	4a06      	ldr	r2, [pc, #24]	@ (80005bc <HAL_InitTick+0x5c>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005a6:	2300      	movs	r3, #0
 80005a8:	e000      	b.n	80005ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005aa:	2301      	movs	r3, #1
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000008 	.word	0x20000008
 80005bc:	20000004 	.word	0x20000004

080005c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <HAL_IncTick+0x20>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <HAL_IncTick+0x24>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	4a04      	ldr	r2, [pc, #16]	@ (80005e4 <HAL_IncTick+0x24>)
 80005d2:	6013      	str	r3, [r2, #0]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000008 	.word	0x20000008
 80005e4:	20000074 	.word	0x20000074

080005e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80005ec:	4b03      	ldr	r3, [pc, #12]	@ (80005fc <HAL_GetTick+0x14>)
 80005ee:	681b      	ldr	r3, [r3, #0]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000074 	.word	0x20000074

08000600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000628:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800062c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	@ (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b04      	ldr	r3, [pc, #16]	@ (8000660 <__NVIC_GetPriorityGrouping+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	f003 0307 	and.w	r3, r3, #7
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db0b      	blt.n	800068e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 021f 	and.w	r2, r3, #31
 800067c:	4907      	ldr	r1, [pc, #28]	@ (800069c <__NVIC_EnableIRQ+0x38>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	095b      	lsrs	r3, r3, #5
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e100 	.word	0xe000e100

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	@ (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	@ (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	@ 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	@ 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800076c:	d301      	bcc.n	8000772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076e:	2301      	movs	r3, #1
 8000770:	e00f      	b.n	8000792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000772:	4a0a      	ldr	r2, [pc, #40]	@ (800079c <SysTick_Config+0x40>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077a:	210f      	movs	r1, #15
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f7ff ff8e 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <SysTick_Config+0x40>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	4b04      	ldr	r3, [pc, #16]	@ (800079c <SysTick_Config+0x40>)
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff29 	bl	8000600 <__NVIC_SetPriorityGrouping>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c8:	f7ff ff3e 	bl	8000648 <__NVIC_GetPriorityGrouping>
 80007cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f7ff ff8e 	bl	80006f4 <NVIC_EncodePriority>
 80007d8:	4602      	mov	r2, r0
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff5d 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff31 	bl	8000664 <__NVIC_EnableIRQ>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffa2 	bl	800075c <SysTick_Config>
 8000818:	4603      	mov	r3, r0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000824:	b480      	push	{r7}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000832:	e160      	b.n	8000af6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	2101      	movs	r1, #1
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	fa01 f303 	lsl.w	r3, r1, r3
 8000840:	4013      	ands	r3, r2
 8000842:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b00      	cmp	r3, #0
 8000848:	f000 8152 	beq.w	8000af0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f003 0303 	and.w	r3, r3, #3
 8000854:	2b01      	cmp	r3, #1
 8000856:	d005      	beq.n	8000864 <HAL_GPIO_Init+0x40>
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	f003 0303 	and.w	r3, r3, #3
 8000860:	2b02      	cmp	r3, #2
 8000862:	d130      	bne.n	80008c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	2203      	movs	r2, #3
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	43db      	mvns	r3, r3
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	4013      	ands	r3, r2
 800087a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	68da      	ldr	r2, [r3, #12]
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	4313      	orrs	r3, r2
 800088c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800089a:	2201      	movs	r2, #1
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	4013      	ands	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	091b      	lsrs	r3, r3, #4
 80008b0:	f003 0201 	and.w	r2, r3, #1
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4313      	orrs	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f003 0303 	and.w	r3, r3, #3
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d017      	beq.n	8000902 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	2203      	movs	r2, #3
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4013      	ands	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f003 0303 	and.w	r3, r3, #3
 800090a:	2b02      	cmp	r3, #2
 800090c:	d123      	bne.n	8000956 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	08da      	lsrs	r2, r3, #3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3208      	adds	r2, #8
 8000916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800091a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	220f      	movs	r2, #15
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	4013      	ands	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	691a      	ldr	r2, [r3, #16]
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	f003 0307 	and.w	r3, r3, #7
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4313      	orrs	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	08da      	lsrs	r2, r3, #3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3208      	adds	r2, #8
 8000950:	6939      	ldr	r1, [r7, #16]
 8000952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	2203      	movs	r2, #3
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4013      	ands	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f003 0203 	and.w	r2, r3, #3
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4313      	orrs	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000992:	2b00      	cmp	r3, #0
 8000994:	f000 80ac 	beq.w	8000af0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000998:	4b5e      	ldr	r3, [pc, #376]	@ (8000b14 <HAL_GPIO_Init+0x2f0>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a5d      	ldr	r2, [pc, #372]	@ (8000b14 <HAL_GPIO_Init+0x2f0>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b5b      	ldr	r3, [pc, #364]	@ (8000b14 <HAL_GPIO_Init+0x2f0>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009b0:	4a59      	ldr	r2, [pc, #356]	@ (8000b18 <HAL_GPIO_Init+0x2f4>)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	3302      	adds	r3, #2
 80009b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	f003 0303 	and.w	r3, r3, #3
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	220f      	movs	r2, #15
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009da:	d025      	beq.n	8000a28 <HAL_GPIO_Init+0x204>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a4f      	ldr	r2, [pc, #316]	@ (8000b1c <HAL_GPIO_Init+0x2f8>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d01f      	beq.n	8000a24 <HAL_GPIO_Init+0x200>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a4e      	ldr	r2, [pc, #312]	@ (8000b20 <HAL_GPIO_Init+0x2fc>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d019      	beq.n	8000a20 <HAL_GPIO_Init+0x1fc>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a4d      	ldr	r2, [pc, #308]	@ (8000b24 <HAL_GPIO_Init+0x300>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d013      	beq.n	8000a1c <HAL_GPIO_Init+0x1f8>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a4c      	ldr	r2, [pc, #304]	@ (8000b28 <HAL_GPIO_Init+0x304>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d00d      	beq.n	8000a18 <HAL_GPIO_Init+0x1f4>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a4b      	ldr	r2, [pc, #300]	@ (8000b2c <HAL_GPIO_Init+0x308>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d007      	beq.n	8000a14 <HAL_GPIO_Init+0x1f0>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a4a      	ldr	r2, [pc, #296]	@ (8000b30 <HAL_GPIO_Init+0x30c>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d101      	bne.n	8000a10 <HAL_GPIO_Init+0x1ec>
 8000a0c:	2306      	movs	r3, #6
 8000a0e:	e00c      	b.n	8000a2a <HAL_GPIO_Init+0x206>
 8000a10:	2307      	movs	r3, #7
 8000a12:	e00a      	b.n	8000a2a <HAL_GPIO_Init+0x206>
 8000a14:	2305      	movs	r3, #5
 8000a16:	e008      	b.n	8000a2a <HAL_GPIO_Init+0x206>
 8000a18:	2304      	movs	r3, #4
 8000a1a:	e006      	b.n	8000a2a <HAL_GPIO_Init+0x206>
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	e004      	b.n	8000a2a <HAL_GPIO_Init+0x206>
 8000a20:	2302      	movs	r3, #2
 8000a22:	e002      	b.n	8000a2a <HAL_GPIO_Init+0x206>
 8000a24:	2301      	movs	r3, #1
 8000a26:	e000      	b.n	8000a2a <HAL_GPIO_Init+0x206>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	697a      	ldr	r2, [r7, #20]
 8000a2c:	f002 0203 	and.w	r2, r2, #3
 8000a30:	0092      	lsls	r2, r2, #2
 8000a32:	4093      	lsls	r3, r2
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a3a:	4937      	ldr	r1, [pc, #220]	@ (8000b18 <HAL_GPIO_Init+0x2f4>)
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	089b      	lsrs	r3, r3, #2
 8000a40:	3302      	adds	r3, #2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a48:	4b3a      	ldr	r3, [pc, #232]	@ (8000b34 <HAL_GPIO_Init+0x310>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a6c:	4a31      	ldr	r2, [pc, #196]	@ (8000b34 <HAL_GPIO_Init+0x310>)
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a72:	4b30      	ldr	r3, [pc, #192]	@ (8000b34 <HAL_GPIO_Init+0x310>)
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a96:	4a27      	ldr	r2, [pc, #156]	@ (8000b34 <HAL_GPIO_Init+0x310>)
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a9c:	4b25      	ldr	r3, [pc, #148]	@ (8000b34 <HAL_GPIO_Init+0x310>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b34 <HAL_GPIO_Init+0x310>)
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <HAL_GPIO_Init+0x310>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000aea:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <HAL_GPIO_Init+0x310>)
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	3301      	adds	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	fa22 f303 	lsr.w	r3, r2, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	f47f ae97 	bne.w	8000834 <HAL_GPIO_Init+0x10>
  }
}
 8000b06:	bf00      	nop
 8000b08:	bf00      	nop
 8000b0a:	371c      	adds	r7, #28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	48000400 	.word	0x48000400
 8000b20:	48000800 	.word	0x48000800
 8000b24:	48000c00 	.word	0x48000c00
 8000b28:	48001000 	.word	0x48001000
 8000b2c:	48001400 	.word	0x48001400
 8000b30:	48001800 	.word	0x48001800
 8000b34:	40010400 	.word	0x40010400

08000b38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b4a:	887a      	ldrh	r2, [r7, #2]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	041a      	lsls	r2, r3, #16
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	43d9      	mvns	r1, r3
 8000b56:	887b      	ldrh	r3, [r7, #2]
 8000b58:	400b      	ands	r3, r1
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	619a      	str	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b7c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b82:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	f001 b80a 	b.w	8001ba6 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f000 8161 	beq.w	8000e6a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ba8:	4bae      	ldr	r3, [pc, #696]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 030c 	and.w	r3, r3, #12
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	d00c      	beq.n	8000bce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb4:	4bab      	ldr	r3, [pc, #684]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 030c 	and.w	r3, r3, #12
 8000bbc:	2b08      	cmp	r3, #8
 8000bbe:	d157      	bne.n	8000c70 <HAL_RCC_OscConfig+0x104>
 8000bc0:	4ba8      	ldr	r3, [pc, #672]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bcc:	d150      	bne.n	8000c70 <HAL_RCC_OscConfig+0x104>
 8000bce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bd2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000bda:	fa93 f3a3 	rbit	r3, r3
 8000bde:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000be2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be6:	fab3 f383 	clz	r3, r3
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bee:	d802      	bhi.n	8000bf6 <HAL_RCC_OscConfig+0x8a>
 8000bf0:	4b9c      	ldr	r3, [pc, #624]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	e015      	b.n	8000c22 <HAL_RCC_OscConfig+0xb6>
 8000bf6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bfa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000c02:	fa93 f3a3 	rbit	r3, r3
 8000c06:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000c0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c0e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000c12:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000c16:	fa93 f3a3 	rbit	r3, r3
 8000c1a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000c1e:	4b91      	ldr	r3, [pc, #580]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c26:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000c2a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000c2e:	fa92 f2a2 	rbit	r2, r2
 8000c32:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000c36:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	f042 0220 	orr.w	r2, r2, #32
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	f002 021f 	and.w	r2, r2, #31
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c50:	4013      	ands	r3, r2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8108 	beq.w	8000e68 <HAL_RCC_OscConfig+0x2fc>
 8000c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c5c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f040 80ff 	bne.w	8000e68 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	f000 bf9b 	b.w	8001ba6 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c80:	d106      	bne.n	8000c90 <HAL_RCC_OscConfig+0x124>
 8000c82:	4b78      	ldr	r3, [pc, #480]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a77      	ldr	r2, [pc, #476]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e036      	b.n	8000cfe <HAL_RCC_OscConfig+0x192>
 8000c90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10c      	bne.n	8000cba <HAL_RCC_OscConfig+0x14e>
 8000ca0:	4b70      	ldr	r3, [pc, #448]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a6f      	ldr	r2, [pc, #444]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b6d      	ldr	r3, [pc, #436]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a6c      	ldr	r2, [pc, #432]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	e021      	b.n	8000cfe <HAL_RCC_OscConfig+0x192>
 8000cba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cbe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cca:	d10c      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x17a>
 8000ccc:	4b65      	ldr	r3, [pc, #404]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a64      	ldr	r2, [pc, #400]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000cd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b62      	ldr	r3, [pc, #392]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a61      	ldr	r2, [pc, #388]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	e00b      	b.n	8000cfe <HAL_RCC_OscConfig+0x192>
 8000ce6:	4b5f      	ldr	r3, [pc, #380]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a5e      	ldr	r2, [pc, #376]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	4b5c      	ldr	r3, [pc, #368]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a5b      	ldr	r2, [pc, #364]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000cf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cfc:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d054      	beq.n	8000db8 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fc6b 	bl	80005e8 <HAL_GetTick>
 8000d12:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d16:	e00a      	b.n	8000d2e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d18:	f7ff fc66 	bl	80005e8 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b64      	cmp	r3, #100	@ 0x64
 8000d26:	d902      	bls.n	8000d2e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	f000 bf3c 	b.w	8001ba6 <HAL_RCC_OscConfig+0x103a>
 8000d2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d32:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d36:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000d3a:	fa93 f3a3 	rbit	r3, r3
 8000d3e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000d42:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d46:	fab3 f383 	clz	r3, r3
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d4e:	d802      	bhi.n	8000d56 <HAL_RCC_OscConfig+0x1ea>
 8000d50:	4b44      	ldr	r3, [pc, #272]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	e015      	b.n	8000d82 <HAL_RCC_OscConfig+0x216>
 8000d56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d5a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000d62:	fa93 f3a3 	rbit	r3, r3
 8000d66:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000d6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d6e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000d72:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000d76:	fa93 f3a3 	rbit	r3, r3
 8000d7a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000d7e:	4b39      	ldr	r3, [pc, #228]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d86:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000d8a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000d8e:	fa92 f2a2 	rbit	r2, r2
 8000d92:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000d96:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000d9a:	fab2 f282 	clz	r2, r2
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	f042 0220 	orr.w	r2, r2, #32
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	f002 021f 	and.w	r2, r2, #31
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	4013      	ands	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0b0      	beq.n	8000d18 <HAL_RCC_OscConfig+0x1ac>
 8000db6:	e058      	b.n	8000e6a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db8:	f7ff fc16 	bl	80005e8 <HAL_GetTick>
 8000dbc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc0:	e00a      	b.n	8000dd8 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc2:	f7ff fc11 	bl	80005e8 <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b64      	cmp	r3, #100	@ 0x64
 8000dd0:	d902      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	f000 bee7 	b.w	8001ba6 <HAL_RCC_OscConfig+0x103a>
 8000dd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ddc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000de4:	fa93 f3a3 	rbit	r3, r3
 8000de8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000dec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df0:	fab3 f383 	clz	r3, r3
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000df8:	d802      	bhi.n	8000e00 <HAL_RCC_OscConfig+0x294>
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	e015      	b.n	8000e2c <HAL_RCC_OscConfig+0x2c0>
 8000e00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e04:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e08:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000e0c:	fa93 f3a3 	rbit	r3, r3
 8000e10:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000e14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e18:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000e1c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000e20:	fa93 f3a3 	rbit	r3, r3
 8000e24:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000e28:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <HAL_RCC_OscConfig+0x2f8>)
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e2c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e30:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000e34:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000e38:	fa92 f2a2 	rbit	r2, r2
 8000e3c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000e40:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000e44:	fab2 f282 	clz	r2, r2
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	f042 0220 	orr.w	r2, r2, #32
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	f002 021f 	and.w	r2, r2, #31
 8000e54:	2101      	movs	r1, #1
 8000e56:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1b0      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x256>
 8000e60:	e003      	b.n	8000e6a <HAL_RCC_OscConfig+0x2fe>
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 816d 	beq.w	800115a <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e80:	4bcd      	ldr	r3, [pc, #820]	@ (80011b8 <HAL_RCC_OscConfig+0x64c>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 030c 	and.w	r3, r3, #12
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00c      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e8c:	4bca      	ldr	r3, [pc, #808]	@ (80011b8 <HAL_RCC_OscConfig+0x64c>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 030c 	and.w	r3, r3, #12
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d16e      	bne.n	8000f76 <HAL_RCC_OscConfig+0x40a>
 8000e98:	4bc7      	ldr	r3, [pc, #796]	@ (80011b8 <HAL_RCC_OscConfig+0x64c>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000ea4:	d167      	bne.n	8000f76 <HAL_RCC_OscConfig+0x40a>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eac:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000eb0:	fa93 f3a3 	rbit	r3, r3
 8000eb4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8000eb8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ebc:	fab3 f383 	clz	r3, r3
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ec4:	d802      	bhi.n	8000ecc <HAL_RCC_OscConfig+0x360>
 8000ec6:	4bbc      	ldr	r3, [pc, #752]	@ (80011b8 <HAL_RCC_OscConfig+0x64c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	e013      	b.n	8000ef4 <HAL_RCC_OscConfig+0x388>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000ed6:	fa93 f3a3 	rbit	r3, r3
 8000eda:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000ee4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000ef0:	4bb1      	ldr	r3, [pc, #708]	@ (80011b8 <HAL_RCC_OscConfig+0x64c>)
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8000efa:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000efe:	fa92 f2a2 	rbit	r2, r2
 8000f02:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8000f06:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000f0a:	fab2 f282 	clz	r2, r2
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	f042 0220 	orr.w	r2, r2, #32
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	f002 021f 	and.w	r2, r2, #31
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f20:	4013      	ands	r3, r2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00a      	beq.n	8000f3c <HAL_RCC_OscConfig+0x3d0>
 8000f26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d002      	beq.n	8000f3c <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	f000 be35 	b.w	8001ba6 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3c:	4b9e      	ldr	r3, [pc, #632]	@ (80011b8 <HAL_RCC_OscConfig+0x64c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	21f8      	movs	r1, #248	@ 0xf8
 8000f52:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8000f5a:	fa91 f1a1 	rbit	r1, r1
 8000f5e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8000f62:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000f66:	fab1 f181 	clz	r1, r1
 8000f6a:	b2c9      	uxtb	r1, r1
 8000f6c:	408b      	lsls	r3, r1
 8000f6e:	4992      	ldr	r1, [pc, #584]	@ (80011b8 <HAL_RCC_OscConfig+0x64c>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f74:	e0f1      	b.n	800115a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8083 	beq.w	800108e <HAL_RCC_OscConfig+0x522>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8000f9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f9e:	fab3 f383 	clz	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000fa8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fb18 	bl	80005e8 <HAL_GetTick>
 8000fb8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fbc:	e00a      	b.n	8000fd4 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fb13 	bl	80005e8 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d902      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f000 bde9 	b.w	8001ba6 <HAL_RCC_OscConfig+0x103a>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fda:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000fde:	fa93 f3a3 	rbit	r3, r3
 8000fe2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8000fe6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fea:	fab3 f383 	clz	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ff2:	d802      	bhi.n	8000ffa <HAL_RCC_OscConfig+0x48e>
 8000ff4:	4b70      	ldr	r3, [pc, #448]	@ (80011b8 <HAL_RCC_OscConfig+0x64c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	e013      	b.n	8001022 <HAL_RCC_OscConfig+0x4b6>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800100c:	2302      	movs	r3, #2
 800100e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001012:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001016:	fa93 f3a3 	rbit	r3, r3
 800101a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800101e:	4b66      	ldr	r3, [pc, #408]	@ (80011b8 <HAL_RCC_OscConfig+0x64c>)
 8001020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001022:	2202      	movs	r2, #2
 8001024:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001028:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800102c:	fa92 f2a2 	rbit	r2, r2
 8001030:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001034:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001038:	fab2 f282 	clz	r2, r2
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	f042 0220 	orr.w	r2, r2, #32
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	f002 021f 	and.w	r2, r2, #31
 8001048:	2101      	movs	r1, #1
 800104a:	fa01 f202 	lsl.w	r2, r1, r2
 800104e:	4013      	ands	r3, r2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0b4      	beq.n	8000fbe <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001054:	4b58      	ldr	r3, [pc, #352]	@ (80011b8 <HAL_RCC_OscConfig+0x64c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800105c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001060:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	21f8      	movs	r1, #248	@ 0xf8
 800106a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001072:	fa91 f1a1 	rbit	r1, r1
 8001076:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800107a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800107e:	fab1 f181 	clz	r1, r1
 8001082:	b2c9      	uxtb	r1, r1
 8001084:	408b      	lsls	r3, r1
 8001086:	494c      	ldr	r1, [pc, #304]	@ (80011b8 <HAL_RCC_OscConfig+0x64c>)
 8001088:	4313      	orrs	r3, r2
 800108a:	600b      	str	r3, [r1, #0]
 800108c:	e065      	b.n	800115a <HAL_RCC_OscConfig+0x5ee>
 800108e:	2301      	movs	r3, #1
 8001090:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001094:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001098:	fa93 f3a3 	rbit	r3, r3
 800109c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80010a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a4:	fab3 f383 	clz	r3, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80010ae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	461a      	mov	r2, r3
 80010b6:	2300      	movs	r3, #0
 80010b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ba:	f7ff fa95 	bl	80005e8 <HAL_GetTick>
 80010be:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c2:	e00a      	b.n	80010da <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c4:	f7ff fa90 	bl	80005e8 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d902      	bls.n	80010da <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	f000 bd66 	b.w	8001ba6 <HAL_RCC_OscConfig+0x103a>
 80010da:	2302      	movs	r3, #2
 80010dc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80010e4:	fa93 f3a3 	rbit	r3, r3
 80010e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80010ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f0:	fab3 f383 	clz	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80010f8:	d802      	bhi.n	8001100 <HAL_RCC_OscConfig+0x594>
 80010fa:	4b2f      	ldr	r3, [pc, #188]	@ (80011b8 <HAL_RCC_OscConfig+0x64c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	e013      	b.n	8001128 <HAL_RCC_OscConfig+0x5bc>
 8001100:	2302      	movs	r3, #2
 8001102:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001112:	2302      	movs	r3, #2
 8001114:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001118:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800111c:	fa93 f3a3 	rbit	r3, r3
 8001120:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001124:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <HAL_RCC_OscConfig+0x64c>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001128:	2202      	movs	r2, #2
 800112a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800112e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001132:	fa92 f2a2 	rbit	r2, r2
 8001136:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800113a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800113e:	fab2 f282 	clz	r2, r2
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	f042 0220 	orr.w	r2, r2, #32
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	f002 021f 	and.w	r2, r2, #31
 800114e:	2101      	movs	r1, #1
 8001150:	fa01 f202 	lsl.w	r2, r1, r2
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1b4      	bne.n	80010c4 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800115a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800115e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 8119 	beq.w	80013a2 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001170:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001174:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 8082 	beq.w	8001286 <HAL_RCC_OscConfig+0x71a>
 8001182:	2301      	movs	r3, #1
 8001184:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800118c:	fa93 f3a3 	rbit	r3, r3
 8001190:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001194:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001198:	fab3 f383 	clz	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_RCC_OscConfig+0x650>)
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	461a      	mov	r2, r3
 80011a8:	2301      	movs	r3, #1
 80011aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ac:	f7ff fa1c 	bl	80005e8 <HAL_GetTick>
 80011b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b4:	e00f      	b.n	80011d6 <HAL_RCC_OscConfig+0x66a>
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c0:	f7ff fa12 	bl	80005e8 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d902      	bls.n	80011d6 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	f000 bce8 	b.w	8001ba6 <HAL_RCC_OscConfig+0x103a>
 80011d6:	2302      	movs	r3, #2
 80011d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80011e0:	fa93 f2a3 	rbit	r2, r3
 80011e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011f6:	2202      	movs	r2, #2
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	fa93 f2a3 	rbit	r2, r3
 8001208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800120c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001216:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800121a:	2202      	movs	r2, #2
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001222:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	fa93 f2a3 	rbit	r2, r3
 800122c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001230:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001234:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	4bb0      	ldr	r3, [pc, #704]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 8001238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800123a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800123e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001242:	2102      	movs	r1, #2
 8001244:	6019      	str	r1, [r3, #0]
 8001246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800124a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	fa93 f1a3 	rbit	r1, r3
 8001254:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001258:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800125c:	6019      	str	r1, [r3, #0]
  return result;
 800125e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001262:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	fab3 f383 	clz	r3, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f003 031f 	and.w	r3, r3, #31
 8001278:	2101      	movs	r1, #1
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d09d      	beq.n	80011c0 <HAL_RCC_OscConfig+0x654>
 8001284:	e08d      	b.n	80013a2 <HAL_RCC_OscConfig+0x836>
 8001286:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800128a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800128e:	2201      	movs	r2, #1
 8001290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001296:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	fa93 f2a3 	rbit	r2, r3
 80012a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012a4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80012a8:	601a      	str	r2, [r3, #0]
  return result;
 80012aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80012b2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b4:	fab3 f383 	clz	r3, r3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b8f      	ldr	r3, [pc, #572]	@ (80014fc <HAL_RCC_OscConfig+0x990>)
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	461a      	mov	r2, r3
 80012c4:	2300      	movs	r3, #0
 80012c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c8:	f7ff f98e 	bl	80005e8 <HAL_GetTick>
 80012cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	e00a      	b.n	80012e8 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d2:	f7ff f989 	bl	80005e8 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d902      	bls.n	80012e8 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	f000 bc5f 	b.w	8001ba6 <HAL_RCC_OscConfig+0x103a>
 80012e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012f0:	2202      	movs	r2, #2
 80012f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	fa93 f2a3 	rbit	r2, r3
 8001302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001306:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001310:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001314:	2202      	movs	r2, #2
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800131c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	fa93 f2a3 	rbit	r2, r3
 8001326:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800132a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001334:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001338:	2202      	movs	r2, #2
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001340:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	fa93 f2a3 	rbit	r2, r3
 800134a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800134e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001352:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001354:	4b68      	ldr	r3, [pc, #416]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 8001356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001358:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800135c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001360:	2102      	movs	r1, #2
 8001362:	6019      	str	r1, [r3, #0]
 8001364:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001368:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	fa93 f1a3 	rbit	r1, r3
 8001372:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001376:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800137a:	6019      	str	r1, [r3, #0]
  return result;
 800137c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001380:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	fab3 f383 	clz	r3, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	2101      	movs	r1, #1
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	4013      	ands	r3, r2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d197      	bne.n	80012d2 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 819c 	beq.w	80016f0 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013be:	4b4e      	ldr	r3, [pc, #312]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	4b4b      	ldr	r3, [pc, #300]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a4a      	ldr	r2, [pc, #296]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b48      	ldr	r3, [pc, #288]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80013de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013f0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013f2:	2301      	movs	r3, #1
 80013f4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	4b41      	ldr	r3, [pc, #260]	@ (8001500 <HAL_RCC_OscConfig+0x994>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001400:	2b00      	cmp	r3, #0
 8001402:	d11a      	bne.n	800143a <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001404:	4b3e      	ldr	r3, [pc, #248]	@ (8001500 <HAL_RCC_OscConfig+0x994>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a3d      	ldr	r2, [pc, #244]	@ (8001500 <HAL_RCC_OscConfig+0x994>)
 800140a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800140e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001410:	f7ff f8ea 	bl	80005e8 <HAL_GetTick>
 8001414:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	e009      	b.n	800142e <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141a:	f7ff f8e5 	bl	80005e8 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	@ 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e3bb      	b.n	8001ba6 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142e:	4b34      	ldr	r3, [pc, #208]	@ (8001500 <HAL_RCC_OscConfig+0x994>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0ef      	beq.n	800141a <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800143e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d106      	bne.n	8001458 <HAL_RCC_OscConfig+0x8ec>
 800144a:	4b2b      	ldr	r3, [pc, #172]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	4a2a      	ldr	r2, [pc, #168]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6213      	str	r3, [r2, #32]
 8001456:	e035      	b.n	80014c4 <HAL_RCC_OscConfig+0x958>
 8001458:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800145c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x916>
 8001468:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4a22      	ldr	r2, [pc, #136]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 800146e:	f023 0301 	bic.w	r3, r3, #1
 8001472:	6213      	str	r3, [r2, #32]
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a1f      	ldr	r2, [pc, #124]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 800147a:	f023 0304 	bic.w	r3, r3, #4
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	e020      	b.n	80014c4 <HAL_RCC_OscConfig+0x958>
 8001482:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001486:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b05      	cmp	r3, #5
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x940>
 8001492:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4a18      	ldr	r2, [pc, #96]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6213      	str	r3, [r2, #32]
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	4a15      	ldr	r2, [pc, #84]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6213      	str	r3, [r2, #32]
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0x958>
 80014ac:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a11      	ldr	r2, [pc, #68]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a0e      	ldr	r2, [pc, #56]	@ (80014f8 <HAL_RCC_OscConfig+0x98c>)
 80014be:	f023 0304 	bic.w	r3, r3, #4
 80014c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 8085 	beq.w	80015e0 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff f887 	bl	80005e8 <HAL_GetTick>
 80014da:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014de:	e011      	b.n	8001504 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e0:	f7ff f882 	bl	80005e8 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d907      	bls.n	8001504 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e356      	b.n	8001ba6 <HAL_RCC_OscConfig+0x103a>
 80014f8:	40021000 	.word	0x40021000
 80014fc:	10908120 	.word	0x10908120
 8001500:	40007000 	.word	0x40007000
 8001504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001508:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800150c:	2202      	movs	r2, #2
 800150e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001514:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	fa93 f2a3 	rbit	r2, r3
 800151e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001522:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001530:	2202      	movs	r2, #2
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001538:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	fa93 f2a3 	rbit	r2, r3
 8001542:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001546:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800154a:	601a      	str	r2, [r3, #0]
  return result;
 800154c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001550:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001554:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <HAL_RCC_OscConfig+0xa00>
 8001566:	4b98      	ldr	r3, [pc, #608]	@ (80017c8 <HAL_RCC_OscConfig+0xc5c>)
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	e013      	b.n	8001594 <HAL_RCC_OscConfig+0xa28>
 800156c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001570:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001574:	2202      	movs	r2, #2
 8001576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001578:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800157c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	fa93 f2a3 	rbit	r2, r3
 8001586:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800158a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	4b8d      	ldr	r3, [pc, #564]	@ (80017c8 <HAL_RCC_OscConfig+0xc5c>)
 8001592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001594:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001598:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800159c:	2102      	movs	r1, #2
 800159e:	6011      	str	r1, [r2, #0]
 80015a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015a4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	fa92 f1a2 	rbit	r1, r2
 80015ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015b2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80015b6:	6011      	str	r1, [r2, #0]
  return result;
 80015b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015bc:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	fab2 f282 	clz	r2, r2
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	f002 021f 	and.w	r2, r2, #31
 80015d2:	2101      	movs	r1, #1
 80015d4:	fa01 f202 	lsl.w	r2, r1, r2
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d080      	beq.n	80014e0 <HAL_RCC_OscConfig+0x974>
 80015de:	e07d      	b.n	80016dc <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff f802 	bl	80005e8 <HAL_GetTick>
 80015e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	e00b      	b.n	8001602 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f7fe fffd 	bl	80005e8 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e2d1      	b.n	8001ba6 <HAL_RCC_OscConfig+0x103a>
 8001602:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001606:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800160a:	2202      	movs	r2, #2
 800160c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001612:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	fa93 f2a3 	rbit	r2, r3
 800161c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001620:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800162a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800162e:	2202      	movs	r2, #2
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001636:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	fa93 f2a3 	rbit	r2, r3
 8001640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001644:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001648:	601a      	str	r2, [r3, #0]
  return result;
 800164a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800164e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001652:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <HAL_RCC_OscConfig+0xafe>
 8001664:	4b58      	ldr	r3, [pc, #352]	@ (80017c8 <HAL_RCC_OscConfig+0xc5c>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	e013      	b.n	8001692 <HAL_RCC_OscConfig+0xb26>
 800166a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800166e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001672:	2202      	movs	r2, #2
 8001674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800167a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	fa93 f2a3 	rbit	r2, r3
 8001684:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001688:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	4b4e      	ldr	r3, [pc, #312]	@ (80017c8 <HAL_RCC_OscConfig+0xc5c>)
 8001690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001692:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001696:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800169a:	2102      	movs	r1, #2
 800169c:	6011      	str	r1, [r2, #0]
 800169e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016a2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	fa92 f1a2 	rbit	r1, r2
 80016ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016b0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80016b4:	6011      	str	r1, [r2, #0]
  return result;
 80016b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016ba:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	fab2 f282 	clz	r2, r2
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	f002 021f 	and.w	r2, r2, #31
 80016d0:	2101      	movs	r1, #1
 80016d2:	fa01 f202 	lsl.w	r2, r1, r2
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d186      	bne.n	80015ea <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016dc:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d105      	bne.n	80016f0 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e4:	4b38      	ldr	r3, [pc, #224]	@ (80017c8 <HAL_RCC_OscConfig+0xc5c>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	4a37      	ldr	r2, [pc, #220]	@ (80017c8 <HAL_RCC_OscConfig+0xc5c>)
 80016ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8251 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001702:	4b31      	ldr	r3, [pc, #196]	@ (80017c8 <HAL_RCC_OscConfig+0xc5c>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b08      	cmp	r3, #8
 800170c:	f000 820f 	beq.w	8001b2e <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001710:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001714:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b02      	cmp	r3, #2
 800171e:	f040 8165 	bne.w	80019ec <HAL_RCC_OscConfig+0xe80>
 8001722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001726:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800172a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800172e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001734:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	fa93 f2a3 	rbit	r2, r3
 800173e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001742:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001746:	601a      	str	r2, [r3, #0]
  return result;
 8001748:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800174c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001750:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001752:	fab3 f383 	clz	r3, r3
 8001756:	b2db      	uxtb	r3, r3
 8001758:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800175c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	461a      	mov	r2, r3
 8001764:	2300      	movs	r3, #0
 8001766:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7fe ff3e 	bl	80005e8 <HAL_GetTick>
 800176c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001770:	e009      	b.n	8001786 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001772:	f7fe ff39 	bl	80005e8 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e20f      	b.n	8001ba6 <HAL_RCC_OscConfig+0x103a>
 8001786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800178a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800178e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001794:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001798:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	fa93 f2a3 	rbit	r2, r3
 80017a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80017aa:	601a      	str	r2, [r3, #0]
  return result;
 80017ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80017b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b6:	fab3 f383 	clz	r3, r3
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80017be:	d805      	bhi.n	80017cc <HAL_RCC_OscConfig+0xc60>
 80017c0:	4b01      	ldr	r3, [pc, #4]	@ (80017c8 <HAL_RCC_OscConfig+0xc5c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	e02a      	b.n	800181c <HAL_RCC_OscConfig+0xcb0>
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80017d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017de:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fa93 f2a3 	rbit	r2, r3
 80017e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ec:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80017fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001804:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	fa93 f2a3 	rbit	r2, r3
 800180e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001812:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	4bca      	ldr	r3, [pc, #808]	@ (8001b44 <HAL_RCC_OscConfig+0xfd8>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001820:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001824:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001828:	6011      	str	r1, [r2, #0]
 800182a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800182e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	fa92 f1a2 	rbit	r1, r2
 8001838:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800183c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001840:	6011      	str	r1, [r2, #0]
  return result;
 8001842:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001846:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	fab2 f282 	clz	r2, r2
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	f042 0220 	orr.w	r2, r2, #32
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	f002 021f 	and.w	r2, r2, #31
 800185c:	2101      	movs	r1, #1
 800185e:	fa01 f202 	lsl.w	r2, r1, r2
 8001862:	4013      	ands	r3, r2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d184      	bne.n	8001772 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001868:	4bb6      	ldr	r3, [pc, #728]	@ (8001b44 <HAL_RCC_OscConfig+0xfd8>)
 800186a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186c:	f023 020f 	bic.w	r2, r3, #15
 8001870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001874:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	49b1      	ldr	r1, [pc, #708]	@ (8001b44 <HAL_RCC_OscConfig+0xfd8>)
 800187e:	4313      	orrs	r3, r2
 8001880:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001882:	4bb0      	ldr	r3, [pc, #704]	@ (8001b44 <HAL_RCC_OscConfig+0xfd8>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800188a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6a19      	ldr	r1, [r3, #32]
 8001896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800189a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	430b      	orrs	r3, r1
 80018a4:	49a7      	ldr	r1, [pc, #668]	@ (8001b44 <HAL_RCC_OscConfig+0xfd8>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	604b      	str	r3, [r1, #4]
 80018aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ae:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80018b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018bc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	fa93 f2a3 	rbit	r2, r3
 80018c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80018ce:	601a      	str	r2, [r3, #0]
  return result;
 80018d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80018d8:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018da:	fab3 f383 	clz	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	461a      	mov	r2, r3
 80018ec:	2301      	movs	r3, #1
 80018ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7fe fe7a 	bl	80005e8 <HAL_GetTick>
 80018f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f8:	e009      	b.n	800190e <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fa:	f7fe fe75 	bl	80005e8 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e14b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x103a>
 800190e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001912:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001916:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800191a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001920:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	fa93 f2a3 	rbit	r2, r3
 800192a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001932:	601a      	str	r2, [r3, #0]
  return result;
 8001934:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001938:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800193c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b3f      	cmp	r3, #63	@ 0x3f
 8001946:	d802      	bhi.n	800194e <HAL_RCC_OscConfig+0xde2>
 8001948:	4b7e      	ldr	r3, [pc, #504]	@ (8001b44 <HAL_RCC_OscConfig+0xfd8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	e027      	b.n	800199e <HAL_RCC_OscConfig+0xe32>
 800194e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001952:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001956:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800195a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001960:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	fa93 f2a3 	rbit	r2, r3
 800196a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001978:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800197c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001986:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	fa93 f2a3 	rbit	r2, r3
 8001990:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001994:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b44 <HAL_RCC_OscConfig+0xfd8>)
 800199c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019a2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80019a6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80019aa:	6011      	str	r1, [r2, #0]
 80019ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019b0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	fa92 f1a2 	rbit	r1, r2
 80019ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019be:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80019c2:	6011      	str	r1, [r2, #0]
  return result;
 80019c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019c8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	fab2 f282 	clz	r2, r2
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	f042 0220 	orr.w	r2, r2, #32
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	f002 021f 	and.w	r2, r2, #31
 80019de:	2101      	movs	r1, #1
 80019e0:	fa01 f202 	lsl.w	r2, r1, r2
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d087      	beq.n	80018fa <HAL_RCC_OscConfig+0xd8e>
 80019ea:	e0db      	b.n	8001ba4 <HAL_RCC_OscConfig+0x1038>
 80019ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80019f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	fa93 f2a3 	rbit	r2, r3
 8001a08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a10:	601a      	str	r2, [r3, #0]
  return result;
 8001a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a16:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a1a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1c:	fab3 f383 	clz	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a26:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2300      	movs	r3, #0
 8001a30:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7fe fdd9 	bl	80005e8 <HAL_GetTick>
 8001a36:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3a:	e009      	b.n	8001a50 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7fe fdd4 	bl	80005e8 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e0aa      	b.n	8001ba6 <HAL_RCC_OscConfig+0x103a>
 8001a50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a54:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a62:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	fa93 f2a3 	rbit	r2, r3
 8001a6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a70:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a74:	601a      	str	r2, [r3, #0]
  return result;
 8001a76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a80:	fab3 f383 	clz	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a88:	d802      	bhi.n	8001a90 <HAL_RCC_OscConfig+0xf24>
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b44 <HAL_RCC_OscConfig+0xfd8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	e027      	b.n	8001ae0 <HAL_RCC_OscConfig+0xf74>
 8001a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a94:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001a98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	fa93 f2a3 	rbit	r2, r3
 8001aac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001abe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	fa93 f2a3 	rbit	r2, r3
 8001ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad6:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <HAL_RCC_OscConfig+0xfd8>)
 8001ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ae4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001ae8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001aec:	6011      	str	r1, [r2, #0]
 8001aee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001af2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	fa92 f1a2 	rbit	r1, r2
 8001afc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b00:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001b04:	6011      	str	r1, [r2, #0]
  return result;
 8001b06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b0a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	fab2 f282 	clz	r2, r2
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	f042 0220 	orr.w	r2, r2, #32
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	f002 021f 	and.w	r2, r2, #31
 8001b20:	2101      	movs	r1, #1
 8001b22:	fa01 f202 	lsl.w	r2, r1, r2
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d187      	bne.n	8001a3c <HAL_RCC_OscConfig+0xed0>
 8001b2c:	e03a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d104      	bne.n	8001b48 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e031      	b.n	8001ba6 <HAL_RCC_OscConfig+0x103a>
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b48:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <HAL_RCC_OscConfig+0x1044>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b50:	4b17      	ldr	r3, [pc, #92]	@ (8001bb0 <HAL_RCC_OscConfig+0x1044>)
 8001b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b54:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b5c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d117      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b74:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d10b      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b8c:	f003 020f 	and.w	r2, r3, #15
 8001b90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b09e      	sub	sp, #120	@ 0x78
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e154      	b.n	8001e76 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b89      	ldr	r3, [pc, #548]	@ (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b86      	ldr	r3, [pc, #536]	@ (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4984      	ldr	r1, [pc, #528]	@ (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b82      	ldr	r3, [pc, #520]	@ (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e13c      	b.n	8001e76 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b7b      	ldr	r3, [pc, #492]	@ (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4978      	ldr	r1, [pc, #480]	@ (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80cd 	beq.w	8001dc2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d137      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xec>
 8001c30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c34:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001c3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c48:	d802      	bhi.n	8001c50 <HAL_RCC_ClockConfig+0x9c>
 8001c4a:	4b6b      	ldr	r3, [pc, #428]	@ (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	e00f      	b.n	8001c70 <HAL_RCC_ClockConfig+0xbc>
 8001c50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c62:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c6c:	4b62      	ldr	r3, [pc, #392]	@ (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001c76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001c78:	fa92 f2a2 	rbit	r2, r2
 8001c7c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001c7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001c80:	fab2 f282 	clz	r2, r2
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	f042 0220 	orr.w	r2, r2, #32
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	f002 021f 	and.w	r2, r2, #31
 8001c90:	2101      	movs	r1, #1
 8001c92:	fa01 f202 	lsl.w	r2, r1, r2
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d171      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0ea      	b.n	8001e76 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d137      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x164>
 8001ca8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cb0:	fa93 f3a3 	rbit	r3, r3
 8001cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb8:	fab3 f383 	clz	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cc0:	d802      	bhi.n	8001cc8 <HAL_RCC_ClockConfig+0x114>
 8001cc2:	4b4d      	ldr	r3, [pc, #308]	@ (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	e00f      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x134>
 8001cc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ce4:	4b44      	ldr	r3, [pc, #272]	@ (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cec:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001cee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cf0:	fa92 f2a2 	rbit	r2, r2
 8001cf4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001cf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cf8:	fab2 f282 	clz	r2, r2
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	f042 0220 	orr.w	r2, r2, #32
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	f002 021f 	and.w	r2, r2, #31
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d135      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0ae      	b.n	8001e76 <HAL_RCC_ClockConfig+0x2c2>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d2e:	d802      	bhi.n	8001d36 <HAL_RCC_ClockConfig+0x182>
 8001d30:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	e00d      	b.n	8001d52 <HAL_RCC_ClockConfig+0x19e>
 8001d36:	2302      	movs	r3, #2
 8001d38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d3c:	fa93 f3a3 	rbit	r3, r3
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d42:	2302      	movs	r3, #2
 8001d44:	623b      	str	r3, [r7, #32]
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	2202      	movs	r2, #2
 8001d54:	61ba      	str	r2, [r7, #24]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	fa92 f2a2 	rbit	r2, r2
 8001d5c:	617a      	str	r2, [r7, #20]
  return result;
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	fab2 f282 	clz	r2, r2
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	f042 0220 	orr.w	r2, r2, #32
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	f002 021f 	and.w	r2, r2, #31
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e07a      	b.n	8001e76 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d80:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 0203 	bic.w	r2, r3, #3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	491a      	ldr	r1, [pc, #104]	@ (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d92:	f7fe fc29 	bl	80005e8 <HAL_GetTick>
 8001d96:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d98:	e00a      	b.n	8001db0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9a:	f7fe fc25 	bl	80005e8 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e062      	b.n	8001e76 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <HAL_RCC_ClockConfig+0x244>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 020c 	and.w	r2, r3, #12
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d1eb      	bne.n	8001d9a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d215      	bcs.n	8001dfc <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd0:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 0207 	bic.w	r2, r3, #7
 8001dd8:	4906      	ldr	r1, [pc, #24]	@ (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de0:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <HAL_RCC_ClockConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d006      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e041      	b.n	8001e76 <HAL_RCC_ClockConfig+0x2c2>
 8001df2:	bf00      	nop
 8001df4:	40022000 	.word	0x40022000
 8001df8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e08:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <HAL_RCC_ClockConfig+0x2cc>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	491a      	ldr	r1, [pc, #104]	@ (8001e80 <HAL_RCC_ClockConfig+0x2cc>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d009      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e26:	4b16      	ldr	r3, [pc, #88]	@ (8001e80 <HAL_RCC_ClockConfig+0x2cc>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4912      	ldr	r1, [pc, #72]	@ (8001e80 <HAL_RCC_ClockConfig+0x2cc>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e3a:	f000 f829 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
 8001e3e:	4601      	mov	r1, r0
 8001e40:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <HAL_RCC_ClockConfig+0x2cc>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e48:	22f0      	movs	r2, #240	@ 0xf0
 8001e4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	fa92 f2a2 	rbit	r2, r2
 8001e52:	60fa      	str	r2, [r7, #12]
  return result;
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	fab2 f282 	clz	r2, r2
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	40d3      	lsrs	r3, r2
 8001e5e:	4a09      	ldr	r2, [pc, #36]	@ (8001e84 <HAL_RCC_ClockConfig+0x2d0>)
 8001e60:	5cd3      	ldrb	r3, [r2, r3]
 8001e62:	fa21 f303 	lsr.w	r3, r1, r3
 8001e66:	4a08      	ldr	r2, [pc, #32]	@ (8001e88 <HAL_RCC_ClockConfig+0x2d4>)
 8001e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e6a:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <HAL_RCC_ClockConfig+0x2d8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fb76 	bl	8000560 <HAL_InitTick>
  
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3778      	adds	r7, #120	@ 0x78
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08002e38 	.word	0x08002e38
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000004 	.word	0x20000004

08001e90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d002      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x30>
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d003      	beq.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x36>
 8001ebe:	e029      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ec2:	613b      	str	r3, [r7, #16]
      break;
 8001ec4:	e029      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	0c9b      	lsrs	r3, r3, #18
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	4a18      	ldr	r2, [pc, #96]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001ed4:	4b14      	ldr	r3, [pc, #80]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	4a15      	ldr	r2, [pc, #84]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ede:	5cd3      	ldrb	r3, [r2, r3]
 8001ee0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001eec:	4a0f      	ldr	r2, [pc, #60]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	e007      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001efe:	4a0b      	ldr	r2, [pc, #44]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	613b      	str	r3, [r7, #16]
      break;
 8001f12:	e002      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f14:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f16:	613b      	str	r3, [r7, #16]
      break;
 8001f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1a:	693b      	ldr	r3, [r7, #16]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	007a1200 	.word	0x007a1200
 8001f30:	08002e48 	.word	0x08002e48
 8001f34:	08002e58 	.word	0x08002e58

08001f38 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e049      	b.n	8001fde <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe fa5e 	bl	8000420 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3304      	adds	r3, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	4610      	mov	r0, r2
 8001f78:	f000 fb32 	bl	80025e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d109      	bne.n	8002010 <HAL_TIM_OC_Start_IT+0x28>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b01      	cmp	r3, #1
 8002006:	bf14      	ite	ne
 8002008:	2301      	movne	r3, #1
 800200a:	2300      	moveq	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e03c      	b.n	800208a <HAL_TIM_OC_Start_IT+0xa2>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	2b04      	cmp	r3, #4
 8002014:	d109      	bne.n	800202a <HAL_TIM_OC_Start_IT+0x42>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b01      	cmp	r3, #1
 8002020:	bf14      	ite	ne
 8002022:	2301      	movne	r3, #1
 8002024:	2300      	moveq	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	e02f      	b.n	800208a <HAL_TIM_OC_Start_IT+0xa2>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b08      	cmp	r3, #8
 800202e:	d109      	bne.n	8002044 <HAL_TIM_OC_Start_IT+0x5c>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	bf14      	ite	ne
 800203c:	2301      	movne	r3, #1
 800203e:	2300      	moveq	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	e022      	b.n	800208a <HAL_TIM_OC_Start_IT+0xa2>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b0c      	cmp	r3, #12
 8002048:	d109      	bne.n	800205e <HAL_TIM_OC_Start_IT+0x76>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b01      	cmp	r3, #1
 8002054:	bf14      	ite	ne
 8002056:	2301      	movne	r3, #1
 8002058:	2300      	moveq	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	e015      	b.n	800208a <HAL_TIM_OC_Start_IT+0xa2>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b10      	cmp	r3, #16
 8002062:	d109      	bne.n	8002078 <HAL_TIM_OC_Start_IT+0x90>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b01      	cmp	r3, #1
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e008      	b.n	800208a <HAL_TIM_OC_Start_IT+0xa2>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b01      	cmp	r3, #1
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0ec      	b.n	800226c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d104      	bne.n	80020a2 <HAL_TIM_OC_Start_IT+0xba>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020a0:	e023      	b.n	80020ea <HAL_TIM_OC_Start_IT+0x102>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d104      	bne.n	80020b2 <HAL_TIM_OC_Start_IT+0xca>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020b0:	e01b      	b.n	80020ea <HAL_TIM_OC_Start_IT+0x102>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d104      	bne.n	80020c2 <HAL_TIM_OC_Start_IT+0xda>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020c0:	e013      	b.n	80020ea <HAL_TIM_OC_Start_IT+0x102>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b0c      	cmp	r3, #12
 80020c6:	d104      	bne.n	80020d2 <HAL_TIM_OC_Start_IT+0xea>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80020d0:	e00b      	b.n	80020ea <HAL_TIM_OC_Start_IT+0x102>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b10      	cmp	r3, #16
 80020d6:	d104      	bne.n	80020e2 <HAL_TIM_OC_Start_IT+0xfa>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020e0:	e003      	b.n	80020ea <HAL_TIM_OC_Start_IT+0x102>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2202      	movs	r2, #2
 80020e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2b0c      	cmp	r3, #12
 80020ee:	d841      	bhi.n	8002174 <HAL_TIM_OC_Start_IT+0x18c>
 80020f0:	a201      	add	r2, pc, #4	@ (adr r2, 80020f8 <HAL_TIM_OC_Start_IT+0x110>)
 80020f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f6:	bf00      	nop
 80020f8:	0800212d 	.word	0x0800212d
 80020fc:	08002175 	.word	0x08002175
 8002100:	08002175 	.word	0x08002175
 8002104:	08002175 	.word	0x08002175
 8002108:	0800213f 	.word	0x0800213f
 800210c:	08002175 	.word	0x08002175
 8002110:	08002175 	.word	0x08002175
 8002114:	08002175 	.word	0x08002175
 8002118:	08002151 	.word	0x08002151
 800211c:	08002175 	.word	0x08002175
 8002120:	08002175 	.word	0x08002175
 8002124:	08002175 	.word	0x08002175
 8002128:	08002163 	.word	0x08002163
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0202 	orr.w	r2, r2, #2
 800213a:	60da      	str	r2, [r3, #12]
      break;
 800213c:	e01d      	b.n	800217a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0204 	orr.w	r2, r2, #4
 800214c:	60da      	str	r2, [r3, #12]
      break;
 800214e:	e014      	b.n	800217a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0208 	orr.w	r2, r2, #8
 800215e:	60da      	str	r2, [r3, #12]
      break;
 8002160:	e00b      	b.n	800217a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0210 	orr.w	r2, r2, #16
 8002170:	60da      	str	r2, [r3, #12]
      break;
 8002172:	e002      	b.n	800217a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
      break;
 8002178:	bf00      	nop
  }

  if (status == HAL_OK)
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d174      	bne.n	800226a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2201      	movs	r2, #1
 8002186:	6839      	ldr	r1, [r7, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fdd9 	bl	8002d40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a38      	ldr	r2, [pc, #224]	@ (8002274 <HAL_TIM_OC_Start_IT+0x28c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d018      	beq.n	80021ca <HAL_TIM_OC_Start_IT+0x1e2>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a36      	ldr	r2, [pc, #216]	@ (8002278 <HAL_TIM_OC_Start_IT+0x290>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d013      	beq.n	80021ca <HAL_TIM_OC_Start_IT+0x1e2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a35      	ldr	r2, [pc, #212]	@ (800227c <HAL_TIM_OC_Start_IT+0x294>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d00e      	beq.n	80021ca <HAL_TIM_OC_Start_IT+0x1e2>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a33      	ldr	r2, [pc, #204]	@ (8002280 <HAL_TIM_OC_Start_IT+0x298>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d009      	beq.n	80021ca <HAL_TIM_OC_Start_IT+0x1e2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a32      	ldr	r2, [pc, #200]	@ (8002284 <HAL_TIM_OC_Start_IT+0x29c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d004      	beq.n	80021ca <HAL_TIM_OC_Start_IT+0x1e2>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a30      	ldr	r2, [pc, #192]	@ (8002288 <HAL_TIM_OC_Start_IT+0x2a0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d101      	bne.n	80021ce <HAL_TIM_OC_Start_IT+0x1e6>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <HAL_TIM_OC_Start_IT+0x1e8>
 80021ce:	2300      	movs	r3, #0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <HAL_TIM_OC_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a22      	ldr	r2, [pc, #136]	@ (8002274 <HAL_TIM_OC_Start_IT+0x28c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01d      	beq.n	800222a <HAL_TIM_OC_Start_IT+0x242>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f6:	d018      	beq.n	800222a <HAL_TIM_OC_Start_IT+0x242>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a23      	ldr	r2, [pc, #140]	@ (800228c <HAL_TIM_OC_Start_IT+0x2a4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_TIM_OC_Start_IT+0x242>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a22      	ldr	r2, [pc, #136]	@ (8002290 <HAL_TIM_OC_Start_IT+0x2a8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d00e      	beq.n	800222a <HAL_TIM_OC_Start_IT+0x242>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a19      	ldr	r2, [pc, #100]	@ (8002278 <HAL_TIM_OC_Start_IT+0x290>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d009      	beq.n	800222a <HAL_TIM_OC_Start_IT+0x242>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a18      	ldr	r2, [pc, #96]	@ (800227c <HAL_TIM_OC_Start_IT+0x294>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d004      	beq.n	800222a <HAL_TIM_OC_Start_IT+0x242>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a18      	ldr	r2, [pc, #96]	@ (8002288 <HAL_TIM_OC_Start_IT+0x2a0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d115      	bne.n	8002256 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	4b18      	ldr	r3, [pc, #96]	@ (8002294 <HAL_TIM_OC_Start_IT+0x2ac>)
 8002232:	4013      	ands	r3, r2
 8002234:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b06      	cmp	r3, #6
 800223a:	d015      	beq.n	8002268 <HAL_TIM_OC_Start_IT+0x280>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002242:	d011      	beq.n	8002268 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002254:	e008      	b.n	8002268 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e000      	b.n	800226a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002268:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40013400 	.word	0x40013400
 800227c:	40014000 	.word	0x40014000
 8002280:	40014400 	.word	0x40014400
 8002284:	40014800 	.word	0x40014800
 8002288:	40015000 	.word	0x40015000
 800228c:	40000400 	.word	0x40000400
 8002290:	40000800 	.word	0x40000800
 8002294:	00010007 	.word	0x00010007

08002298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d020      	beq.n	80022fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01b      	beq.n	80022fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0202 	mvn.w	r2, #2
 80022cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f95e 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 80022e8:	e005      	b.n	80022f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fd ff84 	bl	80001f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f961 	bl	80025b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b00      	cmp	r3, #0
 8002304:	d020      	beq.n	8002348 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01b      	beq.n	8002348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0204 	mvn.w	r2, #4
 8002318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2202      	movs	r2, #2
 800231e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f938 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 8002334:	e005      	b.n	8002342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7fd ff5e 	bl	80001f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f93b 	bl	80025b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d020      	beq.n	8002394 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01b      	beq.n	8002394 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0208 	mvn.w	r2, #8
 8002364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2204      	movs	r2, #4
 800236a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f912 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 8002380:	e005      	b.n	800238e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fd ff38 	bl	80001f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f915 	bl	80025b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	d020      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01b      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0210 	mvn.w	r2, #16
 80023b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2208      	movs	r2, #8
 80023b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f8ec 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 80023cc:	e005      	b.n	80023da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fd ff12 	bl	80001f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f8ef 	bl	80025b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00c      	beq.n	8002404 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0201 	mvn.w	r2, #1
 80023fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f8c6 	bl	8002590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00c      	beq.n	8002428 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fcbb 	bl	8002d9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00c      	beq.n	800244c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fcb3 	bl	8002db2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00c      	beq.n	8002470 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f8ae 	bl	80025cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00c      	beq.n	8002494 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0220 	mvn.w	r2, #32
 800248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fc7b 	bl	8002d8a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002494:	bf00      	nop
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_TIM_OC_ConfigChannel+0x1e>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e066      	b.n	8002588 <HAL_TIM_OC_ConfigChannel+0xec>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b14      	cmp	r3, #20
 80024c6:	d857      	bhi.n	8002578 <HAL_TIM_OC_ConfigChannel+0xdc>
 80024c8:	a201      	add	r2, pc, #4	@ (adr r2, 80024d0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	08002525 	.word	0x08002525
 80024d4:	08002579 	.word	0x08002579
 80024d8:	08002579 	.word	0x08002579
 80024dc:	08002579 	.word	0x08002579
 80024e0:	08002533 	.word	0x08002533
 80024e4:	08002579 	.word	0x08002579
 80024e8:	08002579 	.word	0x08002579
 80024ec:	08002579 	.word	0x08002579
 80024f0:	08002541 	.word	0x08002541
 80024f4:	08002579 	.word	0x08002579
 80024f8:	08002579 	.word	0x08002579
 80024fc:	08002579 	.word	0x08002579
 8002500:	0800254f 	.word	0x0800254f
 8002504:	08002579 	.word	0x08002579
 8002508:	08002579 	.word	0x08002579
 800250c:	08002579 	.word	0x08002579
 8002510:	0800255d 	.word	0x0800255d
 8002514:	08002579 	.word	0x08002579
 8002518:	08002579 	.word	0x08002579
 800251c:	08002579 	.word	0x08002579
 8002520:	0800256b 	.word	0x0800256b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f902 	bl	8002734 <TIM_OC1_SetConfig>
      break;
 8002530:	e025      	b.n	800257e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	4618      	mov	r0, r3
 800253a:	f000 f995 	bl	8002868 <TIM_OC2_SetConfig>
      break;
 800253e:	e01e      	b.n	800257e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fa22 	bl	8002990 <TIM_OC3_SetConfig>
      break;
 800254c:	e017      	b.n	800257e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	4618      	mov	r0, r3
 8002556:	f000 faad 	bl	8002ab4 <TIM_OC4_SetConfig>
      break;
 800255a:	e010      	b.n	800257e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fb16 	bl	8002b94 <TIM_OC5_SetConfig>
      break;
 8002568:	e009      	b.n	800257e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68b9      	ldr	r1, [r7, #8]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fb79 	bl	8002c68 <TIM_OC6_SetConfig>
      break;
 8002576:	e002      	b.n	800257e <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	75fb      	strb	r3, [r7, #23]
      break;
 800257c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002586:	7dfb      	ldrb	r3, [r7, #23]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a48      	ldr	r2, [pc, #288]	@ (8002714 <TIM_Base_SetConfig+0x134>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d013      	beq.n	8002620 <TIM_Base_SetConfig+0x40>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025fe:	d00f      	beq.n	8002620 <TIM_Base_SetConfig+0x40>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a45      	ldr	r2, [pc, #276]	@ (8002718 <TIM_Base_SetConfig+0x138>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d00b      	beq.n	8002620 <TIM_Base_SetConfig+0x40>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a44      	ldr	r2, [pc, #272]	@ (800271c <TIM_Base_SetConfig+0x13c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d007      	beq.n	8002620 <TIM_Base_SetConfig+0x40>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a43      	ldr	r2, [pc, #268]	@ (8002720 <TIM_Base_SetConfig+0x140>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d003      	beq.n	8002620 <TIM_Base_SetConfig+0x40>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a42      	ldr	r2, [pc, #264]	@ (8002724 <TIM_Base_SetConfig+0x144>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d108      	bne.n	8002632 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a37      	ldr	r2, [pc, #220]	@ (8002714 <TIM_Base_SetConfig+0x134>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01f      	beq.n	800267a <TIM_Base_SetConfig+0x9a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002640:	d01b      	beq.n	800267a <TIM_Base_SetConfig+0x9a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a34      	ldr	r2, [pc, #208]	@ (8002718 <TIM_Base_SetConfig+0x138>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d017      	beq.n	800267a <TIM_Base_SetConfig+0x9a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a33      	ldr	r2, [pc, #204]	@ (800271c <TIM_Base_SetConfig+0x13c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <TIM_Base_SetConfig+0x9a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a32      	ldr	r2, [pc, #200]	@ (8002720 <TIM_Base_SetConfig+0x140>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00f      	beq.n	800267a <TIM_Base_SetConfig+0x9a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a32      	ldr	r2, [pc, #200]	@ (8002728 <TIM_Base_SetConfig+0x148>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00b      	beq.n	800267a <TIM_Base_SetConfig+0x9a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a31      	ldr	r2, [pc, #196]	@ (800272c <TIM_Base_SetConfig+0x14c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d007      	beq.n	800267a <TIM_Base_SetConfig+0x9a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a30      	ldr	r2, [pc, #192]	@ (8002730 <TIM_Base_SetConfig+0x150>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d003      	beq.n	800267a <TIM_Base_SetConfig+0x9a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a2b      	ldr	r2, [pc, #172]	@ (8002724 <TIM_Base_SetConfig+0x144>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d108      	bne.n	800268c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a18      	ldr	r2, [pc, #96]	@ (8002714 <TIM_Base_SetConfig+0x134>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d013      	beq.n	80026e0 <TIM_Base_SetConfig+0x100>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a19      	ldr	r2, [pc, #100]	@ (8002720 <TIM_Base_SetConfig+0x140>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d00f      	beq.n	80026e0 <TIM_Base_SetConfig+0x100>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a19      	ldr	r2, [pc, #100]	@ (8002728 <TIM_Base_SetConfig+0x148>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d00b      	beq.n	80026e0 <TIM_Base_SetConfig+0x100>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a18      	ldr	r2, [pc, #96]	@ (800272c <TIM_Base_SetConfig+0x14c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d007      	beq.n	80026e0 <TIM_Base_SetConfig+0x100>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a17      	ldr	r2, [pc, #92]	@ (8002730 <TIM_Base_SetConfig+0x150>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d003      	beq.n	80026e0 <TIM_Base_SetConfig+0x100>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a12      	ldr	r2, [pc, #72]	@ (8002724 <TIM_Base_SetConfig+0x144>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d103      	bne.n	80026e8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d105      	bne.n	8002706 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f023 0201 	bic.w	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	611a      	str	r2, [r3, #16]
  }
}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40012c00 	.word	0x40012c00
 8002718:	40000400 	.word	0x40000400
 800271c:	40000800 	.word	0x40000800
 8002720:	40013400 	.word	0x40013400
 8002724:	40015000 	.word	0x40015000
 8002728:	40014000 	.word	0x40014000
 800272c:	40014400 	.word	0x40014400
 8002730:	40014800 	.word	0x40014800

08002734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f023 0201 	bic.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0303 	bic.w	r3, r3, #3
 800276e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f023 0302 	bic.w	r3, r3, #2
 8002780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a30      	ldr	r2, [pc, #192]	@ (8002850 <TIM_OC1_SetConfig+0x11c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d013      	beq.n	80027bc <TIM_OC1_SetConfig+0x88>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a2f      	ldr	r2, [pc, #188]	@ (8002854 <TIM_OC1_SetConfig+0x120>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00f      	beq.n	80027bc <TIM_OC1_SetConfig+0x88>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a2e      	ldr	r2, [pc, #184]	@ (8002858 <TIM_OC1_SetConfig+0x124>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00b      	beq.n	80027bc <TIM_OC1_SetConfig+0x88>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a2d      	ldr	r2, [pc, #180]	@ (800285c <TIM_OC1_SetConfig+0x128>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <TIM_OC1_SetConfig+0x88>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002860 <TIM_OC1_SetConfig+0x12c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d003      	beq.n	80027bc <TIM_OC1_SetConfig+0x88>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002864 <TIM_OC1_SetConfig+0x130>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d10c      	bne.n	80027d6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0308 	bic.w	r3, r3, #8
 80027c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002850 <TIM_OC1_SetConfig+0x11c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <TIM_OC1_SetConfig+0xd2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002854 <TIM_OC1_SetConfig+0x120>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00f      	beq.n	8002806 <TIM_OC1_SetConfig+0xd2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002858 <TIM_OC1_SetConfig+0x124>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00b      	beq.n	8002806 <TIM_OC1_SetConfig+0xd2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a1a      	ldr	r2, [pc, #104]	@ (800285c <TIM_OC1_SetConfig+0x128>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <TIM_OC1_SetConfig+0xd2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a19      	ldr	r2, [pc, #100]	@ (8002860 <TIM_OC1_SetConfig+0x12c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d003      	beq.n	8002806 <TIM_OC1_SetConfig+0xd2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a18      	ldr	r2, [pc, #96]	@ (8002864 <TIM_OC1_SetConfig+0x130>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d111      	bne.n	800282a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800280c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	621a      	str	r2, [r3, #32]
}
 8002844:	bf00      	nop
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40012c00 	.word	0x40012c00
 8002854:	40013400 	.word	0x40013400
 8002858:	40014000 	.word	0x40014000
 800285c:	40014400 	.word	0x40014400
 8002860:	40014800 	.word	0x40014800
 8002864:	40015000 	.word	0x40015000

08002868 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	f023 0210 	bic.w	r2, r3, #16
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800289a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f023 0320 	bic.w	r3, r3, #32
 80028b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002978 <TIM_OC2_SetConfig+0x110>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d007      	beq.n	80028dc <TIM_OC2_SetConfig+0x74>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a2b      	ldr	r2, [pc, #172]	@ (800297c <TIM_OC2_SetConfig+0x114>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d003      	beq.n	80028dc <TIM_OC2_SetConfig+0x74>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002980 <TIM_OC2_SetConfig+0x118>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d10d      	bne.n	80028f8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002978 <TIM_OC2_SetConfig+0x110>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <TIM_OC2_SetConfig+0xc0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a1e      	ldr	r2, [pc, #120]	@ (800297c <TIM_OC2_SetConfig+0x114>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00f      	beq.n	8002928 <TIM_OC2_SetConfig+0xc0>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a1e      	ldr	r2, [pc, #120]	@ (8002984 <TIM_OC2_SetConfig+0x11c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00b      	beq.n	8002928 <TIM_OC2_SetConfig+0xc0>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a1d      	ldr	r2, [pc, #116]	@ (8002988 <TIM_OC2_SetConfig+0x120>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <TIM_OC2_SetConfig+0xc0>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a1c      	ldr	r2, [pc, #112]	@ (800298c <TIM_OC2_SetConfig+0x124>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d003      	beq.n	8002928 <TIM_OC2_SetConfig+0xc0>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a17      	ldr	r2, [pc, #92]	@ (8002980 <TIM_OC2_SetConfig+0x118>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d113      	bne.n	8002950 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800292e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002936:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	621a      	str	r2, [r3, #32]
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40013400 	.word	0x40013400
 8002980:	40015000 	.word	0x40015000
 8002984:	40014000 	.word	0x40014000
 8002988:	40014400 	.word	0x40014400
 800298c:	40014800 	.word	0x40014800

08002990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a2b      	ldr	r2, [pc, #172]	@ (8002a9c <TIM_OC3_SetConfig+0x10c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <TIM_OC3_SetConfig+0x72>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a2a      	ldr	r2, [pc, #168]	@ (8002aa0 <TIM_OC3_SetConfig+0x110>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d003      	beq.n	8002a02 <TIM_OC3_SetConfig+0x72>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a29      	ldr	r2, [pc, #164]	@ (8002aa4 <TIM_OC3_SetConfig+0x114>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10d      	bne.n	8002a1e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	021b      	lsls	r3, r3, #8
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a1c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a1e      	ldr	r2, [pc, #120]	@ (8002a9c <TIM_OC3_SetConfig+0x10c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <TIM_OC3_SetConfig+0xbe>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa0 <TIM_OC3_SetConfig+0x110>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00f      	beq.n	8002a4e <TIM_OC3_SetConfig+0xbe>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa8 <TIM_OC3_SetConfig+0x118>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00b      	beq.n	8002a4e <TIM_OC3_SetConfig+0xbe>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a1c      	ldr	r2, [pc, #112]	@ (8002aac <TIM_OC3_SetConfig+0x11c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <TIM_OC3_SetConfig+0xbe>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab0 <TIM_OC3_SetConfig+0x120>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d003      	beq.n	8002a4e <TIM_OC3_SetConfig+0xbe>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a16      	ldr	r2, [pc, #88]	@ (8002aa4 <TIM_OC3_SetConfig+0x114>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d113      	bne.n	8002a76 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	621a      	str	r2, [r3, #32]
}
 8002a90:	bf00      	nop
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	40013400 	.word	0x40013400
 8002aa4:	40015000 	.word	0x40015000
 8002aa8:	40014000 	.word	0x40014000
 8002aac:	40014400 	.word	0x40014400
 8002ab0:	40014800 	.word	0x40014800

08002ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	031b      	lsls	r3, r3, #12
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a1a      	ldr	r2, [pc, #104]	@ (8002b7c <TIM_OC4_SetConfig+0xc8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d013      	beq.n	8002b40 <TIM_OC4_SetConfig+0x8c>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a19      	ldr	r2, [pc, #100]	@ (8002b80 <TIM_OC4_SetConfig+0xcc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00f      	beq.n	8002b40 <TIM_OC4_SetConfig+0x8c>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a18      	ldr	r2, [pc, #96]	@ (8002b84 <TIM_OC4_SetConfig+0xd0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00b      	beq.n	8002b40 <TIM_OC4_SetConfig+0x8c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a17      	ldr	r2, [pc, #92]	@ (8002b88 <TIM_OC4_SetConfig+0xd4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d007      	beq.n	8002b40 <TIM_OC4_SetConfig+0x8c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a16      	ldr	r2, [pc, #88]	@ (8002b8c <TIM_OC4_SetConfig+0xd8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d003      	beq.n	8002b40 <TIM_OC4_SetConfig+0x8c>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a15      	ldr	r2, [pc, #84]	@ (8002b90 <TIM_OC4_SetConfig+0xdc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d109      	bne.n	8002b54 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	019b      	lsls	r3, r3, #6
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	621a      	str	r2, [r3, #32]
}
 8002b6e:	bf00      	nop
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40013400 	.word	0x40013400
 8002b84:	40014000 	.word	0x40014000
 8002b88:	40014400 	.word	0x40014400
 8002b8c:	40014800 	.word	0x40014800
 8002b90:	40015000 	.word	0x40015000

08002b94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002bd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a19      	ldr	r2, [pc, #100]	@ (8002c50 <TIM_OC5_SetConfig+0xbc>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d013      	beq.n	8002c16 <TIM_OC5_SetConfig+0x82>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a18      	ldr	r2, [pc, #96]	@ (8002c54 <TIM_OC5_SetConfig+0xc0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00f      	beq.n	8002c16 <TIM_OC5_SetConfig+0x82>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a17      	ldr	r2, [pc, #92]	@ (8002c58 <TIM_OC5_SetConfig+0xc4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00b      	beq.n	8002c16 <TIM_OC5_SetConfig+0x82>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a16      	ldr	r2, [pc, #88]	@ (8002c5c <TIM_OC5_SetConfig+0xc8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <TIM_OC5_SetConfig+0x82>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a15      	ldr	r2, [pc, #84]	@ (8002c60 <TIM_OC5_SetConfig+0xcc>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d003      	beq.n	8002c16 <TIM_OC5_SetConfig+0x82>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a14      	ldr	r2, [pc, #80]	@ (8002c64 <TIM_OC5_SetConfig+0xd0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d109      	bne.n	8002c2a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	621a      	str	r2, [r3, #32]
}
 8002c44:	bf00      	nop
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	40012c00 	.word	0x40012c00
 8002c54:	40013400 	.word	0x40013400
 8002c58:	40014000 	.word	0x40014000
 8002c5c:	40014400 	.word	0x40014400
 8002c60:	40014800 	.word	0x40014800
 8002c64:	40015000 	.word	0x40015000

08002c68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	051b      	lsls	r3, r3, #20
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8002d28 <TIM_OC6_SetConfig+0xc0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d013      	beq.n	8002cec <TIM_OC6_SetConfig+0x84>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a19      	ldr	r2, [pc, #100]	@ (8002d2c <TIM_OC6_SetConfig+0xc4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00f      	beq.n	8002cec <TIM_OC6_SetConfig+0x84>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a18      	ldr	r2, [pc, #96]	@ (8002d30 <TIM_OC6_SetConfig+0xc8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d00b      	beq.n	8002cec <TIM_OC6_SetConfig+0x84>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a17      	ldr	r2, [pc, #92]	@ (8002d34 <TIM_OC6_SetConfig+0xcc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d007      	beq.n	8002cec <TIM_OC6_SetConfig+0x84>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a16      	ldr	r2, [pc, #88]	@ (8002d38 <TIM_OC6_SetConfig+0xd0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d003      	beq.n	8002cec <TIM_OC6_SetConfig+0x84>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a15      	ldr	r2, [pc, #84]	@ (8002d3c <TIM_OC6_SetConfig+0xd4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d109      	bne.n	8002d00 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	029b      	lsls	r3, r3, #10
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	621a      	str	r2, [r3, #32]
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40013400 	.word	0x40013400
 8002d30:	40014000 	.word	0x40014000
 8002d34:	40014400 	.word	0x40014400
 8002d38:	40014800 	.word	0x40014800
 8002d3c:	40015000 	.word	0x40015000

08002d40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	2201      	movs	r2, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1a      	ldr	r2, [r3, #32]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	401a      	ands	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	621a      	str	r2, [r3, #32]
}
 8002d7e:	bf00      	nop
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <memset>:
 8002dc6:	4402      	add	r2, r0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d100      	bne.n	8002dd0 <memset+0xa>
 8002dce:	4770      	bx	lr
 8002dd0:	f803 1b01 	strb.w	r1, [r3], #1
 8002dd4:	e7f9      	b.n	8002dca <memset+0x4>
	...

08002dd8 <__libc_init_array>:
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	4d0d      	ldr	r5, [pc, #52]	@ (8002e10 <__libc_init_array+0x38>)
 8002ddc:	4c0d      	ldr	r4, [pc, #52]	@ (8002e14 <__libc_init_array+0x3c>)
 8002dde:	1b64      	subs	r4, r4, r5
 8002de0:	10a4      	asrs	r4, r4, #2
 8002de2:	2600      	movs	r6, #0
 8002de4:	42a6      	cmp	r6, r4
 8002de6:	d109      	bne.n	8002dfc <__libc_init_array+0x24>
 8002de8:	4d0b      	ldr	r5, [pc, #44]	@ (8002e18 <__libc_init_array+0x40>)
 8002dea:	4c0c      	ldr	r4, [pc, #48]	@ (8002e1c <__libc_init_array+0x44>)
 8002dec:	f000 f818 	bl	8002e20 <_init>
 8002df0:	1b64      	subs	r4, r4, r5
 8002df2:	10a4      	asrs	r4, r4, #2
 8002df4:	2600      	movs	r6, #0
 8002df6:	42a6      	cmp	r6, r4
 8002df8:	d105      	bne.n	8002e06 <__libc_init_array+0x2e>
 8002dfa:	bd70      	pop	{r4, r5, r6, pc}
 8002dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e00:	4798      	blx	r3
 8002e02:	3601      	adds	r6, #1
 8002e04:	e7ee      	b.n	8002de4 <__libc_init_array+0xc>
 8002e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e0a:	4798      	blx	r3
 8002e0c:	3601      	adds	r6, #1
 8002e0e:	e7f2      	b.n	8002df6 <__libc_init_array+0x1e>
 8002e10:	08002e68 	.word	0x08002e68
 8002e14:	08002e68 	.word	0x08002e68
 8002e18:	08002e68 	.word	0x08002e68
 8002e1c:	08002e6c 	.word	0x08002e6c

08002e20 <_init>:
 8002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e22:	bf00      	nop
 8002e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e26:	bc08      	pop	{r3}
 8002e28:	469e      	mov	lr, r3
 8002e2a:	4770      	bx	lr

08002e2c <_fini>:
 8002e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2e:	bf00      	nop
 8002e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e32:	bc08      	pop	{r3}
 8002e34:	469e      	mov	lr, r3
 8002e36:	4770      	bx	lr
