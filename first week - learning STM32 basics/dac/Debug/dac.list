
dac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a9c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003c30  08003c30  00004c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c60  08003c60  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003c60  08003c60  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003c60  08003c60  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c60  08003c60  00004c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c64  08003c64  00004c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c68  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000cc  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000094ff  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d5d  00000000  00000000  0000e53b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  00010298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000064f  00000000  00000000  00010b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fbcf  00000000  00000000  00011167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb22  00000000  00000000  00030d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c248b  00000000  00000000  0003c858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fece3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002180  00000000  00000000  000fed28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00100ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003c18 	.word	0x08003c18

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003c18 	.word	0x08003c18

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 faaa 	bl	8000730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f824 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f93a 	bl	8000458 <MX_GPIO_Init>
  MX_DMA_Init();
 80001e4:	f000 f91a 	bl	800041c <MX_DMA_Init>
  MX_DAC1_Init();
 80001e8:	f000 f8ee 	bl	80003c8 <MX_DAC1_Init>
  MX_ADC1_Init();
 80001ec:	f000 f87c 	bl	80002e8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 80001f0:	2110      	movs	r1, #16
 80001f2:	480a      	ldr	r0, [pc, #40]	@ (800021c <main+0x48>)
 80001f4:	f001 fd0c 	bl	8001c10 <HAL_DAC_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80001f8:	2100      	movs	r1, #0
 80001fa:	4809      	ldr	r0, [pc, #36]	@ (8000220 <main+0x4c>)
 80001fc:	f000 fe32 	bl	8000e64 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&value_adc,1);
 8000200:	2201      	movs	r2, #1
 8000202:	4908      	ldr	r1, [pc, #32]	@ (8000224 <main+0x50>)
 8000204:	4806      	ldr	r0, [pc, #24]	@ (8000220 <main+0x4c>)
 8000206:	f000 fd11 	bl	8000c2c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, value_adc);
 800020a:	4b06      	ldr	r3, [pc, #24]	@ (8000224 <main+0x50>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2200      	movs	r2, #0
 8000210:	2110      	movs	r1, #16
 8000212:	4802      	ldr	r0, [pc, #8]	@ (800021c <main+0x48>)
 8000214:	f001 fcd7 	bl	8001bc6 <HAL_DAC_SetValue>
 8000218:	e7f7      	b.n	800020a <main+0x36>
 800021a:	bf00      	nop
 800021c:	200000bc 	.word	0x200000bc
 8000220:	20000028 	.word	0x20000028
 8000224:	200000d0 	.word	0x200000d0

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b0a6      	sub	sp, #152	@ 0x98
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000232:	2228      	movs	r2, #40	@ 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f003 fcc2 	bl	8003bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2258      	movs	r2, #88	@ 0x58
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f003 fcb4 	bl	8003bc0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000258:	2302      	movs	r3, #2
 800025a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025c:	2301      	movs	r3, #1
 800025e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000260:	2310      	movs	r3, #16
 8000262:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000266:	2302      	movs	r3, #2
 8000268:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800026c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000270:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000278:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000286:	4618      	mov	r0, r3
 8000288:	f002 f898 	bl	80023bc <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000292:	f000 f905 	bl	80004a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029a:	2302      	movs	r3, #2
 800029c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f003 f8a6 	bl	8003404 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002be:	f000 f8ef 	bl	80004a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80002c2:	2380      	movs	r3, #128	@ 0x80
 80002c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	4618      	mov	r0, r3
 80002d0:	f003 fa5a 	bl	8003788 <HAL_RCCEx_PeriphCLKConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002da:	f000 f8e1 	bl	80004a0 <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3798      	adds	r7, #152	@ 0x98
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08a      	sub	sp, #40	@ 0x28
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002ee:	f107 031c 	add.w	r3, r7, #28
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
 8000308:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800030a:	4b2e      	ldr	r3, [pc, #184]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 800030c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000310:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000312:	4b2c      	ldr	r3, [pc, #176]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 8000314:	2200      	movs	r2, #0
 8000316:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000318:	4b2a      	ldr	r3, [pc, #168]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800031e:	4b29      	ldr	r3, [pc, #164]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000324:	4b27      	ldr	r3, [pc, #156]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 8000326:	2201      	movs	r2, #1
 8000328:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800032a:	4b26      	ldr	r3, [pc, #152]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 800032c:	2200      	movs	r2, #0
 800032e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000332:	4b24      	ldr	r3, [pc, #144]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 8000334:	2200      	movs	r2, #0
 8000336:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000338:	4b22      	ldr	r3, [pc, #136]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 800033a:	2201      	movs	r2, #1
 800033c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800033e:	4b21      	ldr	r3, [pc, #132]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000344:	4b1f      	ldr	r3, [pc, #124]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 8000346:	2201      	movs	r2, #1
 8000348:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800034a:	4b1e      	ldr	r3, [pc, #120]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 800034c:	2201      	movs	r2, #1
 800034e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000352:	4b1c      	ldr	r3, [pc, #112]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 8000354:	2204      	movs	r2, #4
 8000356:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000358:	4b1a      	ldr	r3, [pc, #104]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 800035a:	2200      	movs	r2, #0
 800035c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800035e:	4b19      	ldr	r3, [pc, #100]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 8000360:	2200      	movs	r2, #0
 8000362:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000364:	4817      	ldr	r0, [pc, #92]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 8000366:	f000 fa67 	bl	8000838 <HAL_ADC_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000370:	f000 f896 	bl	80004a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000374:	2300      	movs	r3, #0
 8000376:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000378:	f107 031c 	add.w	r3, r7, #28
 800037c:	4619      	mov	r1, r3
 800037e:	4811      	ldr	r0, [pc, #68]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 8000380:	f001 f8cc 	bl	800151c <HAL_ADCEx_MultiModeConfigChannel>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800038a:	f000 f889 	bl	80004a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800038e:	2306      	movs	r3, #6
 8000390:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000392:	2301      	movs	r3, #1
 8000394:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 800039a:	2305      	movs	r3, #5
 800039c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4619      	mov	r1, r3
 80003aa:	4806      	ldr	r0, [pc, #24]	@ (80003c4 <MX_ADC1_Init+0xdc>)
 80003ac:	f000 fdcc 	bl	8000f48 <HAL_ADC_ConfigChannel>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003b6:	f000 f873 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	3728      	adds	r7, #40	@ 0x28
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000028 	.word	0x20000028

080003c8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <MX_DAC1_Init+0x4c>)
 80003da:	4a0f      	ldr	r2, [pc, #60]	@ (8000418 <MX_DAC1_Init+0x50>)
 80003dc:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003de:	480d      	ldr	r0, [pc, #52]	@ (8000414 <MX_DAC1_Init+0x4c>)
 80003e0:	f001 fbcf 	bl	8001b82 <HAL_DAC_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80003ea:	f000 f859 	bl	80004a0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80003ee:	2300      	movs	r3, #0
 80003f0:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2210      	movs	r2, #16
 80003fa:	4619      	mov	r1, r3
 80003fc:	4805      	ldr	r0, [pc, #20]	@ (8000414 <MX_DAC1_Init+0x4c>)
 80003fe:	f001 fc52 	bl	8001ca6 <HAL_DAC_ConfigChannel>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000408:	f000 f84a 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200000bc 	.word	0x200000bc
 8000418:	40007400 	.word	0x40007400

0800041c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000422:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <MX_DMA_Init+0x38>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a0b      	ldr	r2, [pc, #44]	@ (8000454 <MX_DMA_Init+0x38>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6153      	str	r3, [r2, #20]
 800042e:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <MX_DMA_Init+0x38>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	2100      	movs	r1, #0
 800043e:	200b      	movs	r0, #11
 8000440:	f001 fb69 	bl	8001b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000444:	200b      	movs	r0, #11
 8000446:	f001 fb82 	bl	8001b4e <HAL_NVIC_EnableIRQ>

}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	@ (800049c <MX_GPIO_Init+0x44>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a0e      	ldr	r2, [pc, #56]	@ (800049c <MX_GPIO_Init+0x44>)
 8000464:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b0c      	ldr	r3, [pc, #48]	@ (800049c <MX_GPIO_Init+0x44>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b09      	ldr	r3, [pc, #36]	@ (800049c <MX_GPIO_Init+0x44>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a08      	ldr	r2, [pc, #32]	@ (800049c <MX_GPIO_Init+0x44>)
 800047c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	4b06      	ldr	r3, [pc, #24]	@ (800049c <MX_GPIO_Init+0x44>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800048a:	603b      	str	r3, [r7, #0]
 800048c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000

080004a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a4:	b672      	cpsid	i
}
 80004a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a8:	bf00      	nop
 80004aa:	e7fd      	b.n	80004a8 <Error_Handler+0x8>

080004ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b2:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <HAL_MspInit+0x44>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a0e      	ldr	r2, [pc, #56]	@ (80004f0 <HAL_MspInit+0x44>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6193      	str	r3, [r2, #24]
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <HAL_MspInit+0x44>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <HAL_MspInit+0x44>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a08      	ldr	r2, [pc, #32]	@ (80004f0 <HAL_MspInit+0x44>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <HAL_MspInit+0x44>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004e2:	2007      	movs	r0, #7
 80004e4:	f001 fb0c 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40021000 	.word	0x40021000

080004f4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	f107 0314 	add.w	r3, r7, #20
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000514:	d14b      	bne.n	80005ae <HAL_ADC_MspInit+0xba>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000516:	4b28      	ldr	r3, [pc, #160]	@ (80005b8 <HAL_ADC_MspInit+0xc4>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a27      	ldr	r2, [pc, #156]	@ (80005b8 <HAL_ADC_MspInit+0xc4>)
 800051c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b25      	ldr	r3, [pc, #148]	@ (80005b8 <HAL_ADC_MspInit+0xc4>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4b22      	ldr	r3, [pc, #136]	@ (80005b8 <HAL_ADC_MspInit+0xc4>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a21      	ldr	r2, [pc, #132]	@ (80005b8 <HAL_ADC_MspInit+0xc4>)
 8000534:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b1f      	ldr	r3, [pc, #124]	@ (80005b8 <HAL_ADC_MspInit+0xc4>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000546:	2301      	movs	r3, #1
 8000548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054a:	2303      	movs	r3, #3
 800054c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	4818      	ldr	r0, [pc, #96]	@ (80005bc <HAL_ADC_MspInit+0xc8>)
 800055a:	f001 fda5 	bl	80020a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800055e:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <HAL_ADC_MspInit+0xcc>)
 8000560:	4a18      	ldr	r2, [pc, #96]	@ (80005c4 <HAL_ADC_MspInit+0xd0>)
 8000562:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000564:	4b16      	ldr	r3, [pc, #88]	@ (80005c0 <HAL_ADC_MspInit+0xcc>)
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800056a:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <HAL_ADC_MspInit+0xcc>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000570:	4b13      	ldr	r3, [pc, #76]	@ (80005c0 <HAL_ADC_MspInit+0xcc>)
 8000572:	2280      	movs	r2, #128	@ 0x80
 8000574:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000576:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <HAL_ADC_MspInit+0xcc>)
 8000578:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800057c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800057e:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <HAL_ADC_MspInit+0xcc>)
 8000580:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000584:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000586:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <HAL_ADC_MspInit+0xcc>)
 8000588:	2220      	movs	r2, #32
 800058a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800058c:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <HAL_ADC_MspInit+0xcc>)
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000592:	480b      	ldr	r0, [pc, #44]	@ (80005c0 <HAL_ADC_MspInit+0xcc>)
 8000594:	f001 fbd4 	bl	8001d40 <HAL_DMA_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 800059e:	f7ff ff7f 	bl	80004a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a06      	ldr	r2, [pc, #24]	@ (80005c0 <HAL_ADC_MspInit+0xcc>)
 80005a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80005a8:	4a05      	ldr	r2, [pc, #20]	@ (80005c0 <HAL_ADC_MspInit+0xcc>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	@ 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000
 80005bc:	48000800 	.word	0x48000800
 80005c0:	20000078 	.word	0x20000078
 80005c4:	40020008 	.word	0x40020008

080005c8 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	@ 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a15      	ldr	r2, [pc, #84]	@ (800063c <HAL_DAC_MspInit+0x74>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d124      	bne.n	8000634 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005ea:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <HAL_DAC_MspInit+0x78>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a14      	ldr	r2, [pc, #80]	@ (8000640 <HAL_DAC_MspInit+0x78>)
 80005f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <HAL_DAC_MspInit+0x78>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <HAL_DAC_MspInit+0x78>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a0e      	ldr	r2, [pc, #56]	@ (8000640 <HAL_DAC_MspInit+0x78>)
 8000608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <HAL_DAC_MspInit+0x78>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800061a:	2320      	movs	r3, #32
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061e:	2303      	movs	r3, #3
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000630:	f001 fd3a 	bl	80020a8 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	@ 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40007400 	.word	0x40007400
 8000640:	40021000 	.word	0x40021000

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <NMI_Handler+0x4>

0800064c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <MemManage_Handler+0x4>

0800065c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <UsageFault_Handler+0x4>

0800066c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069a:	f000 f88f 	bl	80007bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006a8:	4802      	ldr	r0, [pc, #8]	@ (80006b4 <DMA1_Channel1_IRQHandler+0x10>)
 80006aa:	f001 fbef 	bl	8001e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000078 	.word	0x20000078

080006b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <SystemInit+0x20>)
 80006be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c2:	4a05      	ldr	r2, [pc, #20]	@ (80006d8 <SystemInit+0x20>)
 80006c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000714 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e0:	f7ff ffea 	bl	80006b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e6:	490d      	ldr	r1, [pc, #52]	@ (800071c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <LoopForever+0xe>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000728 <LoopForever+0x16>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800070a:	f003 fa61 	bl	8003bd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800070e:	f7ff fd61 	bl	80001d4 <main>

08000712 <LoopForever>:

LoopForever:
    b LoopForever
 8000712:	e7fe      	b.n	8000712 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000714:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000720:	08003c68 	.word	0x08003c68
  ldr r2, =_sbss
 8000724:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000728:	200000d8 	.word	0x200000d8

0800072c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC1_2_IRQHandler>
	...

08000730 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000734:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <HAL_Init+0x28>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a07      	ldr	r2, [pc, #28]	@ (8000758 <HAL_Init+0x28>)
 800073a:	f043 0310 	orr.w	r3, r3, #16
 800073e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000740:	2003      	movs	r0, #3
 8000742:	f001 f9dd 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000746:	2000      	movs	r0, #0
 8000748:	f000 f808 	bl	800075c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800074c:	f7ff feae 	bl	80004ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40022000 	.word	0x40022000

0800075c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <HAL_InitTick+0x54>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_InitTick+0x58>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000772:	fbb3 f3f1 	udiv	r3, r3, r1
 8000776:	fbb2 f3f3 	udiv	r3, r2, r3
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f9f5 	bl	8001b6a <HAL_SYSTICK_Config>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
 8000788:	e00e      	b.n	80007a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b0f      	cmp	r3, #15
 800078e:	d80a      	bhi.n	80007a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000790:	2200      	movs	r2, #0
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	f04f 30ff 	mov.w	r0, #4294967295
 8000798:	f001 f9bd 	bl	8001b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800079c:	4a06      	ldr	r2, [pc, #24]	@ (80007b8 <HAL_InitTick+0x5c>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007a2:	2300      	movs	r3, #0
 80007a4:	e000      	b.n	80007a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000008 	.word	0x20000008
 80007b8:	20000004 	.word	0x20000004

080007bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <HAL_IncTick+0x20>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HAL_IncTick+0x24>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <HAL_IncTick+0x24>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000008 	.word	0x20000008
 80007e0:	200000d4 	.word	0x200000d4

080007e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80007e8:	4b03      	ldr	r3, [pc, #12]	@ (80007f8 <HAL_GetTick+0x14>)
 80007ea:	681b      	ldr	r3, [r3, #0]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	200000d4 	.word	0x200000d4

080007fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b09a      	sub	sp, #104	@ 0x68
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000846:	2300      	movs	r3, #0
 8000848:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d101      	bne.n	8000858 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000854:	2301      	movs	r3, #1
 8000856:	e1e3      	b.n	8000c20 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000862:	f003 0310 	and.w	r3, r3, #16
 8000866:	2b00      	cmp	r3, #0
 8000868:	d176      	bne.n	8000958 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	2b00      	cmp	r3, #0
 8000870:	d152      	bne.n	8000918 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2200      	movs	r2, #0
 8000876:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff fe31 	bl	80004f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089c:	2b00      	cmp	r3, #0
 800089e:	d13b      	bne.n	8000918 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 fff7 	bl	8001894 <ADC_Disable>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	f003 0310 	and.w	r3, r3, #16
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d12f      	bne.n	8000918 <HAL_ADC_Init+0xe0>
 80008b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d12b      	bne.n	8000918 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80008c8:	f023 0302 	bic.w	r3, r3, #2
 80008cc:	f043 0202 	orr.w	r2, r3, #2
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	689a      	ldr	r2, [r3, #8]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80008e2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	689a      	ldr	r2, [r3, #8]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80008f2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80008f4:	4b92      	ldr	r3, [pc, #584]	@ (8000b40 <HAL_ADC_Init+0x308>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a92      	ldr	r2, [pc, #584]	@ (8000b44 <HAL_ADC_Init+0x30c>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	0c9a      	lsrs	r2, r3, #18
 8000900:	4613      	mov	r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	4413      	add	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800090a:	e002      	b.n	8000912 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	3b01      	subs	r3, #1
 8000910:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1f9      	bne.n	800090c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000922:	2b00      	cmp	r3, #0
 8000924:	d007      	beq.n	8000936 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000930:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000934:	d110      	bne.n	8000958 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093a:	f023 0312 	bic.w	r3, r3, #18
 800093e:	f043 0210 	orr.w	r2, r3, #16
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	f043 0201 	orr.w	r2, r3, #1
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	f003 0310 	and.w	r3, r3, #16
 8000960:	2b00      	cmp	r3, #0
 8000962:	f040 8150 	bne.w	8000c06 <HAL_ADC_Init+0x3ce>
 8000966:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800096a:	2b00      	cmp	r3, #0
 800096c:	f040 814b 	bne.w	8000c06 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800097a:	2b00      	cmp	r3, #0
 800097c:	f040 8143 	bne.w	8000c06 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000984:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000988:	f043 0202 	orr.w	r2, r3, #2
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000998:	d004      	beq.n	80009a4 <HAL_ADC_Init+0x16c>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a6a      	ldr	r2, [pc, #424]	@ (8000b48 <HAL_ADC_Init+0x310>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d101      	bne.n	80009a8 <HAL_ADC_Init+0x170>
 80009a4:	4b69      	ldr	r3, [pc, #420]	@ (8000b4c <HAL_ADC_Init+0x314>)
 80009a6:	e000      	b.n	80009aa <HAL_ADC_Init+0x172>
 80009a8:	4b69      	ldr	r3, [pc, #420]	@ (8000b50 <HAL_ADC_Init+0x318>)
 80009aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80009b4:	d102      	bne.n	80009bc <HAL_ADC_Init+0x184>
 80009b6:	4b64      	ldr	r3, [pc, #400]	@ (8000b48 <HAL_ADC_Init+0x310>)
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	e01a      	b.n	80009f2 <HAL_ADC_Init+0x1ba>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a61      	ldr	r2, [pc, #388]	@ (8000b48 <HAL_ADC_Init+0x310>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d103      	bne.n	80009ce <HAL_ADC_Init+0x196>
 80009c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	e011      	b.n	80009f2 <HAL_ADC_Init+0x1ba>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a60      	ldr	r2, [pc, #384]	@ (8000b54 <HAL_ADC_Init+0x31c>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d102      	bne.n	80009de <HAL_ADC_Init+0x1a6>
 80009d8:	4b5f      	ldr	r3, [pc, #380]	@ (8000b58 <HAL_ADC_Init+0x320>)
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	e009      	b.n	80009f2 <HAL_ADC_Init+0x1ba>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a5d      	ldr	r2, [pc, #372]	@ (8000b58 <HAL_ADC_Init+0x320>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d102      	bne.n	80009ee <HAL_ADC_Init+0x1b6>
 80009e8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b54 <HAL_ADC_Init+0x31c>)
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	e001      	b.n	80009f2 <HAL_ADC_Init+0x1ba>
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f003 0303 	and.w	r3, r3, #3
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d108      	bne.n	8000a12 <HAL_ADC_Init+0x1da>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d101      	bne.n	8000a12 <HAL_ADC_Init+0x1da>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e000      	b.n	8000a14 <HAL_ADC_Init+0x1dc>
 8000a12:	2300      	movs	r3, #0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d11c      	bne.n	8000a52 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a18:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d010      	beq.n	8000a40 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	f003 0303 	and.w	r3, r3, #3
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d107      	bne.n	8000a3a <HAL_ADC_Init+0x202>
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d101      	bne.n	8000a3a <HAL_ADC_Init+0x202>
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <HAL_ADC_Init+0x204>
 8000a3a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d108      	bne.n	8000a52 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000a40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	431a      	orrs	r2, r3
 8000a4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a50:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	7e5b      	ldrb	r3, [r3, #25]
 8000a56:	035b      	lsls	r3, r3, #13
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000a5c:	2a01      	cmp	r2, #1
 8000a5e:	d002      	beq.n	8000a66 <HAL_ADC_Init+0x22e>
 8000a60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a64:	e000      	b.n	8000a68 <HAL_ADC_Init+0x230>
 8000a66:	2200      	movs	r2, #0
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d11b      	bne.n	8000abe <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	7e5b      	ldrb	r3, [r3, #25]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d109      	bne.n	8000aa2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a92:	3b01      	subs	r3, #1
 8000a94:	045a      	lsls	r2, r3, #17
 8000a96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8000aa0:	e00d      	b.n	8000abe <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000aaa:	f043 0220 	orr.w	r2, r3, #32
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	f043 0201 	orr.w	r2, r3, #1
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d054      	beq.n	8000b70 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a22      	ldr	r2, [pc, #136]	@ (8000b54 <HAL_ADC_Init+0x31c>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d004      	beq.n	8000ada <HAL_ADC_Init+0x2a2>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a20      	ldr	r2, [pc, #128]	@ (8000b58 <HAL_ADC_Init+0x320>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d140      	bne.n	8000b5c <HAL_ADC_Init+0x324>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ade:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000ae2:	d02a      	beq.n	8000b3a <HAL_ADC_Init+0x302>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000aec:	d022      	beq.n	8000b34 <HAL_ADC_Init+0x2fc>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af2:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000af6:	d01a      	beq.n	8000b2e <HAL_ADC_Init+0x2f6>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000afc:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000b00:	d012      	beq.n	8000b28 <HAL_ADC_Init+0x2f0>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b06:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000b0a:	d00a      	beq.n	8000b22 <HAL_ADC_Init+0x2ea>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b10:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000b14:	d002      	beq.n	8000b1c <HAL_ADC_Init+0x2e4>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b1a:	e023      	b.n	8000b64 <HAL_ADC_Init+0x32c>
 8000b1c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b20:	e020      	b.n	8000b64 <HAL_ADC_Init+0x32c>
 8000b22:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b26:	e01d      	b.n	8000b64 <HAL_ADC_Init+0x32c>
 8000b28:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000b2c:	e01a      	b.n	8000b64 <HAL_ADC_Init+0x32c>
 8000b2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b32:	e017      	b.n	8000b64 <HAL_ADC_Init+0x32c>
 8000b34:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000b38:	e014      	b.n	8000b64 <HAL_ADC_Init+0x32c>
 8000b3a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000b3e:	e011      	b.n	8000b64 <HAL_ADC_Init+0x32c>
 8000b40:	20000000 	.word	0x20000000
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	50000100 	.word	0x50000100
 8000b4c:	50000300 	.word	0x50000300
 8000b50:	50000700 	.word	0x50000700
 8000b54:	50000400 	.word	0x50000400
 8000b58:	50000500 	.word	0x50000500
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f003 030c 	and.w	r3, r3, #12
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d114      	bne.n	8000ba8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	6812      	ldr	r2, [r2, #0]
 8000b88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000b8c:	f023 0302 	bic.w	r3, r3, #2
 8000b90:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7e1b      	ldrb	r3, [r3, #24]
 8000b96:	039a      	lsls	r2, r3, #14
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	68da      	ldr	r2, [r3, #12]
 8000bae:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <HAL_ADC_Init+0x3f0>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000bb8:	430b      	orrs	r3, r1
 8000bba:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d10c      	bne.n	8000bde <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f023 010f 	bic.w	r1, r3, #15
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	1e5a      	subs	r2, r3, #1
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bdc:	e007      	b.n	8000bee <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f022 020f 	bic.w	r2, r2, #15
 8000bec:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf8:	f023 0303 	bic.w	r3, r3, #3
 8000bfc:	f043 0201 	orr.w	r2, r3, #1
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c04:	e00a      	b.n	8000c1c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	f023 0312 	bic.w	r3, r3, #18
 8000c0e:	f043 0210 	orr.w	r2, r3, #16
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000c16:	2301      	movs	r3, #1
 8000c18:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000c1c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3768      	adds	r7, #104	@ 0x68
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	fff0c007 	.word	0xfff0c007

08000c2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 80f7 	bne.w	8000e3a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d101      	bne.n	8000c5a <HAL_ADC_Start_DMA+0x2e>
 8000c56:	2302      	movs	r3, #2
 8000c58:	e0f2      	b.n	8000e40 <HAL_ADC_Start_DMA+0x214>
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c6a:	d004      	beq.n	8000c76 <HAL_ADC_Start_DMA+0x4a>
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a75      	ldr	r2, [pc, #468]	@ (8000e48 <HAL_ADC_Start_DMA+0x21c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d109      	bne.n	8000c8a <HAL_ADC_Start_DMA+0x5e>
 8000c76:	4b75      	ldr	r3, [pc, #468]	@ (8000e4c <HAL_ADC_Start_DMA+0x220>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f003 031f 	and.w	r3, r3, #31
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	bf0c      	ite	eq
 8000c82:	2301      	moveq	r3, #1
 8000c84:	2300      	movne	r3, #0
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	e008      	b.n	8000c9c <HAL_ADC_Start_DMA+0x70>
 8000c8a:	4b71      	ldr	r3, [pc, #452]	@ (8000e50 <HAL_ADC_Start_DMA+0x224>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f003 031f 	and.w	r3, r3, #31
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bf0c      	ite	eq
 8000c96:	2301      	moveq	r3, #1
 8000c98:	2300      	movne	r3, #0
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f000 80c5 	beq.w	8000e2c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f000 fd92 	bl	80017cc <ADC_Enable>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000cac:	7dfb      	ldrb	r3, [r7, #23]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 80b7 	bne.w	8000e22 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000cbc:	f023 0301 	bic.w	r3, r3, #1
 8000cc0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cd0:	d004      	beq.n	8000cdc <HAL_ADC_Start_DMA+0xb0>
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a5c      	ldr	r2, [pc, #368]	@ (8000e48 <HAL_ADC_Start_DMA+0x21c>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d106      	bne.n	8000cea <HAL_ADC_Start_DMA+0xbe>
 8000cdc:	4b5b      	ldr	r3, [pc, #364]	@ (8000e4c <HAL_ADC_Start_DMA+0x220>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	f003 031f 	and.w	r3, r3, #31
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d010      	beq.n	8000d0a <HAL_ADC_Start_DMA+0xde>
 8000ce8:	e005      	b.n	8000cf6 <HAL_ADC_Start_DMA+0xca>
 8000cea:	4b59      	ldr	r3, [pc, #356]	@ (8000e50 <HAL_ADC_Start_DMA+0x224>)
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f003 031f 	and.w	r3, r3, #31
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d009      	beq.n	8000d0a <HAL_ADC_Start_DMA+0xde>
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cfe:	d004      	beq.n	8000d0a <HAL_ADC_Start_DMA+0xde>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a53      	ldr	r2, [pc, #332]	@ (8000e54 <HAL_ADC_Start_DMA+0x228>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d115      	bne.n	8000d36 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d036      	beq.n	8000d92 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d28:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d2c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d34:	e02d      	b.n	8000d92 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d4a:	d004      	beq.n	8000d56 <HAL_ADC_Start_DMA+0x12a>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a3d      	ldr	r2, [pc, #244]	@ (8000e48 <HAL_ADC_Start_DMA+0x21c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d10a      	bne.n	8000d6c <HAL_ADC_Start_DMA+0x140>
 8000d56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bf14      	ite	ne
 8000d64:	2301      	movne	r3, #1
 8000d66:	2300      	moveq	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	e008      	b.n	8000d7e <HAL_ADC_Start_DMA+0x152>
 8000d6c:	4b39      	ldr	r3, [pc, #228]	@ (8000e54 <HAL_ADC_Start_DMA+0x228>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	bf14      	ite	ne
 8000d78:	2301      	movne	r3, #1
 8000d7a:	2300      	moveq	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d007      	beq.n	8000d92 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d8a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d9e:	d106      	bne.n	8000dae <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da4:	f023 0206 	bic.w	r2, r3, #6
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	645a      	str	r2, [r3, #68]	@ 0x44
 8000dac:	e002      	b.n	8000db4 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2200      	movs	r2, #0
 8000db2:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dc0:	4a25      	ldr	r2, [pc, #148]	@ (8000e58 <HAL_ADC_Start_DMA+0x22c>)
 8000dc2:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dc8:	4a24      	ldr	r2, [pc, #144]	@ (8000e5c <HAL_ADC_Start_DMA+0x230>)
 8000dca:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dd0:	4a23      	ldr	r2, [pc, #140]	@ (8000e60 <HAL_ADC_Start_DMA+0x234>)
 8000dd2:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	221c      	movs	r2, #28
 8000dda:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f042 0210 	orr.w	r2, r2, #16
 8000dea:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f042 0201 	orr.w	r2, r2, #1
 8000dfa:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3340      	adds	r3, #64	@ 0x40
 8000e06:	4619      	mov	r1, r3
 8000e08:	68ba      	ldr	r2, [r7, #8]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f000 ffdf 	bl	8001dce <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0204 	orr.w	r2, r2, #4
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	e00d      	b.n	8000e3e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000e2a:	e008      	b.n	8000e3e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000e38:	e001      	b.n	8000e3e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	50000100 	.word	0x50000100
 8000e4c:	50000300 	.word	0x50000300
 8000e50:	50000700 	.word	0x50000700
 8000e54:	50000400 	.word	0x50000400
 8000e58:	08001701 	.word	0x08001701
 8000e5c:	0800177b 	.word	0x0800177b
 8000e60:	08001797 	.word	0x08001797

08000e64 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d101      	bne.n	8000e80 <HAL_ADCEx_Calibration_Start+0x1c>
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	e05f      	b.n	8000f40 <HAL_ADCEx_Calibration_Start+0xdc>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 fd03 	bl	8001894 <ADC_Disable>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d14e      	bne.n	8000f36 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8000eac:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d107      	bne.n	8000ec4 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000ec2:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000ed2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8000ed4:	f7ff fc86 	bl	80007e4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000eda:	e01c      	b.n	8000f16 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000edc:	f7ff fc82 	bl	80007e4 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b0a      	cmp	r3, #10
 8000ee8:	d915      	bls.n	8000f16 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000ef8:	d10d      	bne.n	8000f16 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	f023 0312 	bic.w	r3, r3, #18
 8000f02:	f043 0210 	orr.w	r2, r3, #16
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e014      	b.n	8000f40 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000f20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000f24:	d0da      	beq.n	8000edc <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	f023 0303 	bic.w	r3, r3, #3
 8000f2e:	f043 0201 	orr.w	r2, r3, #1
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b09b      	sub	sp, #108	@ 0x6c
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d101      	bne.n	8000f6a <HAL_ADC_ConfigChannel+0x22>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e2c8      	b.n	80014fc <HAL_ADC_ConfigChannel+0x5b4>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f040 82ac 	bne.w	80014da <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d81c      	bhi.n	8000fc4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4413      	add	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	231f      	movs	r3, #31
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	4019      	ands	r1, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fc2:	e063      	b.n	800108c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b09      	cmp	r3, #9
 8000fca:	d81e      	bhi.n	800100a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	3b1e      	subs	r3, #30
 8000fe0:	221f      	movs	r2, #31
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	4019      	ands	r1, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	3b1e      	subs	r3, #30
 8000ffc:	fa00 f203 	lsl.w	r2, r0, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	635a      	str	r2, [r3, #52]	@ 0x34
 8001008:	e040      	b.n	800108c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b0e      	cmp	r3, #14
 8001010:	d81e      	bhi.n	8001050 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	3b3c      	subs	r3, #60	@ 0x3c
 8001026:	221f      	movs	r2, #31
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	4019      	ands	r1, r3
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	3b3c      	subs	r3, #60	@ 0x3c
 8001042:	fa00 f203 	lsl.w	r2, r0, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	430a      	orrs	r2, r1
 800104c:	639a      	str	r2, [r3, #56]	@ 0x38
 800104e:	e01d      	b.n	800108c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4413      	add	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	3b5a      	subs	r3, #90	@ 0x5a
 8001064:	221f      	movs	r2, #31
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	4019      	ands	r1, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	3b5a      	subs	r3, #90	@ 0x5a
 8001080:	fa00 f203 	lsl.w	r2, r0, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b00      	cmp	r3, #0
 8001098:	f040 80e5 	bne.w	8001266 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b09      	cmp	r3, #9
 80010a2:	d91c      	bls.n	80010de <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6999      	ldr	r1, [r3, #24]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	3b1e      	subs	r3, #30
 80010b6:	2207      	movs	r2, #7
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	4019      	ands	r1, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	6898      	ldr	r0, [r3, #8]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	3b1e      	subs	r3, #30
 80010d0:	fa00 f203 	lsl.w	r2, r0, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	619a      	str	r2, [r3, #24]
 80010dc:	e019      	b.n	8001112 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6959      	ldr	r1, [r3, #20]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	2207      	movs	r2, #7
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	4019      	ands	r1, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	6898      	ldr	r0, [r3, #8]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	fa00 f203 	lsl.w	r2, r0, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	08db      	lsrs	r3, r3, #3
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	3b01      	subs	r3, #1
 8001130:	2b03      	cmp	r3, #3
 8001132:	d84f      	bhi.n	80011d4 <HAL_ADC_ConfigChannel+0x28c>
 8001134:	a201      	add	r2, pc, #4	@ (adr r2, 800113c <HAL_ADC_ConfigChannel+0x1f4>)
 8001136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113a:	bf00      	nop
 800113c:	0800114d 	.word	0x0800114d
 8001140:	0800116f 	.word	0x0800116f
 8001144:	08001191 	.word	0x08001191
 8001148:	080011b3 	.word	0x080011b3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001152:	4b99      	ldr	r3, [pc, #612]	@ (80013b8 <HAL_ADC_ConfigChannel+0x470>)
 8001154:	4013      	ands	r3, r2
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	0691      	lsls	r1, r2, #26
 800115c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800115e:	430a      	orrs	r2, r1
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800116a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800116c:	e07b      	b.n	8001266 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001174:	4b90      	ldr	r3, [pc, #576]	@ (80013b8 <HAL_ADC_ConfigChannel+0x470>)
 8001176:	4013      	ands	r3, r2
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	0691      	lsls	r1, r2, #26
 800117e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001180:	430a      	orrs	r2, r1
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800118c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800118e:	e06a      	b.n	8001266 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001196:	4b88      	ldr	r3, [pc, #544]	@ (80013b8 <HAL_ADC_ConfigChannel+0x470>)
 8001198:	4013      	ands	r3, r2
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	0691      	lsls	r1, r2, #26
 80011a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011a2:	430a      	orrs	r2, r1
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80011ae:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011b0:	e059      	b.n	8001266 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80011b8:	4b7f      	ldr	r3, [pc, #508]	@ (80013b8 <HAL_ADC_ConfigChannel+0x470>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	0691      	lsls	r1, r2, #26
 80011c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011c4:	430a      	orrs	r2, r1
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80011d0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011d2:	e048      	b.n	8001266 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	069b      	lsls	r3, r3, #26
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d107      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80011f6:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80011fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	069b      	lsls	r3, r3, #26
 8001208:	429a      	cmp	r2, r3
 800120a:	d107      	bne.n	800121c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800121a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001222:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	069b      	lsls	r3, r3, #26
 800122c:	429a      	cmp	r2, r3
 800122e:	d107      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800123e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001246:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	069b      	lsls	r3, r3, #26
 8001250:	429a      	cmp	r2, r3
 8001252:	d107      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001262:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001264:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d108      	bne.n	8001286 <HAL_ADC_ConfigChannel+0x33e>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b01      	cmp	r3, #1
 8001280:	d101      	bne.n	8001286 <HAL_ADC_ConfigChannel+0x33e>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_ADC_ConfigChannel+0x340>
 8001286:	2300      	movs	r3, #0
 8001288:	2b00      	cmp	r3, #0
 800128a:	f040 8131 	bne.w	80014f0 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d00f      	beq.n	80012b6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2201      	movs	r2, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43da      	mvns	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	400a      	ands	r2, r1
 80012b0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80012b4:	e049      	b.n	800134a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2201      	movs	r2, #1
 80012c4:	409a      	lsls	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	d91c      	bls.n	8001312 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6999      	ldr	r1, [r3, #24]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4613      	mov	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	3b1b      	subs	r3, #27
 80012ea:	2207      	movs	r2, #7
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	4019      	ands	r1, r3
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	6898      	ldr	r0, [r3, #8]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	3b1b      	subs	r3, #27
 8001304:	fa00 f203 	lsl.w	r2, r0, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	619a      	str	r2, [r3, #24]
 8001310:	e01b      	b.n	800134a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6959      	ldr	r1, [r3, #20]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	2207      	movs	r2, #7
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	4019      	ands	r1, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	6898      	ldr	r0, [r3, #8]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	4613      	mov	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	fa00 f203 	lsl.w	r2, r0, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001352:	d004      	beq.n	800135e <HAL_ADC_ConfigChannel+0x416>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a18      	ldr	r2, [pc, #96]	@ (80013bc <HAL_ADC_ConfigChannel+0x474>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x41a>
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <HAL_ADC_ConfigChannel+0x478>)
 8001360:	e000      	b.n	8001364 <HAL_ADC_ConfigChannel+0x41c>
 8001362:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <HAL_ADC_ConfigChannel+0x47c>)
 8001364:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b10      	cmp	r3, #16
 800136c:	d105      	bne.n	800137a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800136e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001376:	2b00      	cmp	r3, #0
 8001378:	d015      	beq.n	80013a6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800137e:	2b11      	cmp	r3, #17
 8001380:	d105      	bne.n	800138e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001382:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001392:	2b12      	cmp	r3, #18
 8001394:	f040 80ac 	bne.w	80014f0 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001398:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f040 80a5 	bne.w	80014f0 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013ae:	d10b      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x480>
 80013b0:	4b02      	ldr	r3, [pc, #8]	@ (80013bc <HAL_ADC_ConfigChannel+0x474>)
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e023      	b.n	80013fe <HAL_ADC_ConfigChannel+0x4b6>
 80013b6:	bf00      	nop
 80013b8:	83fff000 	.word	0x83fff000
 80013bc:	50000100 	.word	0x50000100
 80013c0:	50000300 	.word	0x50000300
 80013c4:	50000700 	.word	0x50000700
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001508 <HAL_ADC_ConfigChannel+0x5c0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d103      	bne.n	80013da <HAL_ADC_ConfigChannel+0x492>
 80013d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	e011      	b.n	80013fe <HAL_ADC_ConfigChannel+0x4b6>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a4b      	ldr	r2, [pc, #300]	@ (800150c <HAL_ADC_ConfigChannel+0x5c4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d102      	bne.n	80013ea <HAL_ADC_ConfigChannel+0x4a2>
 80013e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001510 <HAL_ADC_ConfigChannel+0x5c8>)
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	e009      	b.n	80013fe <HAL_ADC_ConfigChannel+0x4b6>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a48      	ldr	r2, [pc, #288]	@ (8001510 <HAL_ADC_ConfigChannel+0x5c8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d102      	bne.n	80013fa <HAL_ADC_ConfigChannel+0x4b2>
 80013f4:	4b45      	ldr	r3, [pc, #276]	@ (800150c <HAL_ADC_ConfigChannel+0x5c4>)
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e001      	b.n	80013fe <HAL_ADC_ConfigChannel+0x4b6>
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b01      	cmp	r3, #1
 800140a:	d108      	bne.n	800141e <HAL_ADC_ConfigChannel+0x4d6>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_ADC_ConfigChannel+0x4d6>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_ADC_ConfigChannel+0x4d8>
 800141e:	2300      	movs	r3, #0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d150      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001424:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001426:	2b00      	cmp	r3, #0
 8001428:	d010      	beq.n	800144c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x4fe>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x4fe>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_ADC_ConfigChannel+0x500>
 8001446:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001448:	2b00      	cmp	r3, #0
 800144a:	d13c      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b10      	cmp	r3, #16
 8001452:	d11d      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x548>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800145c:	d118      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800145e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001468:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800146a:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <HAL_ADC_ConfigChannel+0x5cc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a2a      	ldr	r2, [pc, #168]	@ (8001518 <HAL_ADC_ConfigChannel+0x5d0>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	0c9a      	lsrs	r2, r3, #18
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001480:	e002      	b.n	8001488 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	3b01      	subs	r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f9      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800148e:	e02e      	b.n	80014ee <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b11      	cmp	r3, #17
 8001496:	d10b      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x568>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014a0:	d106      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80014a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80014aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014ac:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014ae:	e01e      	b.n	80014ee <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d11a      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80014b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014c2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014c4:	e013      	b.n	80014ee <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	f043 0220 	orr.w	r2, r3, #32
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80014d8:	e00a      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	f043 0220 	orr.w	r2, r3, #32
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80014ec:	e000      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014ee:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80014f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	376c      	adds	r7, #108	@ 0x6c
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	50000100 	.word	0x50000100
 800150c:	50000400 	.word	0x50000400
 8001510:	50000500 	.word	0x50000500
 8001514:	20000000 	.word	0x20000000
 8001518:	431bde83 	.word	0x431bde83

0800151c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800151c:	b480      	push	{r7}
 800151e:	b099      	sub	sp, #100	@ 0x64
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001534:	d102      	bne.n	800153c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001536:	4b6d      	ldr	r3, [pc, #436]	@ (80016ec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	e01a      	b.n	8001572 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a6a      	ldr	r2, [pc, #424]	@ (80016ec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d103      	bne.n	800154e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001546:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	e011      	b.n	8001572 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a67      	ldr	r2, [pc, #412]	@ (80016f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d102      	bne.n	800155e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001558:	4b66      	ldr	r3, [pc, #408]	@ (80016f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	e009      	b.n	8001572 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a64      	ldr	r2, [pc, #400]	@ (80016f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d102      	bne.n	800156e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001568:	4b61      	ldr	r3, [pc, #388]	@ (80016f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	e001      	b.n	8001572 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0b0      	b.n	80016de <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001586:	2302      	movs	r3, #2
 8001588:	e0a9      	b.n	80016de <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	f040 808d 	bne.w	80016bc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f040 8086 	bne.w	80016bc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015b8:	d004      	beq.n	80015c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a4b      	ldr	r2, [pc, #300]	@ (80016ec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d101      	bne.n	80015c8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80015c4:	4b4c      	ldr	r3, [pc, #304]	@ (80016f8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80015c6:	e000      	b.n	80015ca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80015c8:	4b4c      	ldr	r3, [pc, #304]	@ (80016fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80015ca:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d040      	beq.n	8001656 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80015d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	6859      	ldr	r1, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015e6:	035b      	lsls	r3, r3, #13
 80015e8:	430b      	orrs	r3, r1
 80015ea:	431a      	orrs	r2, r3
 80015ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015ee:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d108      	bne.n	8001610 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001610:	2300      	movs	r3, #0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d15c      	bne.n	80016d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	2b01      	cmp	r3, #1
 8001620:	d107      	bne.n	8001632 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001632:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001634:	2b00      	cmp	r3, #0
 8001636:	d14b      	bne.n	80016d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001638:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001640:	f023 030f 	bic.w	r3, r3, #15
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	6811      	ldr	r1, [r2, #0]
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	6892      	ldr	r2, [r2, #8]
 800164c:	430a      	orrs	r2, r1
 800164e:	431a      	orrs	r2, r3
 8001650:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001652:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001654:	e03c      	b.n	80016d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001656:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800165e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001660:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b01      	cmp	r3, #1
 800166e:	d108      	bne.n	8001682 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001682:	2300      	movs	r3, #0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d123      	bne.n	80016d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d107      	bne.n	80016a4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80016a4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d112      	bne.n	80016d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80016aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80016b2:	f023 030f 	bic.w	r3, r3, #15
 80016b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80016b8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016ba:	e009      	b.n	80016d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	f043 0220 	orr.w	r2, r3, #32
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80016ce:	e000      	b.n	80016d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016d0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80016de:	4618      	mov	r0, r3
 80016e0:	3764      	adds	r7, #100	@ 0x64
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	50000100 	.word	0x50000100
 80016f0:	50000400 	.word	0x50000400
 80016f4:	50000500 	.word	0x50000500
 80016f8:	50000300 	.word	0x50000300
 80016fc:	50000700 	.word	0x50000700

08001700 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001716:	2b00      	cmp	r3, #0
 8001718:	d126      	bne.n	8001768 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001730:	2b00      	cmp	r3, #0
 8001732:	d115      	bne.n	8001760 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001738:	2b00      	cmp	r3, #0
 800173a:	d111      	bne.n	8001760 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d105      	bne.n	8001760 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	f043 0201 	orr.w	r2, r3, #1
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff f84b 	bl	80007fc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001766:	e004      	b.n	8001772 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	4798      	blx	r3
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001786:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f7ff f841 	bl	8000810 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b4:	f043 0204 	orr.w	r2, r3, #4
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f7ff f831 	bl	8000824 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d108      	bne.n	80017f8 <ADC_Enable+0x2c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <ADC_Enable+0x2c>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <ADC_Enable+0x2e>
 80017f8:	2300      	movs	r3, #0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d143      	bne.n	8001886 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	4b22      	ldr	r3, [pc, #136]	@ (8001890 <ADC_Enable+0xc4>)
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00d      	beq.n	8001828 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	f043 0210 	orr.w	r2, r3, #16
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181c:	f043 0201 	orr.w	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e02f      	b.n	8001888 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001838:	f7fe ffd4 	bl	80007e4 <HAL_GetTick>
 800183c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800183e:	e01b      	b.n	8001878 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001840:	f7fe ffd0 	bl	80007e4 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d914      	bls.n	8001878 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b01      	cmp	r3, #1
 800185a:	d00d      	beq.n	8001878 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	f043 0210 	orr.w	r2, r3, #16
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186c:	f043 0201 	orr.w	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e007      	b.n	8001888 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d1dc      	bne.n	8001840 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	8000003f 	.word	0x8000003f

08001894 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d108      	bne.n	80018c0 <ADC_Disable+0x2c>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <ADC_Disable+0x2c>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <ADC_Disable+0x2e>
 80018c0:	2300      	movs	r3, #0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d047      	beq.n	8001956 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 030d 	and.w	r3, r3, #13
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d10f      	bne.n	80018f4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0202 	orr.w	r2, r2, #2
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2203      	movs	r2, #3
 80018ea:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80018ec:	f7fe ff7a 	bl	80007e4 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018f2:	e029      	b.n	8001948 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f8:	f043 0210 	orr.w	r2, r3, #16
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001904:	f043 0201 	orr.w	r2, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e023      	b.n	8001958 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001910:	f7fe ff68 	bl	80007e4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d914      	bls.n	8001948 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d10d      	bne.n	8001948 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	f043 0210 	orr.w	r2, r3, #16
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193c:	f043 0201 	orr.w	r2, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e007      	b.n	8001958 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b01      	cmp	r3, #1
 8001954:	d0dc      	beq.n	8001910 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800198c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db0b      	blt.n	80019ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	4907      	ldr	r1, [pc, #28]	@ (80019fc <__NVIC_EnableIRQ+0x38>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	2001      	movs	r0, #1
 80019e6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100

08001a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	db0a      	blt.n	8001a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	490c      	ldr	r1, [pc, #48]	@ (8001a4c <__NVIC_SetPriority+0x4c>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a28:	e00a      	b.n	8001a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4908      	ldr	r1, [pc, #32]	@ (8001a50 <__NVIC_SetPriority+0x50>)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3b04      	subs	r3, #4
 8001a38:	0112      	lsls	r2, r2, #4
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	761a      	strb	r2, [r3, #24]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000e100 	.word	0xe000e100
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	@ 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f1c3 0307 	rsb	r3, r3, #7
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	bf28      	it	cs
 8001a72:	2304      	movcs	r3, #4
 8001a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d902      	bls.n	8001a84 <NVIC_EncodePriority+0x30>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3b03      	subs	r3, #3
 8001a82:	e000      	b.n	8001a86 <NVIC_EncodePriority+0x32>
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	401a      	ands	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	4313      	orrs	r3, r2
         );
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3724      	adds	r7, #36	@ 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001acc:	d301      	bcc.n	8001ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00f      	b.n	8001af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <SysTick_Config+0x40>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ada:	210f      	movs	r1, #15
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f7ff ff8e 	bl	8001a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <SysTick_Config+0x40>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aea:	4b04      	ldr	r3, [pc, #16]	@ (8001afc <SysTick_Config+0x40>)
 8001aec:	2207      	movs	r2, #7
 8001aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	e000e010 	.word	0xe000e010

08001b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff29 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b28:	f7ff ff3e 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7ff ff8e 	bl	8001a54 <NVIC_EncodePriority>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5d 	bl	8001a00 <__NVIC_SetPriority>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff31 	bl	80019c4 <__NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffa2 	bl	8001abc <SysTick_Config>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e014      	b.n	8001bbe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	791b      	ldrb	r3, [r3, #4]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d105      	bne.n	8001baa <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7fe fd0f 	bl	80005c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2202      	movs	r2, #2
 8001bae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001bc6:	b480      	push	{r7}
 8001bc8:	b087      	sub	sp, #28
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d105      	bne.n	8001bf0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	3308      	adds	r3, #8
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e004      	b.n	8001bfa <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3314      	adds	r3, #20
 8001bf8:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	371c      	adds	r7, #28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	795b      	ldrb	r3, [r3, #5]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <HAL_DAC_Start+0x16>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e039      	b.n	8001c9a <HAL_DAC_Start+0x8a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6819      	ldr	r1, [r3, #0]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10f      	bne.n	8001c6c <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001c56:	2b3c      	cmp	r3, #60	@ 0x3c
 8001c58:	d118      	bne.n	8001c8c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 0201 	orr.w	r2, r2, #1
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	e00f      	b.n	8001c8c <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001c76:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 8001c7a:	d107      	bne.n	8001c8c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0202 	orr.w	r2, r2, #2
 8001c8a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b087      	sub	sp, #28
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	795b      	ldrb	r3, [r3, #5]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_DAC_ConfigChannel+0x20>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e036      	b.n	8001d34 <HAL_DAC_ConfigChannel+0x8e>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001cda:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6819      	ldr	r1, [r3, #0]
 8001d14:	22c0      	movs	r2, #192	@ 0xc0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43da      	mvns	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	400a      	ands	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e037      	b.n	8001dc6 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2202      	movs	r2, #2
 8001d5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001d6c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001d70:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f941 	bl	8002030 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_DMA_Start_IT+0x20>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e04a      	b.n	8001e84 <HAL_DMA_Start_IT+0xb6>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d13a      	bne.n	8001e76 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0201 	bic.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 f8d4 	bl	8001fd2 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d008      	beq.n	8001e44 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 020e 	orr.w	r2, r2, #14
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	e00f      	b.n	8001e64 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 020a 	orr.w	r2, r2, #10
 8001e52:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0204 	bic.w	r2, r2, #4
 8001e62:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e005      	b.n	8001e82 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d024      	beq.n	8001efe <HAL_DMA_IRQHandler+0x72>
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d01f      	beq.n	8001efe <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0204 	bic.w	r2, r2, #4
 8001eda:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ee4:	2104      	movs	r1, #4
 8001ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d06a      	beq.n	8001fca <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001efc:	e065      	b.n	8001fca <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	2202      	movs	r2, #2
 8001f04:	409a      	lsls	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d02c      	beq.n	8001f68 <HAL_DMA_IRQHandler+0xdc>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d027      	beq.n	8001f68 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10b      	bne.n	8001f3e <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 020a 	bic.w	r2, r2, #10
 8001f34:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f46:	2102      	movs	r1, #2
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d035      	beq.n	8001fca <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f66:	e030      	b.n	8001fca <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d028      	beq.n	8001fca <HAL_DMA_IRQHandler+0x13e>
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d023      	beq.n	8001fca <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 020e 	bic.w	r2, r2, #14
 8001f90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d004      	beq.n	8001fca <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
    }
  }
}
 8001fc8:	e7ff      	b.n	8001fca <HAL_DMA_IRQHandler+0x13e>
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b085      	sub	sp, #20
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe8:	2101      	movs	r1, #1
 8001fea:	fa01 f202 	lsl.w	r2, r1, r2
 8001fee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b10      	cmp	r3, #16
 8001ffe:	d108      	bne.n	8002012 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002010:	e007      	b.n	8002022 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	60da      	str	r2, [r3, #12]
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <DMA_CalcBaseAndBitshift+0x60>)
 8002040:	429a      	cmp	r2, r3
 8002042:	d80f      	bhi.n	8002064 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <DMA_CalcBaseAndBitshift+0x64>)
 800204c:	4413      	add	r3, r2
 800204e:	4a12      	ldr	r2, [pc, #72]	@ (8002098 <DMA_CalcBaseAndBitshift+0x68>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	009a      	lsls	r2, r3, #2
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a0f      	ldr	r2, [pc, #60]	@ (800209c <DMA_CalcBaseAndBitshift+0x6c>)
 8002060:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002062:	e00e      	b.n	8002082 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <DMA_CalcBaseAndBitshift+0x70>)
 800206c:	4413      	add	r3, r2
 800206e:	4a0a      	ldr	r2, [pc, #40]	@ (8002098 <DMA_CalcBaseAndBitshift+0x68>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	009a      	lsls	r2, r3, #2
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a09      	ldr	r2, [pc, #36]	@ (80020a4 <DMA_CalcBaseAndBitshift+0x74>)
 8002080:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40020407 	.word	0x40020407
 8002094:	bffdfff8 	.word	0xbffdfff8
 8002098:	cccccccd 	.word	0xcccccccd
 800209c:	40020000 	.word	0x40020000
 80020a0:	bffdfbf8 	.word	0xbffdfbf8
 80020a4:	40020400 	.word	0x40020400

080020a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b6:	e160      	b.n	800237a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2101      	movs	r1, #1
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8152 	beq.w	8002374 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d005      	beq.n	80020e8 <HAL_GPIO_Init+0x40>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d130      	bne.n	800214a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800211e:	2201      	movs	r2, #1
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	f003 0201 	and.w	r2, r3, #1
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b03      	cmp	r3, #3
 8002154:	d017      	beq.n	8002186 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	2203      	movs	r2, #3
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d123      	bne.n	80021da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	08da      	lsrs	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3208      	adds	r2, #8
 800219a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	220f      	movs	r2, #15
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	691a      	ldr	r2, [r3, #16]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	08da      	lsrs	r2, r3, #3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3208      	adds	r2, #8
 80021d4:	6939      	ldr	r1, [r7, #16]
 80021d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	2203      	movs	r2, #3
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0203 	and.w	r2, r3, #3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80ac 	beq.w	8002374 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221c:	4b5e      	ldr	r3, [pc, #376]	@ (8002398 <HAL_GPIO_Init+0x2f0>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a5d      	ldr	r2, [pc, #372]	@ (8002398 <HAL_GPIO_Init+0x2f0>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b5b      	ldr	r3, [pc, #364]	@ (8002398 <HAL_GPIO_Init+0x2f0>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002234:	4a59      	ldr	r2, [pc, #356]	@ (800239c <HAL_GPIO_Init+0x2f4>)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	220f      	movs	r2, #15
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800225e:	d025      	beq.n	80022ac <HAL_GPIO_Init+0x204>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a4f      	ldr	r2, [pc, #316]	@ (80023a0 <HAL_GPIO_Init+0x2f8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d01f      	beq.n	80022a8 <HAL_GPIO_Init+0x200>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a4e      	ldr	r2, [pc, #312]	@ (80023a4 <HAL_GPIO_Init+0x2fc>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d019      	beq.n	80022a4 <HAL_GPIO_Init+0x1fc>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a4d      	ldr	r2, [pc, #308]	@ (80023a8 <HAL_GPIO_Init+0x300>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d013      	beq.n	80022a0 <HAL_GPIO_Init+0x1f8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a4c      	ldr	r2, [pc, #304]	@ (80023ac <HAL_GPIO_Init+0x304>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00d      	beq.n	800229c <HAL_GPIO_Init+0x1f4>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a4b      	ldr	r2, [pc, #300]	@ (80023b0 <HAL_GPIO_Init+0x308>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d007      	beq.n	8002298 <HAL_GPIO_Init+0x1f0>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a4a      	ldr	r2, [pc, #296]	@ (80023b4 <HAL_GPIO_Init+0x30c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d101      	bne.n	8002294 <HAL_GPIO_Init+0x1ec>
 8002290:	2306      	movs	r3, #6
 8002292:	e00c      	b.n	80022ae <HAL_GPIO_Init+0x206>
 8002294:	2307      	movs	r3, #7
 8002296:	e00a      	b.n	80022ae <HAL_GPIO_Init+0x206>
 8002298:	2305      	movs	r3, #5
 800229a:	e008      	b.n	80022ae <HAL_GPIO_Init+0x206>
 800229c:	2304      	movs	r3, #4
 800229e:	e006      	b.n	80022ae <HAL_GPIO_Init+0x206>
 80022a0:	2303      	movs	r3, #3
 80022a2:	e004      	b.n	80022ae <HAL_GPIO_Init+0x206>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e002      	b.n	80022ae <HAL_GPIO_Init+0x206>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_GPIO_Init+0x206>
 80022ac:	2300      	movs	r3, #0
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	f002 0203 	and.w	r2, r2, #3
 80022b4:	0092      	lsls	r2, r2, #2
 80022b6:	4093      	lsls	r3, r2
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022be:	4937      	ldr	r1, [pc, #220]	@ (800239c <HAL_GPIO_Init+0x2f4>)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3302      	adds	r3, #2
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022cc:	4b3a      	ldr	r3, [pc, #232]	@ (80023b8 <HAL_GPIO_Init+0x310>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022f0:	4a31      	ldr	r2, [pc, #196]	@ (80023b8 <HAL_GPIO_Init+0x310>)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f6:	4b30      	ldr	r3, [pc, #192]	@ (80023b8 <HAL_GPIO_Init+0x310>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800231a:	4a27      	ldr	r2, [pc, #156]	@ (80023b8 <HAL_GPIO_Init+0x310>)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002320:	4b25      	ldr	r3, [pc, #148]	@ (80023b8 <HAL_GPIO_Init+0x310>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002344:	4a1c      	ldr	r2, [pc, #112]	@ (80023b8 <HAL_GPIO_Init+0x310>)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800234a:	4b1b      	ldr	r3, [pc, #108]	@ (80023b8 <HAL_GPIO_Init+0x310>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800236e:	4a12      	ldr	r2, [pc, #72]	@ (80023b8 <HAL_GPIO_Init+0x310>)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3301      	adds	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	f47f ae97 	bne.w	80020b8 <HAL_GPIO_Init+0x10>
  }
}
 800238a:	bf00      	nop
 800238c:	bf00      	nop
 800238e:	371c      	adds	r7, #28
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	40021000 	.word	0x40021000
 800239c:	40010000 	.word	0x40010000
 80023a0:	48000400 	.word	0x48000400
 80023a4:	48000800 	.word	0x48000800
 80023a8:	48000c00 	.word	0x48000c00
 80023ac:	48001000 	.word	0x48001000
 80023b0:	48001400 	.word	0x48001400
 80023b4:	48001800 	.word	0x48001800
 80023b8:	40010400 	.word	0x40010400

080023bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	f001 b80a 	b.w	80033f6 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8161 	beq.w	80026ba <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023f8:	4bae      	ldr	r3, [pc, #696]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b04      	cmp	r3, #4
 8002402:	d00c      	beq.n	800241e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002404:	4bab      	ldr	r3, [pc, #684]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 030c 	and.w	r3, r3, #12
 800240c:	2b08      	cmp	r3, #8
 800240e:	d157      	bne.n	80024c0 <HAL_RCC_OscConfig+0x104>
 8002410:	4ba8      	ldr	r3, [pc, #672]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800241c:	d150      	bne.n	80024c0 <HAL_RCC_OscConfig+0x104>
 800241e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002422:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800242a:	fa93 f3a3 	rbit	r3, r3
 800242e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002432:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b3f      	cmp	r3, #63	@ 0x3f
 800243e:	d802      	bhi.n	8002446 <HAL_RCC_OscConfig+0x8a>
 8002440:	4b9c      	ldr	r3, [pc, #624]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	e015      	b.n	8002472 <HAL_RCC_OscConfig+0xb6>
 8002446:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800244a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800245a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800245e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002462:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800246e:	4b91      	ldr	r3, [pc, #580]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002476:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800247a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800247e:	fa92 f2a2 	rbit	r2, r2
 8002482:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002486:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800248a:	fab2 f282 	clz	r2, r2
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f042 0220 	orr.w	r2, r2, #32
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f002 021f 	and.w	r2, r2, #31
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f202 	lsl.w	r2, r1, r2
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8108 	beq.w	80026b8 <HAL_RCC_OscConfig+0x2fc>
 80024a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 80ff 	bne.w	80026b8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f000 bf9b 	b.w	80033f6 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d0:	d106      	bne.n	80024e0 <HAL_RCC_OscConfig+0x124>
 80024d2:	4b78      	ldr	r3, [pc, #480]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a77      	ldr	r2, [pc, #476]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e036      	b.n	800254e <HAL_RCC_OscConfig+0x192>
 80024e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10c      	bne.n	800250a <HAL_RCC_OscConfig+0x14e>
 80024f0:	4b70      	ldr	r3, [pc, #448]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a6f      	ldr	r2, [pc, #444]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80024f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4b6d      	ldr	r3, [pc, #436]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a6c      	ldr	r2, [pc, #432]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	e021      	b.n	800254e <HAL_RCC_OscConfig+0x192>
 800250a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800250e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800251a:	d10c      	bne.n	8002536 <HAL_RCC_OscConfig+0x17a>
 800251c:	4b65      	ldr	r3, [pc, #404]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a64      	ldr	r2, [pc, #400]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002522:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b62      	ldr	r3, [pc, #392]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a61      	ldr	r2, [pc, #388]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 800252e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e00b      	b.n	800254e <HAL_RCC_OscConfig+0x192>
 8002536:	4b5f      	ldr	r3, [pc, #380]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a5e      	ldr	r2, [pc, #376]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 800253c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b5c      	ldr	r3, [pc, #368]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a5b      	ldr	r2, [pc, #364]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 8002548:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800254c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800254e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002552:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d054      	beq.n	8002608 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7fe f941 	bl	80007e4 <HAL_GetTick>
 8002562:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002568:	f7fe f93c 	bl	80007e4 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b64      	cmp	r3, #100	@ 0x64
 8002576:	d902      	bls.n	800257e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	f000 bf3c 	b.w	80033f6 <HAL_RCC_OscConfig+0x103a>
 800257e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002582:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002592:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b3f      	cmp	r3, #63	@ 0x3f
 800259e:	d802      	bhi.n	80025a6 <HAL_RCC_OscConfig+0x1ea>
 80025a0:	4b44      	ldr	r3, [pc, #272]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0x216>
 80025a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025aa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80025ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025be:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80025c2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80025ce:	4b39      	ldr	r3, [pc, #228]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025d6:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80025da:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80025de:	fa92 f2a2 	rbit	r2, r2
 80025e2:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80025e6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80025ea:	fab2 f282 	clz	r2, r2
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f042 0220 	orr.w	r2, r2, #32
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	f002 021f 	and.w	r2, r2, #31
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0b0      	beq.n	8002568 <HAL_RCC_OscConfig+0x1ac>
 8002606:	e058      	b.n	80026ba <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe f8ec 	bl	80007e4 <HAL_GetTick>
 800260c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002612:	f7fe f8e7 	bl	80007e4 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	@ 0x64
 8002620:	d902      	bls.n	8002628 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	f000 bee7 	b.w	80033f6 <HAL_RCC_OscConfig+0x103a>
 8002628:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800262c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 800263c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b3f      	cmp	r3, #63	@ 0x3f
 8002648:	d802      	bhi.n	8002650 <HAL_RCC_OscConfig+0x294>
 800264a:	4b1a      	ldr	r3, [pc, #104]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	e015      	b.n	800267c <HAL_RCC_OscConfig+0x2c0>
 8002650:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002654:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002664:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002668:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800266c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002678:	4b0e      	ldr	r3, [pc, #56]	@ (80026b4 <HAL_RCC_OscConfig+0x2f8>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002680:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002684:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002688:	fa92 f2a2 	rbit	r2, r2
 800268c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002690:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002694:	fab2 f282 	clz	r2, r2
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	f042 0220 	orr.w	r2, r2, #32
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	f002 021f 	and.w	r2, r2, #31
 80026a4:	2101      	movs	r1, #1
 80026a6:	fa01 f202 	lsl.w	r2, r1, r2
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1b0      	bne.n	8002612 <HAL_RCC_OscConfig+0x256>
 80026b0:	e003      	b.n	80026ba <HAL_RCC_OscConfig+0x2fe>
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 816d 	beq.w	80029aa <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026d0:	4bcd      	ldr	r3, [pc, #820]	@ (8002a08 <HAL_RCC_OscConfig+0x64c>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026dc:	4bca      	ldr	r3, [pc, #808]	@ (8002a08 <HAL_RCC_OscConfig+0x64c>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d16e      	bne.n	80027c6 <HAL_RCC_OscConfig+0x40a>
 80026e8:	4bc7      	ldr	r3, [pc, #796]	@ (8002a08 <HAL_RCC_OscConfig+0x64c>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80026f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026f4:	d167      	bne.n	80027c6 <HAL_RCC_OscConfig+0x40a>
 80026f6:	2302      	movs	r3, #2
 80026f8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002708:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b3f      	cmp	r3, #63	@ 0x3f
 8002714:	d802      	bhi.n	800271c <HAL_RCC_OscConfig+0x360>
 8002716:	4bbc      	ldr	r3, [pc, #752]	@ (8002a08 <HAL_RCC_OscConfig+0x64c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	e013      	b.n	8002744 <HAL_RCC_OscConfig+0x388>
 800271c:	2302      	movs	r3, #2
 800271e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800272e:	2302      	movs	r3, #2
 8002730:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002734:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002740:	4bb1      	ldr	r3, [pc, #708]	@ (8002a08 <HAL_RCC_OscConfig+0x64c>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	2202      	movs	r2, #2
 8002746:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800274a:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800274e:	fa92 f2a2 	rbit	r2, r2
 8002752:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002756:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800275a:	fab2 f282 	clz	r2, r2
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	f042 0220 	orr.w	r2, r2, #32
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	f002 021f 	and.w	r2, r2, #31
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f202 	lsl.w	r2, r1, r2
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCC_OscConfig+0x3d0>
 8002776:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800277a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d002      	beq.n	800278c <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	f000 be35 	b.w	80033f6 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b9e      	ldr	r3, [pc, #632]	@ (8002a08 <HAL_RCC_OscConfig+0x64c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002794:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002798:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	21f8      	movs	r1, #248	@ 0xf8
 80027a2:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80027aa:	fa91 f1a1 	rbit	r1, r1
 80027ae:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80027b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80027b6:	fab1 f181 	clz	r1, r1
 80027ba:	b2c9      	uxtb	r1, r1
 80027bc:	408b      	lsls	r3, r1
 80027be:	4992      	ldr	r1, [pc, #584]	@ (8002a08 <HAL_RCC_OscConfig+0x64c>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c4:	e0f1      	b.n	80029aa <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8083 	beq.w	80028de <HAL_RCC_OscConfig+0x522>
 80027d8:	2301      	movs	r3, #1
 80027da:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80027ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	461a      	mov	r2, r3
 8002800:	2301      	movs	r3, #1
 8002802:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7fd ffee 	bl	80007e4 <HAL_GetTick>
 8002808:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800280e:	f7fd ffe9 	bl	80007e4 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d902      	bls.n	8002824 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	f000 bde9 	b.w	80033f6 <HAL_RCC_OscConfig+0x103a>
 8002824:	2302      	movs	r3, #2
 8002826:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002836:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b3f      	cmp	r3, #63	@ 0x3f
 8002842:	d802      	bhi.n	800284a <HAL_RCC_OscConfig+0x48e>
 8002844:	4b70      	ldr	r3, [pc, #448]	@ (8002a08 <HAL_RCC_OscConfig+0x64c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	e013      	b.n	8002872 <HAL_RCC_OscConfig+0x4b6>
 800284a:	2302      	movs	r3, #2
 800284c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800285c:	2302      	movs	r3, #2
 800285e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002862:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800286e:	4b66      	ldr	r3, [pc, #408]	@ (8002a08 <HAL_RCC_OscConfig+0x64c>)
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	2202      	movs	r2, #2
 8002874:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002878:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800287c:	fa92 f2a2 	rbit	r2, r2
 8002880:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002884:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002888:	fab2 f282 	clz	r2, r2
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	f042 0220 	orr.w	r2, r2, #32
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	f002 021f 	and.w	r2, r2, #31
 8002898:	2101      	movs	r1, #1
 800289a:	fa01 f202 	lsl.w	r2, r1, r2
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0b4      	beq.n	800280e <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a4:	4b58      	ldr	r3, [pc, #352]	@ (8002a08 <HAL_RCC_OscConfig+0x64c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	21f8      	movs	r1, #248	@ 0xf8
 80028ba:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80028c2:	fa91 f1a1 	rbit	r1, r1
 80028c6:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80028ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80028ce:	fab1 f181 	clz	r1, r1
 80028d2:	b2c9      	uxtb	r1, r1
 80028d4:	408b      	lsls	r3, r1
 80028d6:	494c      	ldr	r1, [pc, #304]	@ (8002a08 <HAL_RCC_OscConfig+0x64c>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	600b      	str	r3, [r1, #0]
 80028dc:	e065      	b.n	80029aa <HAL_RCC_OscConfig+0x5ee>
 80028de:	2301      	movs	r3, #1
 80028e0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80028f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028fe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	461a      	mov	r2, r3
 8002906:	2300      	movs	r3, #0
 8002908:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7fd ff6b 	bl	80007e4 <HAL_GetTick>
 800290e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	e00a      	b.n	800292a <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002914:	f7fd ff66 	bl	80007e4 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d902      	bls.n	800292a <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	f000 bd66 	b.w	80033f6 <HAL_RCC_OscConfig+0x103a>
 800292a:	2302      	movs	r3, #2
 800292c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800293c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b3f      	cmp	r3, #63	@ 0x3f
 8002948:	d802      	bhi.n	8002950 <HAL_RCC_OscConfig+0x594>
 800294a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a08 <HAL_RCC_OscConfig+0x64c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	e013      	b.n	8002978 <HAL_RCC_OscConfig+0x5bc>
 8002950:	2302      	movs	r3, #2
 8002952:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002962:	2302      	movs	r3, #2
 8002964:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002968:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002974:	4b24      	ldr	r3, [pc, #144]	@ (8002a08 <HAL_RCC_OscConfig+0x64c>)
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	2202      	movs	r2, #2
 800297a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800297e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002982:	fa92 f2a2 	rbit	r2, r2
 8002986:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800298a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800298e:	fab2 f282 	clz	r2, r2
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	f042 0220 	orr.w	r2, r2, #32
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	f002 021f 	and.w	r2, r2, #31
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f202 	lsl.w	r2, r1, r2
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1b4      	bne.n	8002914 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8119 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8082 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x71a>
 80029d2:	2301      	movs	r3, #1
 80029d4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80029e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_RCC_OscConfig+0x650>)
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	461a      	mov	r2, r3
 80029f8:	2301      	movs	r3, #1
 80029fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fc:	f7fd fef2 	bl	80007e4 <HAL_GetTick>
 8002a00:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a04:	e00f      	b.n	8002a26 <HAL_RCC_OscConfig+0x66a>
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a10:	f7fd fee8 	bl	80007e4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d902      	bls.n	8002a26 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	f000 bce8 	b.w	80033f6 <HAL_RCC_OscConfig+0x103a>
 8002a26:	2302      	movs	r3, #2
 8002a28:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a30:	fa93 f2a3 	rbit	r2, r3
 8002a34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a38:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a46:	2202      	movs	r2, #2
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	fa93 f2a3 	rbit	r2, r3
 8002a58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	fa93 f2a3 	rbit	r2, r3
 8002a7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a80:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	4bb0      	ldr	r3, [pc, #704]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002a88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a8e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a92:	2102      	movs	r1, #2
 8002a94:	6019      	str	r1, [r3, #0]
 8002a96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a9a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	fa93 f1a3 	rbit	r1, r3
 8002aa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002aac:	6019      	str	r1, [r3, #0]
  return result;
 8002aae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	2101      	movs	r1, #1
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d09d      	beq.n	8002a10 <HAL_RCC_OscConfig+0x654>
 8002ad4:	e08d      	b.n	8002bf2 <HAL_RCC_OscConfig+0x836>
 8002ad6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ada:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	fa93 f2a3 	rbit	r2, r3
 8002af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002af8:	601a      	str	r2, [r3, #0]
  return result;
 8002afa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002afe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002b02:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b8f      	ldr	r3, [pc, #572]	@ (8002d4c <HAL_RCC_OscConfig+0x990>)
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	461a      	mov	r2, r3
 8002b14:	2300      	movs	r3, #0
 8002b16:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b18:	f7fd fe64 	bl	80007e4 <HAL_GetTick>
 8002b1c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b22:	f7fd fe5f 	bl	80007e4 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d902      	bls.n	8002b38 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	f000 bc5f 	b.w	80033f6 <HAL_RCC_OscConfig+0x103a>
 8002b38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b3c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b40:	2202      	movs	r2, #2
 8002b42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b48:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	fa93 f2a3 	rbit	r2, r3
 8002b52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b56:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b64:	2202      	movs	r2, #2
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	fa93 f2a3 	rbit	r2, r3
 8002b76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b7a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b84:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002b88:	2202      	movs	r2, #2
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b90:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	fa93 f2a3 	rbit	r2, r3
 8002b9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b9e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ba2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	4b68      	ldr	r3, [pc, #416]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002ba6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ba8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	6019      	str	r1, [r3, #0]
 8002bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	fa93 f1a3 	rbit	r1, r3
 8002bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002bca:	6019      	str	r1, [r3, #0]
  return result;
 8002bcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bd0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	2101      	movs	r1, #1
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d197      	bne.n	8002b22 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bf6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 819c 	beq.w	8002f40 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d116      	bne.n	8002c48 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	4a4a      	ldr	r2, [pc, #296]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c24:	61d3      	str	r3, [r2, #28]
 8002c26:	4b48      	ldr	r3, [pc, #288]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002c2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c40:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	4b41      	ldr	r3, [pc, #260]	@ (8002d50 <HAL_RCC_OscConfig+0x994>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d11a      	bne.n	8002c8a <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c54:	4b3e      	ldr	r3, [pc, #248]	@ (8002d50 <HAL_RCC_OscConfig+0x994>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a3d      	ldr	r2, [pc, #244]	@ (8002d50 <HAL_RCC_OscConfig+0x994>)
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c5e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c60:	f7fd fdc0 	bl	80007e4 <HAL_GetTick>
 8002c64:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c68:	e009      	b.n	8002c7e <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6a:	f7fd fdbb 	bl	80007e4 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	@ 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e3bb      	b.n	80033f6 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7e:	4b34      	ldr	r3, [pc, #208]	@ (8002d50 <HAL_RCC_OscConfig+0x994>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0ef      	beq.n	8002c6a <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d106      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x8ec>
 8002c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6213      	str	r3, [r2, #32]
 8002ca6:	e035      	b.n	8002d14 <HAL_RCC_OscConfig+0x958>
 8002ca8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10c      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x916>
 8002cb8:	4b23      	ldr	r3, [pc, #140]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	4a22      	ldr	r2, [pc, #136]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	6213      	str	r3, [r2, #32]
 8002cc4:	4b20      	ldr	r3, [pc, #128]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002cca:	f023 0304 	bic.w	r3, r3, #4
 8002cce:	6213      	str	r3, [r2, #32]
 8002cd0:	e020      	b.n	8002d14 <HAL_RCC_OscConfig+0x958>
 8002cd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cd6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b05      	cmp	r3, #5
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x940>
 8002ce2:	4b19      	ldr	r3, [pc, #100]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4a18      	ldr	r2, [pc, #96]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	6213      	str	r3, [r2, #32]
 8002cee:	4b16      	ldr	r3, [pc, #88]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a15      	ldr	r2, [pc, #84]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6213      	str	r3, [r2, #32]
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCC_OscConfig+0x958>
 8002cfc:	4b12      	ldr	r3, [pc, #72]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4a11      	ldr	r2, [pc, #68]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	6213      	str	r3, [r2, #32]
 8002d08:	4b0f      	ldr	r3, [pc, #60]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002d48 <HAL_RCC_OscConfig+0x98c>)
 8002d0e:	f023 0304 	bic.w	r3, r3, #4
 8002d12:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8085 	beq.w	8002e30 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d26:	f7fd fd5d 	bl	80007e4 <HAL_GetTick>
 8002d2a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2e:	e011      	b.n	8002d54 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fd fd58 	bl	80007e4 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d907      	bls.n	8002d54 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e356      	b.n	80033f6 <HAL_RCC_OscConfig+0x103a>
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	10908120 	.word	0x10908120
 8002d50:	40007000 	.word	0x40007000
 8002d54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d58:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d64:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	fa93 f2a3 	rbit	r2, r3
 8002d6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d72:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d7c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002d80:	2202      	movs	r2, #2
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d88:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	fa93 f2a3 	rbit	r2, r3
 8002d92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d96:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002d9a:	601a      	str	r2, [r3, #0]
  return result;
 8002d9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002da0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002da4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <HAL_RCC_OscConfig+0xa00>
 8002db6:	4b98      	ldr	r3, [pc, #608]	@ (8003018 <HAL_RCC_OscConfig+0xc5c>)
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	e013      	b.n	8002de4 <HAL_RCC_OscConfig+0xa28>
 8002dbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dcc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	fa93 f2a3 	rbit	r2, r3
 8002dd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dda:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	4b8d      	ldr	r3, [pc, #564]	@ (8003018 <HAL_RCC_OscConfig+0xc5c>)
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002de8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002dec:	2102      	movs	r1, #2
 8002dee:	6011      	str	r1, [r2, #0]
 8002df0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002df4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	fa92 f1a2 	rbit	r1, r2
 8002dfe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e02:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002e06:	6011      	str	r1, [r2, #0]
  return result;
 8002e08:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e0c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	fab2 f282 	clz	r2, r2
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f002 021f 	and.w	r2, r2, #31
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f202 	lsl.w	r2, r1, r2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d080      	beq.n	8002d30 <HAL_RCC_OscConfig+0x974>
 8002e2e:	e07d      	b.n	8002f2c <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7fd fcd8 	bl	80007e4 <HAL_GetTick>
 8002e34:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e38:	e00b      	b.n	8002e52 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7fd fcd3 	bl	80007e4 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e2d1      	b.n	80033f6 <HAL_RCC_OscConfig+0x103a>
 8002e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e56:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e62:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fa93 f2a3 	rbit	r2, r3
 8002e6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e70:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e7a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002e7e:	2202      	movs	r2, #2
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e86:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	fa93 f2a3 	rbit	r2, r3
 8002e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e94:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e98:	601a      	str	r2, [r3, #0]
  return result;
 8002e9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e9e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002ea2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <HAL_RCC_OscConfig+0xafe>
 8002eb4:	4b58      	ldr	r3, [pc, #352]	@ (8003018 <HAL_RCC_OscConfig+0xc5c>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	e013      	b.n	8002ee2 <HAL_RCC_OscConfig+0xb26>
 8002eba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ebe:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eca:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	fa93 f2a3 	rbit	r2, r3
 8002ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed8:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	4b4e      	ldr	r3, [pc, #312]	@ (8003018 <HAL_RCC_OscConfig+0xc5c>)
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ee6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002eea:	2102      	movs	r1, #2
 8002eec:	6011      	str	r1, [r2, #0]
 8002eee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ef2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	fa92 f1a2 	rbit	r1, r2
 8002efc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f00:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002f04:	6011      	str	r1, [r2, #0]
  return result;
 8002f06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f0a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	fab2 f282 	clz	r2, r2
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	f002 021f 	and.w	r2, r2, #31
 8002f20:	2101      	movs	r1, #1
 8002f22:	fa01 f202 	lsl.w	r2, r1, r2
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d186      	bne.n	8002e3a <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f2c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f34:	4b38      	ldr	r3, [pc, #224]	@ (8003018 <HAL_RCC_OscConfig+0xc5c>)
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	4a37      	ldr	r2, [pc, #220]	@ (8003018 <HAL_RCC_OscConfig+0xc5c>)
 8002f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 8251 	beq.w	80033f4 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f52:	4b31      	ldr	r3, [pc, #196]	@ (8003018 <HAL_RCC_OscConfig+0xc5c>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	f000 820f 	beq.w	800337e <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	f040 8165 	bne.w	800323c <HAL_RCC_OscConfig+0xe80>
 8002f72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f76:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002f7a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f84:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	fa93 f2a3 	rbit	r2, r3
 8002f8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f92:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f96:	601a      	str	r2, [r3, #0]
  return result;
 8002f98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f9c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002fa0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fd fc14 	bl	80007e4 <HAL_GetTick>
 8002fbc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc0:	e009      	b.n	8002fd6 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc2:	f7fd fc0f 	bl	80007e4 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e20f      	b.n	80033f6 <HAL_RCC_OscConfig+0x103a>
 8002fd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fda:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002fde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fe2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	fa93 f2a3 	rbit	r2, r3
 8002ff2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ff6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ffa:	601a      	str	r2, [r3, #0]
  return result;
 8002ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003000:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003004:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003006:	fab3 f383 	clz	r3, r3
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b3f      	cmp	r3, #63	@ 0x3f
 800300e:	d805      	bhi.n	800301c <HAL_RCC_OscConfig+0xc60>
 8003010:	4b01      	ldr	r3, [pc, #4]	@ (8003018 <HAL_RCC_OscConfig+0xc5c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	e02a      	b.n	800306c <HAL_RCC_OscConfig+0xcb0>
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
 800301c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003020:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003024:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003028:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800302e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	fa93 f2a3 	rbit	r2, r3
 8003038:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800303c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003046:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800304a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003054:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	fa93 f2a3 	rbit	r2, r3
 800305e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003062:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	4bca      	ldr	r3, [pc, #808]	@ (8003394 <HAL_RCC_OscConfig+0xfd8>)
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003070:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003074:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003078:	6011      	str	r1, [r2, #0]
 800307a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800307e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	fa92 f1a2 	rbit	r1, r2
 8003088:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800308c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003090:	6011      	str	r1, [r2, #0]
  return result;
 8003092:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003096:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	fab2 f282 	clz	r2, r2
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	f042 0220 	orr.w	r2, r2, #32
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	f002 021f 	and.w	r2, r2, #31
 80030ac:	2101      	movs	r1, #1
 80030ae:	fa01 f202 	lsl.w	r2, r1, r2
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d184      	bne.n	8002fc2 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b8:	4bb6      	ldr	r3, [pc, #728]	@ (8003394 <HAL_RCC_OscConfig+0xfd8>)
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	f023 020f 	bic.w	r2, r3, #15
 80030c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	49b1      	ldr	r1, [pc, #708]	@ (8003394 <HAL_RCC_OscConfig+0xfd8>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80030d2:	4bb0      	ldr	r3, [pc, #704]	@ (8003394 <HAL_RCC_OscConfig+0xfd8>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80030da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6a19      	ldr	r1, [r3, #32]
 80030e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	430b      	orrs	r3, r1
 80030f4:	49a7      	ldr	r1, [pc, #668]	@ (8003394 <HAL_RCC_OscConfig+0xfd8>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	604b      	str	r3, [r1, #4]
 80030fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030fe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003102:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800310c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	fa93 f2a3 	rbit	r2, r3
 8003116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800311a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800311e:	601a      	str	r2, [r3, #0]
  return result;
 8003120:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003124:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003128:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003134:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	461a      	mov	r2, r3
 800313c:	2301      	movs	r3, #1
 800313e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fd fb50 	bl	80007e4 <HAL_GetTick>
 8003144:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003148:	e009      	b.n	800315e <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314a:	f7fd fb4b 	bl	80007e4 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e14b      	b.n	80033f6 <HAL_RCC_OscConfig+0x103a>
 800315e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003162:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003166:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800316a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003170:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	fa93 f2a3 	rbit	r2, r3
 800317a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800317e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003182:	601a      	str	r2, [r3, #0]
  return result;
 8003184:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003188:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800318c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b3f      	cmp	r3, #63	@ 0x3f
 8003196:	d802      	bhi.n	800319e <HAL_RCC_OscConfig+0xde2>
 8003198:	4b7e      	ldr	r3, [pc, #504]	@ (8003394 <HAL_RCC_OscConfig+0xfd8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	e027      	b.n	80031ee <HAL_RCC_OscConfig+0xe32>
 800319e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	fa93 f2a3 	rbit	r2, r3
 80031ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031be:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031c8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80031cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031d6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	fa93 f2a3 	rbit	r2, r3
 80031e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031e4:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003394 <HAL_RCC_OscConfig+0xfd8>)
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031f2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80031f6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031fa:	6011      	str	r1, [r2, #0]
 80031fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003200:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	fa92 f1a2 	rbit	r1, r2
 800320a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800320e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003212:	6011      	str	r1, [r2, #0]
  return result;
 8003214:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003218:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	fab2 f282 	clz	r2, r2
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	f042 0220 	orr.w	r2, r2, #32
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	f002 021f 	and.w	r2, r2, #31
 800322e:	2101      	movs	r1, #1
 8003230:	fa01 f202 	lsl.w	r2, r1, r2
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d087      	beq.n	800314a <HAL_RCC_OscConfig+0xd8e>
 800323a:	e0db      	b.n	80033f4 <HAL_RCC_OscConfig+0x1038>
 800323c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003240:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003244:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003248:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800324e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	fa93 f2a3 	rbit	r2, r3
 8003258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800325c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003260:	601a      	str	r2, [r3, #0]
  return result;
 8003262:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003266:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800326a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003276:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	461a      	mov	r2, r3
 800327e:	2300      	movs	r3, #0
 8003280:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003282:	f7fd faaf 	bl	80007e4 <HAL_GetTick>
 8003286:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328a:	e009      	b.n	80032a0 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800328c:	f7fd faaa 	bl	80007e4 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e0aa      	b.n	80033f6 <HAL_RCC_OscConfig+0x103a>
 80032a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032a4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80032a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032b2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	fa93 f2a3 	rbit	r2, r3
 80032bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80032c4:	601a      	str	r2, [r3, #0]
  return result;
 80032c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ca:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80032ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d0:	fab3 f383 	clz	r3, r3
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80032d8:	d802      	bhi.n	80032e0 <HAL_RCC_OscConfig+0xf24>
 80032da:	4b2e      	ldr	r3, [pc, #184]	@ (8003394 <HAL_RCC_OscConfig+0xfd8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	e027      	b.n	8003330 <HAL_RCC_OscConfig+0xf74>
 80032e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032e4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80032e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032f2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	fa93 f2a3 	rbit	r2, r3
 80032fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003300:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800330a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800330e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003318:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	fa93 f2a3 	rbit	r2, r3
 8003322:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003326:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <HAL_RCC_OscConfig+0xfd8>)
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003334:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003338:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800333c:	6011      	str	r1, [r2, #0]
 800333e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003342:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	fa92 f1a2 	rbit	r1, r2
 800334c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003350:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003354:	6011      	str	r1, [r2, #0]
  return result;
 8003356:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800335a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	fab2 f282 	clz	r2, r2
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	f042 0220 	orr.w	r2, r2, #32
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	f002 021f 	and.w	r2, r2, #31
 8003370:	2101      	movs	r1, #1
 8003372:	fa01 f202 	lsl.w	r2, r1, r2
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d187      	bne.n	800328c <HAL_RCC_OscConfig+0xed0>
 800337c:	e03a      	b.n	80033f4 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003382:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d104      	bne.n	8003398 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e031      	b.n	80033f6 <HAL_RCC_OscConfig+0x103a>
 8003392:	bf00      	nop
 8003394:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003398:	4b19      	ldr	r3, [pc, #100]	@ (8003400 <HAL_RCC_OscConfig+0x1044>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80033a0:	4b17      	ldr	r3, [pc, #92]	@ (8003400 <HAL_RCC_OscConfig+0x1044>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80033ac:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80033b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d117      	bne.n	80033f0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80033c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80033c4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d10b      	bne.n	80033f0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80033d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033dc:	f003 020f 	and.w	r2, r3, #15
 80033e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000

08003404 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b09e      	sub	sp, #120	@ 0x78
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e154      	b.n	80036c6 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b89      	ldr	r3, [pc, #548]	@ (8003644 <HAL_RCC_ClockConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d910      	bls.n	800344c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b86      	ldr	r3, [pc, #536]	@ (8003644 <HAL_RCC_ClockConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 0207 	bic.w	r2, r3, #7
 8003432:	4984      	ldr	r1, [pc, #528]	@ (8003644 <HAL_RCC_ClockConfig+0x240>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b82      	ldr	r3, [pc, #520]	@ (8003644 <HAL_RCC_ClockConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e13c      	b.n	80036c6 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003458:	4b7b      	ldr	r3, [pc, #492]	@ (8003648 <HAL_RCC_ClockConfig+0x244>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4978      	ldr	r1, [pc, #480]	@ (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003466:	4313      	orrs	r3, r2
 8003468:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80cd 	beq.w	8003612 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d137      	bne.n	80034f0 <HAL_RCC_ClockConfig+0xec>
 8003480:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003484:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800348e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003490:	fab3 f383 	clz	r3, r3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b3f      	cmp	r3, #63	@ 0x3f
 8003498:	d802      	bhi.n	80034a0 <HAL_RCC_ClockConfig+0x9c>
 800349a:	4b6b      	ldr	r3, [pc, #428]	@ (8003648 <HAL_RCC_ClockConfig+0x244>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	e00f      	b.n	80034c0 <HAL_RCC_ClockConfig+0xbc>
 80034a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80034ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80034b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034bc:	4b62      	ldr	r3, [pc, #392]	@ (8003648 <HAL_RCC_ClockConfig+0x244>)
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034c8:	fa92 f2a2 	rbit	r2, r2
 80034cc:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80034ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034d0:	fab2 f282 	clz	r2, r2
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	f042 0220 	orr.w	r2, r2, #32
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	f002 021f 	and.w	r2, r2, #31
 80034e0:	2101      	movs	r1, #1
 80034e2:	fa01 f202 	lsl.w	r2, r1, r2
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d171      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0ea      	b.n	80036c6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d137      	bne.n	8003568 <HAL_RCC_ClockConfig+0x164>
 80034f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034fc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003510:	d802      	bhi.n	8003518 <HAL_RCC_ClockConfig+0x114>
 8003512:	4b4d      	ldr	r3, [pc, #308]	@ (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	e00f      	b.n	8003538 <HAL_RCC_ClockConfig+0x134>
 8003518:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800351c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003520:	fa93 f3a3 	rbit	r3, r3
 8003524:	647b      	str	r3, [r7, #68]	@ 0x44
 8003526:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800352a:	643b      	str	r3, [r7, #64]	@ 0x40
 800352c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003534:	4b44      	ldr	r3, [pc, #272]	@ (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800353c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800353e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003540:	fa92 f2a2 	rbit	r2, r2
 8003544:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003546:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003548:	fab2 f282 	clz	r2, r2
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	f042 0220 	orr.w	r2, r2, #32
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	f002 021f 	and.w	r2, r2, #31
 8003558:	2101      	movs	r1, #1
 800355a:	fa01 f202 	lsl.w	r2, r1, r2
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d135      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0ae      	b.n	80036c6 <HAL_RCC_ClockConfig+0x2c2>
 8003568:	2302      	movs	r3, #2
 800356a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b3f      	cmp	r3, #63	@ 0x3f
 800357e:	d802      	bhi.n	8003586 <HAL_RCC_ClockConfig+0x182>
 8003580:	4b31      	ldr	r3, [pc, #196]	@ (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	e00d      	b.n	80035a2 <HAL_RCC_ClockConfig+0x19e>
 8003586:	2302      	movs	r3, #2
 8003588:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
 8003592:	2302      	movs	r3, #2
 8003594:	623b      	str	r3, [r7, #32]
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	4b2a      	ldr	r3, [pc, #168]	@ (8003648 <HAL_RCC_ClockConfig+0x244>)
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	2202      	movs	r2, #2
 80035a4:	61ba      	str	r2, [r7, #24]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	fa92 f2a2 	rbit	r2, r2
 80035ac:	617a      	str	r2, [r7, #20]
  return result;
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	fab2 f282 	clz	r2, r2
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	f042 0220 	orr.w	r2, r2, #32
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	f002 021f 	and.w	r2, r2, #31
 80035c0:	2101      	movs	r1, #1
 80035c2:	fa01 f202 	lsl.w	r2, r1, r2
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e07a      	b.n	80036c6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003648 <HAL_RCC_ClockConfig+0x244>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f023 0203 	bic.w	r2, r3, #3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	491a      	ldr	r1, [pc, #104]	@ (8003648 <HAL_RCC_ClockConfig+0x244>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e2:	f7fd f8ff 	bl	80007e4 <HAL_GetTick>
 80035e6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e8:	e00a      	b.n	8003600 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ea:	f7fd f8fb 	bl	80007e4 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e062      	b.n	80036c6 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003600:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 020c 	and.w	r2, r3, #12
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	429a      	cmp	r2, r3
 8003610:	d1eb      	bne.n	80035ea <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003612:	4b0c      	ldr	r3, [pc, #48]	@ (8003644 <HAL_RCC_ClockConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d215      	bcs.n	800364c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003620:	4b08      	ldr	r3, [pc, #32]	@ (8003644 <HAL_RCC_ClockConfig+0x240>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f023 0207 	bic.w	r2, r3, #7
 8003628:	4906      	ldr	r1, [pc, #24]	@ (8003644 <HAL_RCC_ClockConfig+0x240>)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	4313      	orrs	r3, r2
 800362e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003630:	4b04      	ldr	r3, [pc, #16]	@ (8003644 <HAL_RCC_ClockConfig+0x240>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d006      	beq.n	800364c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e041      	b.n	80036c6 <HAL_RCC_ClockConfig+0x2c2>
 8003642:	bf00      	nop
 8003644:	40022000 	.word	0x40022000
 8003648:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003658:	4b1d      	ldr	r3, [pc, #116]	@ (80036d0 <HAL_RCC_ClockConfig+0x2cc>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	491a      	ldr	r1, [pc, #104]	@ (80036d0 <HAL_RCC_ClockConfig+0x2cc>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003676:	4b16      	ldr	r3, [pc, #88]	@ (80036d0 <HAL_RCC_ClockConfig+0x2cc>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4912      	ldr	r1, [pc, #72]	@ (80036d0 <HAL_RCC_ClockConfig+0x2cc>)
 8003686:	4313      	orrs	r3, r2
 8003688:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800368a:	f000 f829 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 800368e:	4601      	mov	r1, r0
 8003690:	4b0f      	ldr	r3, [pc, #60]	@ (80036d0 <HAL_RCC_ClockConfig+0x2cc>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003698:	22f0      	movs	r2, #240	@ 0xf0
 800369a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	fa92 f2a2 	rbit	r2, r2
 80036a2:	60fa      	str	r2, [r7, #12]
  return result;
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	fab2 f282 	clz	r2, r2
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	40d3      	lsrs	r3, r2
 80036ae:	4a09      	ldr	r2, [pc, #36]	@ (80036d4 <HAL_RCC_ClockConfig+0x2d0>)
 80036b0:	5cd3      	ldrb	r3, [r2, r3]
 80036b2:	fa21 f303 	lsr.w	r3, r1, r3
 80036b6:	4a08      	ldr	r2, [pc, #32]	@ (80036d8 <HAL_RCC_ClockConfig+0x2d4>)
 80036b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036ba:	4b08      	ldr	r3, [pc, #32]	@ (80036dc <HAL_RCC_ClockConfig+0x2d8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd f84c 	bl	800075c <HAL_InitTick>
  
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3778      	adds	r7, #120	@ 0x78
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000
 80036d4:	08003c30 	.word	0x08003c30
 80036d8:	20000000 	.word	0x20000000
 80036dc:	20000004 	.word	0x20000004

080036e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	2300      	movs	r3, #0
 80036f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80036fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x98>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b04      	cmp	r3, #4
 8003708:	d002      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0x30>
 800370a:	2b08      	cmp	r3, #8
 800370c:	d003      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x36>
 800370e:	e029      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003710:	4b1a      	ldr	r3, [pc, #104]	@ (800377c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003712:	613b      	str	r3, [r7, #16]
      break;
 8003714:	e029      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	0c9b      	lsrs	r3, r3, #18
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	4a18      	ldr	r2, [pc, #96]	@ (8003780 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003720:	5cd3      	ldrb	r3, [r2, r3]
 8003722:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003724:	4b14      	ldr	r3, [pc, #80]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x98>)
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	4a15      	ldr	r2, [pc, #84]	@ (8003784 <HAL_RCC_GetSysClockFreq+0xa4>)
 800372e:	5cd3      	ldrb	r3, [r2, r3]
 8003730:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800373c:	4a0f      	ldr	r2, [pc, #60]	@ (800377c <HAL_RCC_GetSysClockFreq+0x9c>)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	fbb2 f2f3 	udiv	r2, r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e007      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800374e:	4a0b      	ldr	r2, [pc, #44]	@ (800377c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	fbb2 f2f3 	udiv	r2, r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	fb02 f303 	mul.w	r3, r2, r3
 800375c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	613b      	str	r3, [r7, #16]
      break;
 8003762:	e002      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003764:	4b05      	ldr	r3, [pc, #20]	@ (800377c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003766:	613b      	str	r3, [r7, #16]
      break;
 8003768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800376a:	693b      	ldr	r3, [r7, #16]
}
 800376c:	4618      	mov	r0, r3
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40021000 	.word	0x40021000
 800377c:	007a1200 	.word	0x007a1200
 8003780:	08003c40 	.word	0x08003c40
 8003784:	08003c50 	.word	0x08003c50

08003788 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b092      	sub	sp, #72	@ 0x48
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003798:	2300      	movs	r3, #0
 800379a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80d2 	beq.w	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ac:	4b4d      	ldr	r3, [pc, #308]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10e      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b8:	4b4a      	ldr	r3, [pc, #296]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	4a49      	ldr	r2, [pc, #292]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80037be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c2:	61d3      	str	r3, [r2, #28]
 80037c4:	4b47      	ldr	r3, [pc, #284]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d6:	4b44      	ldr	r3, [pc, #272]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d118      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e2:	4b41      	ldr	r3, [pc, #260]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a40      	ldr	r2, [pc, #256]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ee:	f7fc fff9 	bl	80007e4 <HAL_GetTick>
 80037f2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	e008      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f6:	f7fc fff5 	bl	80007e4 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b64      	cmp	r3, #100	@ 0x64
 8003802:	d901      	bls.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e1d4      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	4b37      	ldr	r3, [pc, #220]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003814:	4b33      	ldr	r3, [pc, #204]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800381c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800381e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 8082 	beq.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800382e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003830:	429a      	cmp	r2, r3
 8003832:	d07a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003834:	4b2b      	ldr	r3, [pc, #172]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800383c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800383e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003842:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	fa93 f3a3 	rbit	r3, r3
 800384a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800384c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	4b25      	ldr	r3, [pc, #148]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	461a      	mov	r2, r3
 800385e:	2301      	movs	r3, #1
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003866:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	4b1c      	ldr	r3, [pc, #112]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	461a      	mov	r2, r3
 8003882:	2300      	movs	r3, #0
 8003884:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003886:	4a17      	ldr	r2, [pc, #92]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800388a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800388c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d049      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003896:	f7fc ffa5 	bl	80007e4 <HAL_GetTick>
 800389a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389c:	e00a      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fc ffa1 	bl	80007e4 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e17e      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80038b4:	2302      	movs	r3, #2
 80038b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c0:	2302      	movs	r3, #2
 80038c2:	623b      	str	r3, [r7, #32]
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	61fb      	str	r3, [r7, #28]
  return result;
 80038cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d108      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80038de:	4b01      	ldr	r3, [pc, #4]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	e00d      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40007000 	.word	0x40007000
 80038ec:	10908100 	.word	0x10908100
 80038f0:	2302      	movs	r3, #2
 80038f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	4b9a      	ldr	r3, [pc, #616]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003900:	2202      	movs	r2, #2
 8003902:	613a      	str	r2, [r7, #16]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	fa92 f2a2 	rbit	r2, r2
 800390a:	60fa      	str	r2, [r7, #12]
  return result;
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	fab2 f282 	clz	r2, r2
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	f002 021f 	and.w	r2, r2, #31
 800391e:	2101      	movs	r1, #1
 8003920:	fa01 f202 	lsl.w	r2, r1, r2
 8003924:	4013      	ands	r3, r2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0b9      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800392a:	4b8f      	ldr	r3, [pc, #572]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	498c      	ldr	r1, [pc, #560]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003938:	4313      	orrs	r3, r2
 800393a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800393c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003944:	4b88      	ldr	r3, [pc, #544]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	4a87      	ldr	r2, [pc, #540]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800394e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800395c:	4b82      	ldr	r3, [pc, #520]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003960:	f023 0203 	bic.w	r2, r3, #3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	497f      	ldr	r1, [pc, #508]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396a:	4313      	orrs	r3, r2
 800396c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800397a:	4b7b      	ldr	r3, [pc, #492]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	4978      	ldr	r1, [pc, #480]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003988:	4313      	orrs	r3, r2
 800398a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003998:	4b73      	ldr	r3, [pc, #460]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	4970      	ldr	r1, [pc, #448]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	f023 0210 	bic.w	r2, r3, #16
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	4969      	ldr	r1, [pc, #420]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80039d4:	4b64      	ldr	r3, [pc, #400]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e0:	4961      	ldr	r1, [pc, #388]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	f023 0220 	bic.w	r2, r3, #32
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	495a      	ldr	r1, [pc, #360]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a10:	4b55      	ldr	r3, [pc, #340]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a14:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	4952      	ldr	r1, [pc, #328]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	494b      	ldr	r1, [pc, #300]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a4c:	4b46      	ldr	r3, [pc, #280]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	4943      	ldr	r1, [pc, #268]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a76:	493c      	ldr	r1, [pc, #240]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a88:	4b37      	ldr	r3, [pc, #220]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a94:	4934      	ldr	r1, [pc, #208]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003aa6:	4b30      	ldr	r3, [pc, #192]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aaa:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab2:	492d      	ldr	r1, [pc, #180]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ac4:	4b28      	ldr	r3, [pc, #160]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad0:	4925      	ldr	r1, [pc, #148]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ae2:	4b21      	ldr	r3, [pc, #132]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	491e      	ldr	r1, [pc, #120]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003b00:	4b19      	ldr	r3, [pc, #100]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b04:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0c:	4916      	ldr	r1, [pc, #88]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003b1e:	4b12      	ldr	r3, [pc, #72]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2a:	490f      	ldr	r1, [pc, #60]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b40:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b48:	4907      	ldr	r1, [pc, #28]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00c      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003b5a:	4b03      	ldr	r3, [pc, #12]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	e002      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b6e:	4913      	ldr	r1, [pc, #76]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003b80:	4b0e      	ldr	r3, [pc, #56]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8c:	490b      	ldr	r1, [pc, #44]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003b9e:	4b07      	ldr	r3, [pc, #28]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003baa:	4904      	ldr	r1, [pc, #16]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3748      	adds	r7, #72	@ 0x48
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000

08003bc0 <memset>:
 8003bc0:	4402      	add	r2, r0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d100      	bne.n	8003bca <memset+0xa>
 8003bc8:	4770      	bx	lr
 8003bca:	f803 1b01 	strb.w	r1, [r3], #1
 8003bce:	e7f9      	b.n	8003bc4 <memset+0x4>

08003bd0 <__libc_init_array>:
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	4d0d      	ldr	r5, [pc, #52]	@ (8003c08 <__libc_init_array+0x38>)
 8003bd4:	4c0d      	ldr	r4, [pc, #52]	@ (8003c0c <__libc_init_array+0x3c>)
 8003bd6:	1b64      	subs	r4, r4, r5
 8003bd8:	10a4      	asrs	r4, r4, #2
 8003bda:	2600      	movs	r6, #0
 8003bdc:	42a6      	cmp	r6, r4
 8003bde:	d109      	bne.n	8003bf4 <__libc_init_array+0x24>
 8003be0:	4d0b      	ldr	r5, [pc, #44]	@ (8003c10 <__libc_init_array+0x40>)
 8003be2:	4c0c      	ldr	r4, [pc, #48]	@ (8003c14 <__libc_init_array+0x44>)
 8003be4:	f000 f818 	bl	8003c18 <_init>
 8003be8:	1b64      	subs	r4, r4, r5
 8003bea:	10a4      	asrs	r4, r4, #2
 8003bec:	2600      	movs	r6, #0
 8003bee:	42a6      	cmp	r6, r4
 8003bf0:	d105      	bne.n	8003bfe <__libc_init_array+0x2e>
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}
 8003bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf8:	4798      	blx	r3
 8003bfa:	3601      	adds	r6, #1
 8003bfc:	e7ee      	b.n	8003bdc <__libc_init_array+0xc>
 8003bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c02:	4798      	blx	r3
 8003c04:	3601      	adds	r6, #1
 8003c06:	e7f2      	b.n	8003bee <__libc_init_array+0x1e>
 8003c08:	08003c60 	.word	0x08003c60
 8003c0c:	08003c60 	.word	0x08003c60
 8003c10:	08003c60 	.word	0x08003c60
 8003c14:	08003c64 	.word	0x08003c64

08003c18 <_init>:
 8003c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1a:	bf00      	nop
 8003c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c1e:	bc08      	pop	{r3}
 8003c20:	469e      	mov	lr, r3
 8003c22:	4770      	bx	lr

08003c24 <_fini>:
 8003c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c26:	bf00      	nop
 8003c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2a:	bc08      	pop	{r3}
 8003c2c:	469e      	mov	lr, r3
 8003c2e:	4770      	bx	lr
