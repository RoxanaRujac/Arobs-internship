
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ad0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002c64  08002c64  00003c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c94  08002c94  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002c94  08002c94  00004010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002c94  08002c94  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c94  08002c94  00003c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c98  08002c98  00003c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002c9c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004010  2**0
                  CONTENTS
 10 .bss          00000074  20000010  20000010  00004010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000084  20000084  00004010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000078eb  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015de  00000000  00000000  0000b92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  0000cf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000056b  00000000  00000000  0000d638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e894  00000000  00000000  0000dba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a492  00000000  00000000  0002c437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8662  00000000  00000000  000368c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eef2b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c3c  00000000  00000000  000eef70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000f0bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002c4c 	.word	0x08002c4c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08002c4c 	.word	0x08002c4c

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 f9a9 	bl	8000530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f817 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f8b3 	bl	800034c <MX_GPIO_Init>
  MX_I2C1_Init();
 80001e6:	f000 f871 	bl	80002cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Master_Transmit(&hi2c1,20,TX_Buffer,1,1000); //Sending in Blocking mode
 80001ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001ee:	9300      	str	r3, [sp, #0]
 80001f0:	2301      	movs	r3, #1
 80001f2:	4a05      	ldr	r2, [pc, #20]	@ (8000208 <main+0x34>)
 80001f4:	2114      	movs	r1, #20
 80001f6:	4805      	ldr	r0, [pc, #20]	@ (800020c <main+0x38>)
 80001f8:	f000 fd30 	bl	8000c5c <HAL_I2C_Master_Transmit>
  HAL_Delay(100);
 80001fc:	2064      	movs	r0, #100	@ 0x64
 80001fe:	f000 f9fd 	bl	80005fc <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000202:	bf00      	nop
 8000204:	e7fd      	b.n	8000202 <main+0x2e>
 8000206:	bf00      	nop
 8000208:	20000000 	.word	0x20000000
 800020c:	2000002c 	.word	0x2000002c

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b0a6      	sub	sp, #152	@ 0x98
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800021a:	2228      	movs	r2, #40	@ 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f002 fce8 	bl	8002bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2258      	movs	r2, #88	@ 0x58
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f002 fcda 	bl	8002bf4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000240:	2302      	movs	r3, #2
 8000242:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000248:	2310      	movs	r3, #16
 800024a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000254:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000258:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000260:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800026e:	4618      	mov	r0, r3
 8000270:	f001 f8be 	bl	80013f0 <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800027a:	f000 f87f 	bl	800037c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800028e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000294:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f002 f8cc 	bl	8002438 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002a6:	f000 f869 	bl	800037c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002aa:	2320      	movs	r3, #32
 80002ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002ae:	2300      	movs	r3, #0
 80002b0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 fa81 	bl	80027bc <HAL_RCCEx_PeriphCLKConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002c0:	f000 f85c 	bl	800037c <Error_Handler>
  }
}
 80002c4:	bf00      	nop
 80002c6:	3798      	adds	r7, #152	@ 0x98
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000340 <MX_I2C1_Init+0x74>)
 80002d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000344 <MX_I2C1_Init+0x78>)
 80002d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80002d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000340 <MX_I2C1_Init+0x74>)
 80002d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000348 <MX_I2C1_Init+0x7c>)
 80002da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002dc:	4b18      	ldr	r3, [pc, #96]	@ (8000340 <MX_I2C1_Init+0x74>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e2:	4b17      	ldr	r3, [pc, #92]	@ (8000340 <MX_I2C1_Init+0x74>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e8:	4b15      	ldr	r3, [pc, #84]	@ (8000340 <MX_I2C1_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002ee:	4b14      	ldr	r3, [pc, #80]	@ (8000340 <MX_I2C1_Init+0x74>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002f4:	4b12      	ldr	r3, [pc, #72]	@ (8000340 <MX_I2C1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002fa:	4b11      	ldr	r3, [pc, #68]	@ (8000340 <MX_I2C1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000300:	4b0f      	ldr	r3, [pc, #60]	@ (8000340 <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000306:	480e      	ldr	r0, [pc, #56]	@ (8000340 <MX_I2C1_Init+0x74>)
 8000308:	f000 fc0c 	bl	8000b24 <HAL_I2C_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000312:	f000 f833 	bl	800037c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000316:	2100      	movs	r1, #0
 8000318:	4809      	ldr	r0, [pc, #36]	@ (8000340 <MX_I2C1_Init+0x74>)
 800031a:	f000 ffd1 	bl	80012c0 <HAL_I2CEx_ConfigAnalogFilter>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000324:	f000 f82a 	bl	800037c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000328:	2100      	movs	r1, #0
 800032a:	4805      	ldr	r0, [pc, #20]	@ (8000340 <MX_I2C1_Init+0x74>)
 800032c:	f001 f813 	bl	8001356 <HAL_I2CEx_ConfigDigitalFilter>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000336:	f000 f821 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000002c 	.word	0x2000002c
 8000344:	40005400 	.word	0x40005400
 8000348:	00201d2b 	.word	0x00201d2b

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000352:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <MX_GPIO_Init+0x2c>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a08      	ldr	r2, [pc, #32]	@ (8000378 <MX_GPIO_Init+0x2c>)
 8000358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800035c:	6153      	str	r3, [r2, #20]
 800035e:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <MX_GPIO_Init+0x2c>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000380:	b672      	cpsid	i
}
 8000382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <Error_Handler+0x8>

08000388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800038e:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <HAL_MspInit+0x44>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a0e      	ldr	r2, [pc, #56]	@ (80003cc <HAL_MspInit+0x44>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <HAL_MspInit+0x44>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a6:	4b09      	ldr	r3, [pc, #36]	@ (80003cc <HAL_MspInit+0x44>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	4a08      	ldr	r2, [pc, #32]	@ (80003cc <HAL_MspInit+0x44>)
 80003ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003b0:	61d3      	str	r3, [r2, #28]
 80003b2:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <HAL_MspInit+0x44>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80003be:	2007      	movs	r0, #7
 80003c0:	f000 f9f2 	bl	80007a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40021000 	.word	0x40021000

080003d0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b08a      	sub	sp, #40	@ 0x28
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d8:	f107 0314 	add.w	r3, r7, #20
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a18      	ldr	r2, [pc, #96]	@ (8000450 <HAL_I2C_MspInit+0x80>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d129      	bne.n	8000446 <HAL_I2C_MspInit+0x76>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b18      	ldr	r3, [pc, #96]	@ (8000454 <HAL_I2C_MspInit+0x84>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a17      	ldr	r2, [pc, #92]	@ (8000454 <HAL_I2C_MspInit+0x84>)
 80003f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b15      	ldr	r3, [pc, #84]	@ (8000454 <HAL_I2C_MspInit+0x84>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000406:	613b      	str	r3, [r7, #16]
 8000408:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800040a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800040e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000410:	2312      	movs	r3, #18
 8000412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000414:	2301      	movs	r3, #1
 8000416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000418:	2303      	movs	r3, #3
 800041a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800041c:	2304      	movs	r3, #4
 800041e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	4619      	mov	r1, r3
 8000426:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800042a:	f000 f9f1 	bl	8000810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800042e:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <HAL_I2C_MspInit+0x84>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	4a08      	ldr	r2, [pc, #32]	@ (8000454 <HAL_I2C_MspInit+0x84>)
 8000434:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000438:	61d3      	str	r3, [r2, #28]
 800043a:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <HAL_I2C_MspInit+0x84>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000446:	bf00      	nop
 8000448:	3728      	adds	r7, #40	@ 0x28
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40005400 	.word	0x40005400
 8000454:	40021000 	.word	0x40021000

08000458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <NMI_Handler+0x4>

08000460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <HardFault_Handler+0x4>

08000468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <MemManage_Handler+0x4>

08000470 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <BusFault_Handler+0x4>

08000478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <UsageFault_Handler+0x4>

08000480 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ae:	f000 f885 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <SystemInit+0x20>)
 80004be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004c2:	4a05      	ldr	r2, [pc, #20]	@ (80004d8 <SystemInit+0x20>)
 80004c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	e000ed00 	.word	0xe000ed00

080004dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000514 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80004e0:	f7ff ffea 	bl	80004b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e4:	480c      	ldr	r0, [pc, #48]	@ (8000518 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e6:	490d      	ldr	r1, [pc, #52]	@ (800051c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000520 <LoopForever+0xe>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000528 <LoopForever+0x16>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800050a:	f002 fb7b 	bl	8002c04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800050e:	f7ff fe61 	bl	80001d4 <main>

08000512 <LoopForever>:

LoopForever:
    b LoopForever
 8000512:	e7fe      	b.n	8000512 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000514:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000520:	08002c9c 	.word	0x08002c9c
  ldr r2, =_sbss
 8000524:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000528:	20000084 	.word	0x20000084

0800052c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC1_2_IRQHandler>
	...

08000530 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <HAL_Init+0x28>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <HAL_Init+0x28>)
 800053a:	f043 0310 	orr.w	r3, r3, #16
 800053e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 f931 	bl	80007a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000546:	2000      	movs	r0, #0
 8000548:	f000 f808 	bl	800055c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800054c:	f7ff ff1c 	bl	8000388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40022000 	.word	0x40022000

0800055c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000564:	4b12      	ldr	r3, [pc, #72]	@ (80005b0 <HAL_InitTick+0x54>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <HAL_InitTick+0x58>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000572:	fbb3 f3f1 	udiv	r3, r3, r1
 8000576:	fbb2 f3f3 	udiv	r3, r2, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f93b 	bl	80007f6 <HAL_SYSTICK_Config>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	e00e      	b.n	80005a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b0f      	cmp	r3, #15
 800058e:	d80a      	bhi.n	80005a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	2200      	movs	r2, #0
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	f04f 30ff 	mov.w	r0, #4294967295
 8000598:	f000 f911 	bl	80007be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059c:	4a06      	ldr	r2, [pc, #24]	@ (80005b8 <HAL_InitTick+0x5c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e000      	b.n	80005a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000004 	.word	0x20000004
 80005b4:	2000000c 	.word	0x2000000c
 80005b8:	20000008 	.word	0x20000008

080005bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <HAL_IncTick+0x20>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <HAL_IncTick+0x24>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a04      	ldr	r2, [pc, #16]	@ (80005e0 <HAL_IncTick+0x24>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	2000000c 	.word	0x2000000c
 80005e0:	20000080 	.word	0x20000080

080005e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80005e8:	4b03      	ldr	r3, [pc, #12]	@ (80005f8 <HAL_GetTick+0x14>)
 80005ea:	681b      	ldr	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000080 	.word	0x20000080

080005fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000604:	f7ff ffee 	bl	80005e4 <HAL_GetTick>
 8000608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000614:	d005      	beq.n	8000622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <HAL_Delay+0x44>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4413      	add	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000622:	bf00      	nop
 8000624:	f7ff ffde 	bl	80005e4 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	429a      	cmp	r2, r3
 8000632:	d8f7      	bhi.n	8000624 <HAL_Delay+0x28>
  {
  }
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000000c 	.word	0x2000000c

08000644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800066c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000676:	4a04      	ldr	r2, [pc, #16]	@ (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	60d3      	str	r3, [r2, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000690:	4b04      	ldr	r3, [pc, #16]	@ (80006a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	f003 0307 	and.w	r3, r3, #7
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	@ (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	@ (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	@ 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2b04      	cmp	r3, #4
 8000718:	bf28      	it	cs
 800071a:	2304      	movcs	r3, #4
 800071c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	2b06      	cmp	r3, #6
 8000724:	d902      	bls.n	800072c <NVIC_EncodePriority+0x30>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3b03      	subs	r3, #3
 800072a:	e000      	b.n	800072e <NVIC_EncodePriority+0x32>
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 32ff 	mov.w	r2, #4294967295
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43da      	mvns	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	401a      	ands	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000744:	f04f 31ff 	mov.w	r1, #4294967295
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43d9      	mvns	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	4313      	orrs	r3, r2
         );
}
 8000756:	4618      	mov	r0, r3
 8000758:	3724      	adds	r7, #36	@ 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000774:	d301      	bcc.n	800077a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000776:	2301      	movs	r3, #1
 8000778:	e00f      	b.n	800079a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077a:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <SysTick_Config+0x40>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000782:	210f      	movs	r1, #15
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f7ff ff8e 	bl	80006a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <SysTick_Config+0x40>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000792:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <SysTick_Config+0x40>)
 8000794:	2207      	movs	r2, #7
 8000796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	e000e010 	.word	0xe000e010

080007a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff47 	bl	8000644 <__NVIC_SetPriorityGrouping>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d0:	f7ff ff5c 	bl	800068c <__NVIC_GetPriorityGrouping>
 80007d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	68b9      	ldr	r1, [r7, #8]
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	f7ff ff8e 	bl	80006fc <NVIC_EncodePriority>
 80007e0:	4602      	mov	r2, r0
 80007e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff5d 	bl	80006a8 <__NVIC_SetPriority>
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffb0 	bl	8000764 <SysTick_Config>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800081e:	e160      	b.n	8000ae2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	2101      	movs	r1, #1
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	fa01 f303 	lsl.w	r3, r1, r3
 800082c:	4013      	ands	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	f000 8152 	beq.w	8000adc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	f003 0303 	and.w	r3, r3, #3
 8000840:	2b01      	cmp	r3, #1
 8000842:	d005      	beq.n	8000850 <HAL_GPIO_Init+0x40>
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f003 0303 	and.w	r3, r3, #3
 800084c:	2b02      	cmp	r3, #2
 800084e:	d130      	bne.n	80008b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	2203      	movs	r2, #3
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	43db      	mvns	r3, r3
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	4013      	ands	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	68da      	ldr	r2, [r3, #12]
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	4313      	orrs	r3, r2
 8000878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000886:	2201      	movs	r2, #1
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4013      	ands	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	091b      	lsrs	r3, r3, #4
 800089c:	f003 0201 	and.w	r2, r3, #1
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f003 0303 	and.w	r3, r3, #3
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d017      	beq.n	80008ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	2203      	movs	r2, #3
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43db      	mvns	r3, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4013      	ands	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	689a      	ldr	r2, [r3, #8]
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f003 0303 	and.w	r3, r3, #3
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d123      	bne.n	8000942 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	08da      	lsrs	r2, r3, #3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3208      	adds	r2, #8
 8000902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000906:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	220f      	movs	r2, #15
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4013      	ands	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	691a      	ldr	r2, [r3, #16]
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	f003 0307 	and.w	r3, r3, #7
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	08da      	lsrs	r2, r3, #3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3208      	adds	r2, #8
 800093c:	6939      	ldr	r1, [r7, #16]
 800093e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	2203      	movs	r2, #3
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4013      	ands	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f003 0203 	and.w	r2, r3, #3
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 80ac 	beq.w	8000adc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000984:	4b5e      	ldr	r3, [pc, #376]	@ (8000b00 <HAL_GPIO_Init+0x2f0>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a5d      	ldr	r2, [pc, #372]	@ (8000b00 <HAL_GPIO_Init+0x2f0>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b5b      	ldr	r3, [pc, #364]	@ (8000b00 <HAL_GPIO_Init+0x2f0>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800099c:	4a59      	ldr	r2, [pc, #356]	@ (8000b04 <HAL_GPIO_Init+0x2f4>)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	3302      	adds	r3, #2
 80009a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	f003 0303 	and.w	r3, r3, #3
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	220f      	movs	r2, #15
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009c6:	d025      	beq.n	8000a14 <HAL_GPIO_Init+0x204>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a4f      	ldr	r2, [pc, #316]	@ (8000b08 <HAL_GPIO_Init+0x2f8>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d01f      	beq.n	8000a10 <HAL_GPIO_Init+0x200>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a4e      	ldr	r2, [pc, #312]	@ (8000b0c <HAL_GPIO_Init+0x2fc>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d019      	beq.n	8000a0c <HAL_GPIO_Init+0x1fc>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a4d      	ldr	r2, [pc, #308]	@ (8000b10 <HAL_GPIO_Init+0x300>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d013      	beq.n	8000a08 <HAL_GPIO_Init+0x1f8>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a4c      	ldr	r2, [pc, #304]	@ (8000b14 <HAL_GPIO_Init+0x304>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d00d      	beq.n	8000a04 <HAL_GPIO_Init+0x1f4>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a4b      	ldr	r2, [pc, #300]	@ (8000b18 <HAL_GPIO_Init+0x308>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d007      	beq.n	8000a00 <HAL_GPIO_Init+0x1f0>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a4a      	ldr	r2, [pc, #296]	@ (8000b1c <HAL_GPIO_Init+0x30c>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d101      	bne.n	80009fc <HAL_GPIO_Init+0x1ec>
 80009f8:	2306      	movs	r3, #6
 80009fa:	e00c      	b.n	8000a16 <HAL_GPIO_Init+0x206>
 80009fc:	2307      	movs	r3, #7
 80009fe:	e00a      	b.n	8000a16 <HAL_GPIO_Init+0x206>
 8000a00:	2305      	movs	r3, #5
 8000a02:	e008      	b.n	8000a16 <HAL_GPIO_Init+0x206>
 8000a04:	2304      	movs	r3, #4
 8000a06:	e006      	b.n	8000a16 <HAL_GPIO_Init+0x206>
 8000a08:	2303      	movs	r3, #3
 8000a0a:	e004      	b.n	8000a16 <HAL_GPIO_Init+0x206>
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	e002      	b.n	8000a16 <HAL_GPIO_Init+0x206>
 8000a10:	2301      	movs	r3, #1
 8000a12:	e000      	b.n	8000a16 <HAL_GPIO_Init+0x206>
 8000a14:	2300      	movs	r3, #0
 8000a16:	697a      	ldr	r2, [r7, #20]
 8000a18:	f002 0203 	and.w	r2, r2, #3
 8000a1c:	0092      	lsls	r2, r2, #2
 8000a1e:	4093      	lsls	r3, r2
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a26:	4937      	ldr	r1, [pc, #220]	@ (8000b04 <HAL_GPIO_Init+0x2f4>)
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a34:	4b3a      	ldr	r3, [pc, #232]	@ (8000b20 <HAL_GPIO_Init+0x310>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d003      	beq.n	8000a58 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a58:	4a31      	ldr	r2, [pc, #196]	@ (8000b20 <HAL_GPIO_Init+0x310>)
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a5e:	4b30      	ldr	r3, [pc, #192]	@ (8000b20 <HAL_GPIO_Init+0x310>)
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a82:	4a27      	ldr	r2, [pc, #156]	@ (8000b20 <HAL_GPIO_Init+0x310>)
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a88:	4b25      	ldr	r3, [pc, #148]	@ (8000b20 <HAL_GPIO_Init+0x310>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000aac:	4a1c      	ldr	r2, [pc, #112]	@ (8000b20 <HAL_GPIO_Init+0x310>)
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <HAL_GPIO_Init+0x310>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ad6:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <HAL_GPIO_Init+0x310>)
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f47f ae97 	bne.w	8000820 <HAL_GPIO_Init+0x10>
  }
}
 8000af2:	bf00      	nop
 8000af4:	bf00      	nop
 8000af6:	371c      	adds	r7, #28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40010000 	.word	0x40010000
 8000b08:	48000400 	.word	0x48000400
 8000b0c:	48000800 	.word	0x48000800
 8000b10:	48000c00 	.word	0x48000c00
 8000b14:	48001000 	.word	0x48001000
 8000b18:	48001400 	.word	0x48001400
 8000b1c:	48001800 	.word	0x48001800
 8000b20:	40010400 	.word	0x40010400

08000b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e08d      	b.n	8000c52 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d106      	bne.n	8000b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fc40 	bl	80003d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2224      	movs	r2, #36	@ 0x24
 8000b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f022 0201 	bic.w	r2, r2, #1
 8000b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000b74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	689a      	ldr	r2, [r3, #8]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000b84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d107      	bne.n	8000b9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	e006      	b.n	8000bac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000baa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d108      	bne.n	8000bc6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	685a      	ldr	r2, [r3, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	e007      	b.n	8000bd6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000bd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	6812      	ldr	r2, [r2, #0]
 8000be0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000be4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000be8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68da      	ldr	r2, [r3, #12]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000bf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	691a      	ldr	r2, [r3, #16]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	430a      	orrs	r2, r1
 8000c12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69d9      	ldr	r1, [r3, #28]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a1a      	ldr	r2, [r3, #32]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	430a      	orrs	r2, r1
 8000c22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f042 0201 	orr.w	r2, r2, #1
 8000c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2220      	movs	r2, #32
 8000c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	461a      	mov	r2, r3
 8000c68:	460b      	mov	r3, r1
 8000c6a:	817b      	strh	r3, [r7, #10]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b20      	cmp	r3, #32
 8000c7a:	f040 80fd 	bne.w	8000e78 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d101      	bne.n	8000c8c <HAL_I2C_Master_Transmit+0x30>
 8000c88:	2302      	movs	r3, #2
 8000c8a:	e0f6      	b.n	8000e7a <HAL_I2C_Master_Transmit+0x21e>
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000c94:	f7ff fca6 	bl	80005e4 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	2319      	movs	r3, #25
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ca6:	68f8      	ldr	r0, [r7, #12]
 8000ca8:	f000 f914 	bl	8000ed4 <I2C_WaitOnFlagUntilTimeout>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e0e1      	b.n	8000e7a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2221      	movs	r2, #33	@ 0x21
 8000cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	2210      	movs	r2, #16
 8000cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	893a      	ldrh	r2, [r7, #8]
 8000cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	2bff      	cmp	r3, #255	@ 0xff
 8000ce6:	d906      	bls.n	8000cf6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	22ff      	movs	r2, #255	@ 0xff
 8000cec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8000cee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	e007      	b.n	8000d06 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8000d00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d04:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d024      	beq.n	8000d58 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d12:	781a      	ldrb	r2, [r3, #0]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d36:	3b01      	subs	r3, #1
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	3301      	adds	r3, #1
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	8979      	ldrh	r1, [r7, #10]
 8000d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8000e84 <HAL_I2C_Master_Transmit+0x228>)
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f000 fa83 	bl	800125c <I2C_TransferConfig>
 8000d56:	e066      	b.n	8000e26 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	8979      	ldrh	r1, [r7, #10]
 8000d60:	4b48      	ldr	r3, [pc, #288]	@ (8000e84 <HAL_I2C_Master_Transmit+0x228>)
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f000 fa78 	bl	800125c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000d6c:	e05b      	b.n	8000e26 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	6a39      	ldr	r1, [r7, #32]
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f000 f907 	bl	8000f86 <I2C_WaitOnTXISFlagUntilTimeout>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e07b      	b.n	8000e7a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000daa:	3b01      	subs	r3, #1
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d034      	beq.n	8000e26 <HAL_I2C_Master_Transmit+0x1ca>
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d130      	bne.n	8000e26 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2180      	movs	r1, #128	@ 0x80
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	f000 f880 	bl	8000ed4 <I2C_WaitOnFlagUntilTimeout>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e04d      	b.n	8000e7a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	2bff      	cmp	r3, #255	@ 0xff
 8000de6:	d90e      	bls.n	8000e06 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	22ff      	movs	r2, #255	@ 0xff
 8000dec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	8979      	ldrh	r1, [r7, #10]
 8000df6:	2300      	movs	r3, #0
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f000 fa2c 	bl	800125c <I2C_TransferConfig>
 8000e04:	e00f      	b.n	8000e26 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	8979      	ldrh	r1, [r7, #10]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e20:	68f8      	ldr	r0, [r7, #12]
 8000e22:	f000 fa1b 	bl	800125c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d19e      	bne.n	8000d6e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	6a39      	ldr	r1, [r7, #32]
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f000 f8ed 	bl	8001014 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e01a      	b.n	8000e7a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2220      	movs	r2, #32
 8000e4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6859      	ldr	r1, [r3, #4]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_I2C_Master_Transmit+0x22c>)
 8000e58:	400b      	ands	r3, r1
 8000e5a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2220      	movs	r2, #32
 8000e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e000      	b.n	8000e7a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8000e78:	2302      	movs	r3, #2
  }
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	80002000 	.word	0x80002000
 8000e88:	fe00e800 	.word	0xfe00e800

08000e8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d103      	bne.n	8000eaa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d007      	beq.n	8000ec8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	699a      	ldr	r2, [r3, #24]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0201 	orr.w	r2, r2, #1
 8000ec6:	619a      	str	r2, [r3, #24]
  }
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000ee4:	e03b      	b.n	8000f5e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	6839      	ldr	r1, [r7, #0]
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f000 f8d6 	bl	800109c <I2C_IsErrorOccurred>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e041      	b.n	8000f7e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f00:	d02d      	beq.n	8000f5e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f02:	f7ff fb6f 	bl	80005e4 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d302      	bcc.n	8000f18 <I2C_WaitOnFlagUntilTimeout+0x44>
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d122      	bne.n	8000f5e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	699a      	ldr	r2, [r3, #24]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	4013      	ands	r3, r2
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	bf0c      	ite	eq
 8000f28:	2301      	moveq	r3, #1
 8000f2a:	2300      	movne	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d113      	bne.n	8000f5e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	f043 0220 	orr.w	r2, r3, #32
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2220      	movs	r2, #32
 8000f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00f      	b.n	8000f7e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	699a      	ldr	r2, [r3, #24]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4013      	ands	r3, r2
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	bf0c      	ite	eq
 8000f6e:	2301      	moveq	r3, #1
 8000f70:	2300      	movne	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d0b4      	beq.n	8000ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b084      	sub	sp, #16
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	60f8      	str	r0, [r7, #12]
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000f92:	e033      	b.n	8000ffc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f000 f87f 	bl	800109c <I2C_IsErrorOccurred>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e031      	b.n	800100c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fae:	d025      	beq.n	8000ffc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fb0:	f7ff fb18 	bl	80005e4 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d302      	bcc.n	8000fc6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d11a      	bne.n	8000ffc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d013      	beq.n	8000ffc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd8:	f043 0220 	orr.w	r2, r3, #32
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e007      	b.n	800100c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b02      	cmp	r3, #2
 8001008:	d1c4      	bne.n	8000f94 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001020:	e02f      	b.n	8001082 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f000 f838 	bl	800109c <I2C_IsErrorOccurred>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e02d      	b.n	8001092 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001036:	f7ff fad5 	bl	80005e4 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	429a      	cmp	r2, r3
 8001044:	d302      	bcc.n	800104c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d11a      	bne.n	8001082 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f003 0320 	and.w	r3, r3, #32
 8001056:	2b20      	cmp	r3, #32
 8001058:	d013      	beq.n	8001082 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105e:	f043 0220 	orr.w	r2, r3, #32
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2220      	movs	r2, #32
 800106a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e007      	b.n	8001092 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0320 	and.w	r3, r3, #32
 800108c:	2b20      	cmp	r3, #32
 800108e:	d1c8      	bne.n	8001022 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d068      	beq.n	800119a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2210      	movs	r2, #16
 80010ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80010d0:	e049      	b.n	8001166 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d8:	d045      	beq.n	8001166 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80010da:	f7ff fa83 	bl	80005e4 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	68ba      	ldr	r2, [r7, #8]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d302      	bcc.n	80010f0 <I2C_IsErrorOccurred+0x54>
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d13a      	bne.n	8001166 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001102:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800110e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001112:	d121      	bne.n	8001158 <I2C_IsErrorOccurred+0xbc>
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800111a:	d01d      	beq.n	8001158 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800111c:	7cfb      	ldrb	r3, [r7, #19]
 800111e:	2b20      	cmp	r3, #32
 8001120:	d01a      	beq.n	8001158 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001130:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001132:	f7ff fa57 	bl	80005e4 <HAL_GetTick>
 8001136:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001138:	e00e      	b.n	8001158 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800113a:	f7ff fa53 	bl	80005e4 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b19      	cmp	r3, #25
 8001146:	d907      	bls.n	8001158 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	f043 0320 	orr.w	r3, r3, #32
 800114e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001156:	e006      	b.n	8001166 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f003 0320 	and.w	r3, r3, #32
 8001162:	2b20      	cmp	r3, #32
 8001164:	d1e9      	bne.n	800113a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0320 	and.w	r3, r3, #32
 8001170:	2b20      	cmp	r3, #32
 8001172:	d003      	beq.n	800117c <I2C_IsErrorOccurred+0xe0>
 8001174:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0aa      	beq.n	80010d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800117c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001180:	2b00      	cmp	r3, #0
 8001182:	d103      	bne.n	800118c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2220      	movs	r2, #32
 800118a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00b      	beq.n	80011c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00b      	beq.n	80011e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00b      	beq.n	8001208 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	f043 0302 	orr.w	r3, r3, #2
 80011f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001200:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001208:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800120c:	2b00      	cmp	r3, #0
 800120e:	d01c      	beq.n	800124a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f7ff fe3b 	bl	8000e8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6859      	ldr	r1, [r3, #4]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <I2C_IsErrorOccurred+0x1bc>)
 8001222:	400b      	ands	r3, r1
 8001224:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	431a      	orrs	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2220      	movs	r2, #32
 8001236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800124a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800124e:	4618      	mov	r0, r3
 8001250:	3728      	adds	r7, #40	@ 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	fe00e800 	.word	0xfe00e800

0800125c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	460b      	mov	r3, r1
 8001268:	817b      	strh	r3, [r7, #10]
 800126a:	4613      	mov	r3, r2
 800126c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800126e:	897b      	ldrh	r3, [r7, #10]
 8001270:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001274:	7a7b      	ldrb	r3, [r7, #9]
 8001276:	041b      	lsls	r3, r3, #16
 8001278:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800127c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	4313      	orrs	r3, r2
 8001286:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800128a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	0d5b      	lsrs	r3, r3, #21
 8001296:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800129a:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <I2C_TransferConfig+0x60>)
 800129c:	430b      	orrs	r3, r1
 800129e:	43db      	mvns	r3, r3
 80012a0:	ea02 0103 	and.w	r1, r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80012ae:	bf00      	nop
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	03ff63ff 	.word	0x03ff63ff

080012c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b20      	cmp	r3, #32
 80012d4:	d138      	bne.n	8001348 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e032      	b.n	800134a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2224      	movs	r2, #36	@ 0x24
 80012f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0201 	bic.w	r2, r2, #1
 8001302:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001312:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2220      	movs	r2, #32
 8001338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	e000      	b.n	800134a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001348:	2302      	movs	r3, #2
  }
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001356:	b480      	push	{r7}
 8001358:	b085      	sub	sp, #20
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b20      	cmp	r3, #32
 800136a:	d139      	bne.n	80013e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001376:	2302      	movs	r3, #2
 8001378:	e033      	b.n	80013e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2224      	movs	r2, #36	@ 0x24
 8001386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0201 	bic.w	r2, r2, #1
 8001398:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80013a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2220      	movs	r2, #32
 80013d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	e000      	b.n	80013e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80013e0:	2302      	movs	r3, #2
  }
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001400:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001402:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001406:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	f001 b80a 	b.w	800242a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001416:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800141a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8161 	beq.w	80016ee <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800142c:	4bae      	ldr	r3, [pc, #696]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	2b04      	cmp	r3, #4
 8001436:	d00c      	beq.n	8001452 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001438:	4bab      	ldr	r3, [pc, #684]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b08      	cmp	r3, #8
 8001442:	d157      	bne.n	80014f4 <HAL_RCC_OscConfig+0x104>
 8001444:	4ba8      	ldr	r3, [pc, #672]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800144c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001450:	d150      	bne.n	80014f4 <HAL_RCC_OscConfig+0x104>
 8001452:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001456:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001466:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146a:	fab3 f383 	clz	r3, r3
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b3f      	cmp	r3, #63	@ 0x3f
 8001472:	d802      	bhi.n	800147a <HAL_RCC_OscConfig+0x8a>
 8001474:	4b9c      	ldr	r3, [pc, #624]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	e015      	b.n	80014a6 <HAL_RCC_OscConfig+0xb6>
 800147a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800147e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001482:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800148e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001492:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001496:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800149a:	fa93 f3a3 	rbit	r3, r3
 800149e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80014a2:	4b91      	ldr	r3, [pc, #580]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014aa:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80014ae:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80014b2:	fa92 f2a2 	rbit	r2, r2
 80014b6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80014ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80014be:	fab2 f282 	clz	r2, r2
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	f042 0220 	orr.w	r2, r2, #32
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	f002 021f 	and.w	r2, r2, #31
 80014ce:	2101      	movs	r1, #1
 80014d0:	fa01 f202 	lsl.w	r2, r1, r2
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 8108 	beq.w	80016ec <HAL_RCC_OscConfig+0x2fc>
 80014dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f040 80ff 	bne.w	80016ec <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	f000 bf9b 	b.w	800242a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001504:	d106      	bne.n	8001514 <HAL_RCC_OscConfig+0x124>
 8001506:	4b78      	ldr	r3, [pc, #480]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a77      	ldr	r2, [pc, #476]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e036      	b.n	8001582 <HAL_RCC_OscConfig+0x192>
 8001514:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001518:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10c      	bne.n	800153e <HAL_RCC_OscConfig+0x14e>
 8001524:	4b70      	ldr	r3, [pc, #448]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a6f      	ldr	r2, [pc, #444]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 800152a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b6d      	ldr	r3, [pc, #436]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a6c      	ldr	r2, [pc, #432]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 8001536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	e021      	b.n	8001582 <HAL_RCC_OscConfig+0x192>
 800153e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001542:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800154e:	d10c      	bne.n	800156a <HAL_RCC_OscConfig+0x17a>
 8001550:	4b65      	ldr	r3, [pc, #404]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a64      	ldr	r2, [pc, #400]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 8001556:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b62      	ldr	r3, [pc, #392]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a61      	ldr	r2, [pc, #388]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 8001562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	e00b      	b.n	8001582 <HAL_RCC_OscConfig+0x192>
 800156a:	4b5f      	ldr	r3, [pc, #380]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a5e      	ldr	r2, [pc, #376]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 8001570:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b5c      	ldr	r3, [pc, #368]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a5b      	ldr	r2, [pc, #364]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 800157c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001580:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001582:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001586:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d054      	beq.n	800163c <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001592:	f7ff f827 	bl	80005e4 <HAL_GetTick>
 8001596:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff f822 	bl	80005e4 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b64      	cmp	r3, #100	@ 0x64
 80015aa:	d902      	bls.n	80015b2 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	f000 bf3c 	b.w	800242a <HAL_RCC_OscConfig+0x103a>
 80015b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015b6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ba:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80015be:	fa93 f3a3 	rbit	r3, r3
 80015c2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80015c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	fab3 f383 	clz	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80015d2:	d802      	bhi.n	80015da <HAL_RCC_OscConfig+0x1ea>
 80015d4:	4b44      	ldr	r3, [pc, #272]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	e015      	b.n	8001606 <HAL_RCC_OscConfig+0x216>
 80015da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015de:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80015ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015f2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80015f6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80015fa:	fa93 f3a3 	rbit	r3, r3
 80015fe:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001602:	4b39      	ldr	r3, [pc, #228]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 8001604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001606:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800160a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800160e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001612:	fa92 f2a2 	rbit	r2, r2
 8001616:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800161a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800161e:	fab2 f282 	clz	r2, r2
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	f042 0220 	orr.w	r2, r2, #32
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	f002 021f 	and.w	r2, r2, #31
 800162e:	2101      	movs	r1, #1
 8001630:	fa01 f202 	lsl.w	r2, r1, r2
 8001634:	4013      	ands	r3, r2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0b0      	beq.n	800159c <HAL_RCC_OscConfig+0x1ac>
 800163a:	e058      	b.n	80016ee <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7fe ffd2 	bl	80005e4 <HAL_GetTick>
 8001640:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001644:	e00a      	b.n	800165c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001646:	f7fe ffcd 	bl	80005e4 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	@ 0x64
 8001654:	d902      	bls.n	800165c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	f000 bee7 	b.w	800242a <HAL_RCC_OscConfig+0x103a>
 800165c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001660:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001664:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001668:	fa93 f3a3 	rbit	r3, r3
 800166c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001670:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b3f      	cmp	r3, #63	@ 0x3f
 800167c:	d802      	bhi.n	8001684 <HAL_RCC_OscConfig+0x294>
 800167e:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	e015      	b.n	80016b0 <HAL_RCC_OscConfig+0x2c0>
 8001684:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001688:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001698:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800169c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80016a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80016a4:	fa93 f3a3 	rbit	r3, r3
 80016a8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <HAL_RCC_OscConfig+0x2f8>)
 80016ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016b4:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80016b8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80016bc:	fa92 f2a2 	rbit	r2, r2
 80016c0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80016c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80016c8:	fab2 f282 	clz	r2, r2
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	f042 0220 	orr.w	r2, r2, #32
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	f002 021f 	and.w	r2, r2, #31
 80016d8:	2101      	movs	r1, #1
 80016da:	fa01 f202 	lsl.w	r2, r1, r2
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1b0      	bne.n	8001646 <HAL_RCC_OscConfig+0x256>
 80016e4:	e003      	b.n	80016ee <HAL_RCC_OscConfig+0x2fe>
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 816d 	beq.w	80019de <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001704:	4bcd      	ldr	r3, [pc, #820]	@ (8001a3c <HAL_RCC_OscConfig+0x64c>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00c      	beq.n	800172a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001710:	4bca      	ldr	r3, [pc, #808]	@ (8001a3c <HAL_RCC_OscConfig+0x64c>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b08      	cmp	r3, #8
 800171a:	d16e      	bne.n	80017fa <HAL_RCC_OscConfig+0x40a>
 800171c:	4bc7      	ldr	r3, [pc, #796]	@ (8001a3c <HAL_RCC_OscConfig+0x64c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001728:	d167      	bne.n	80017fa <HAL_RCC_OscConfig+0x40a>
 800172a:	2302      	movs	r3, #2
 800172c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800173c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001740:	fab3 f383 	clz	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b3f      	cmp	r3, #63	@ 0x3f
 8001748:	d802      	bhi.n	8001750 <HAL_RCC_OscConfig+0x360>
 800174a:	4bbc      	ldr	r3, [pc, #752]	@ (8001a3c <HAL_RCC_OscConfig+0x64c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	e013      	b.n	8001778 <HAL_RCC_OscConfig+0x388>
 8001750:	2302      	movs	r3, #2
 8001752:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001762:	2302      	movs	r3, #2
 8001764:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001768:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800176c:	fa93 f3a3 	rbit	r3, r3
 8001770:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001774:	4bb1      	ldr	r3, [pc, #708]	@ (8001a3c <HAL_RCC_OscConfig+0x64c>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	2202      	movs	r2, #2
 800177a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800177e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001782:	fa92 f2a2 	rbit	r2, r2
 8001786:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800178a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800178e:	fab2 f282 	clz	r2, r2
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	f042 0220 	orr.w	r2, r2, #32
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	f002 021f 	and.w	r2, r2, #31
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00a      	beq.n	80017c0 <HAL_RCC_OscConfig+0x3d0>
 80017aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d002      	beq.n	80017c0 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f000 be35 	b.w	800242a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c0:	4b9e      	ldr	r3, [pc, #632]	@ (8001a3c <HAL_RCC_OscConfig+0x64c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	21f8      	movs	r1, #248	@ 0xf8
 80017d6:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80017de:	fa91 f1a1 	rbit	r1, r1
 80017e2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80017e6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80017ea:	fab1 f181 	clz	r1, r1
 80017ee:	b2c9      	uxtb	r1, r1
 80017f0:	408b      	lsls	r3, r1
 80017f2:	4992      	ldr	r1, [pc, #584]	@ (8001a3c <HAL_RCC_OscConfig+0x64c>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f8:	e0f1      	b.n	80019de <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8083 	beq.w	8001912 <HAL_RCC_OscConfig+0x522>
 800180c:	2301      	movs	r3, #1
 800180e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800181e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800182c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	461a      	mov	r2, r3
 8001834:	2301      	movs	r3, #1
 8001836:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7fe fed4 	bl	80005e4 <HAL_GetTick>
 800183c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	e00a      	b.n	8001858 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001842:	f7fe fecf 	bl	80005e4 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d902      	bls.n	8001858 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	f000 bde9 	b.w	800242a <HAL_RCC_OscConfig+0x103a>
 8001858:	2302      	movs	r3, #2
 800185a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001862:	fa93 f3a3 	rbit	r3, r3
 8001866:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800186a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186e:	fab3 f383 	clz	r3, r3
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b3f      	cmp	r3, #63	@ 0x3f
 8001876:	d802      	bhi.n	800187e <HAL_RCC_OscConfig+0x48e>
 8001878:	4b70      	ldr	r3, [pc, #448]	@ (8001a3c <HAL_RCC_OscConfig+0x64c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	e013      	b.n	80018a6 <HAL_RCC_OscConfig+0x4b6>
 800187e:	2302      	movs	r3, #2
 8001880:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001896:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80018a2:	4b66      	ldr	r3, [pc, #408]	@ (8001a3c <HAL_RCC_OscConfig+0x64c>)
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	2202      	movs	r2, #2
 80018a8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80018ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80018b0:	fa92 f2a2 	rbit	r2, r2
 80018b4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80018b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80018bc:	fab2 f282 	clz	r2, r2
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	f042 0220 	orr.w	r2, r2, #32
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	f002 021f 	and.w	r2, r2, #31
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f202 	lsl.w	r2, r1, r2
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0b4      	beq.n	8001842 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b58      	ldr	r3, [pc, #352]	@ (8001a3c <HAL_RCC_OscConfig+0x64c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	21f8      	movs	r1, #248	@ 0xf8
 80018ee:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80018f6:	fa91 f1a1 	rbit	r1, r1
 80018fa:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80018fe:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001902:	fab1 f181 	clz	r1, r1
 8001906:	b2c9      	uxtb	r1, r1
 8001908:	408b      	lsls	r3, r1
 800190a:	494c      	ldr	r1, [pc, #304]	@ (8001a3c <HAL_RCC_OscConfig+0x64c>)
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
 8001910:	e065      	b.n	80019de <HAL_RCC_OscConfig+0x5ee>
 8001912:	2301      	movs	r3, #1
 8001914:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001924:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001928:	fab3 f383 	clz	r3, r3
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001932:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	461a      	mov	r2, r3
 800193a:	2300      	movs	r3, #0
 800193c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7fe fe51 	bl	80005e4 <HAL_GetTick>
 8001942:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	e00a      	b.n	800195e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001948:	f7fe fe4c 	bl	80005e4 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d902      	bls.n	800195e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	f000 bd66 	b.w	800242a <HAL_RCC_OscConfig+0x103a>
 800195e:	2302      	movs	r3, #2
 8001960:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001970:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b3f      	cmp	r3, #63	@ 0x3f
 800197c:	d802      	bhi.n	8001984 <HAL_RCC_OscConfig+0x594>
 800197e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a3c <HAL_RCC_OscConfig+0x64c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	e013      	b.n	80019ac <HAL_RCC_OscConfig+0x5bc>
 8001984:	2302      	movs	r3, #2
 8001986:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001996:	2302      	movs	r3, #2
 8001998:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800199c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80019a8:	4b24      	ldr	r3, [pc, #144]	@ (8001a3c <HAL_RCC_OscConfig+0x64c>)
 80019aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ac:	2202      	movs	r2, #2
 80019ae:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80019b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019b6:	fa92 f2a2 	rbit	r2, r2
 80019ba:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80019be:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80019c2:	fab2 f282 	clz	r2, r2
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f042 0220 	orr.w	r2, r2, #32
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	f002 021f 	and.w	r2, r2, #31
 80019d2:	2101      	movs	r1, #1
 80019d4:	fa01 f202 	lsl.w	r2, r1, r2
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1b4      	bne.n	8001948 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8119 	beq.w	8001c26 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 8082 	beq.w	8001b0a <HAL_RCC_OscConfig+0x71a>
 8001a06:	2301      	movs	r3, #1
 8001a08:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a10:	fa93 f3a3 	rbit	r3, r3
 8001a14:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001a18:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1c:	fab3 f383 	clz	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <HAL_RCC_OscConfig+0x650>)
 8001a26:	4413      	add	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a30:	f7fe fdd8 	bl	80005e4 <HAL_GetTick>
 8001a34:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a38:	e00f      	b.n	8001a5a <HAL_RCC_OscConfig+0x66a>
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a44:	f7fe fdce 	bl	80005e4 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d902      	bls.n	8001a5a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	f000 bce8 	b.w	800242a <HAL_RCC_OscConfig+0x103a>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001a64:	fa93 f2a3 	rbit	r2, r3
 8001a68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	fa93 f2a3 	rbit	r2, r3
 8001a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a9a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ab8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aba:	4bb0      	ldr	r3, [pc, #704]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001abc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	6019      	str	r1, [r3, #0]
 8001aca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ace:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	fa93 f1a3 	rbit	r1, r3
 8001ad8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001adc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ae0:	6019      	str	r1, [r3, #0]
  return result;
 8001ae2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	fab3 f383 	clz	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	2101      	movs	r1, #1
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d09d      	beq.n	8001a44 <HAL_RCC_OscConfig+0x654>
 8001b08:	e08d      	b.n	8001c26 <HAL_RCC_OscConfig+0x836>
 8001b0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b0e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b1a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	fa93 f2a3 	rbit	r2, r3
 8001b24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b28:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b2c:	601a      	str	r2, [r3, #0]
  return result;
 8001b2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b32:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b36:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b8f      	ldr	r3, [pc, #572]	@ (8001d80 <HAL_RCC_OscConfig+0x990>)
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	461a      	mov	r2, r3
 8001b48:	2300      	movs	r3, #0
 8001b4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4c:	f7fe fd4a 	bl	80005e4 <HAL_GetTick>
 8001b50:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b54:	e00a      	b.n	8001b6c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b56:	f7fe fd45 	bl	80005e4 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d902      	bls.n	8001b6c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	f000 bc5f 	b.w	800242a <HAL_RCC_OscConfig+0x103a>
 8001b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b70:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b74:	2202      	movs	r2, #2
 8001b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	fa93 f2a3 	rbit	r2, r3
 8001b86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b8a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b98:	2202      	movs	r2, #2
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	fa93 f2a3 	rbit	r2, r3
 8001baa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	fa93 f2a3 	rbit	r2, r3
 8001bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001bd6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd8:	4b68      	ldr	r3, [pc, #416]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001bda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001be4:	2102      	movs	r1, #2
 8001be6:	6019      	str	r1, [r3, #0]
 8001be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f1a3 	rbit	r1, r3
 8001bf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bfa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001bfe:	6019      	str	r1, [r3, #0]
  return result;
 8001c00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c04:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d197      	bne.n	8001b56 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 819c 	beq.w	8001f74 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	4b4e      	ldr	r3, [pc, #312]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d116      	bne.n	8001c7c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a4a      	ldr	r2, [pc, #296]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c58:	61d3      	str	r3, [r2, #28]
 8001c5a:	4b48      	ldr	r3, [pc, #288]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001c62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c74:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c76:	2301      	movs	r3, #1
 8001c78:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	4b41      	ldr	r3, [pc, #260]	@ (8001d84 <HAL_RCC_OscConfig+0x994>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d11a      	bne.n	8001cbe <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c88:	4b3e      	ldr	r3, [pc, #248]	@ (8001d84 <HAL_RCC_OscConfig+0x994>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a3d      	ldr	r2, [pc, #244]	@ (8001d84 <HAL_RCC_OscConfig+0x994>)
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c92:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c94:	f7fe fca6 	bl	80005e4 <HAL_GetTick>
 8001c98:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	e009      	b.n	8001cb2 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9e:	f7fe fca1 	bl	80005e4 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	@ 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e3bb      	b.n	800242a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	4b34      	ldr	r3, [pc, #208]	@ (8001d84 <HAL_RCC_OscConfig+0x994>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0ef      	beq.n	8001c9e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d106      	bne.n	8001cdc <HAL_RCC_OscConfig+0x8ec>
 8001cce:	4b2b      	ldr	r3, [pc, #172]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6213      	str	r3, [r2, #32]
 8001cda:	e035      	b.n	8001d48 <HAL_RCC_OscConfig+0x958>
 8001cdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10c      	bne.n	8001d06 <HAL_RCC_OscConfig+0x916>
 8001cec:	4b23      	ldr	r3, [pc, #140]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a22      	ldr	r2, [pc, #136]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001cfe:	f023 0304 	bic.w	r3, r3, #4
 8001d02:	6213      	str	r3, [r2, #32]
 8001d04:	e020      	b.n	8001d48 <HAL_RCC_OscConfig+0x958>
 8001d06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b05      	cmp	r3, #5
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x940>
 8001d16:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a18      	ldr	r2, [pc, #96]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6213      	str	r3, [r2, #32]
 8001d22:	4b16      	ldr	r3, [pc, #88]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a15      	ldr	r2, [pc, #84]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6213      	str	r3, [r2, #32]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0x958>
 8001d30:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4a11      	ldr	r2, [pc, #68]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001d36:	f023 0301 	bic.w	r3, r3, #1
 8001d3a:	6213      	str	r3, [r2, #32]
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4a0e      	ldr	r2, [pc, #56]	@ (8001d7c <HAL_RCC_OscConfig+0x98c>)
 8001d42:	f023 0304 	bic.w	r3, r3, #4
 8001d46:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8085 	beq.w	8001e64 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5a:	f7fe fc43 	bl	80005e4 <HAL_GetTick>
 8001d5e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d62:	e011      	b.n	8001d88 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7fe fc3e 	bl	80005e4 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d907      	bls.n	8001d88 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e356      	b.n	800242a <HAL_RCC_OscConfig+0x103a>
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	10908120 	.word	0x10908120
 8001d84:	40007000 	.word	0x40007000
 8001d88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d8c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d90:	2202      	movs	r2, #2
 8001d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d98:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	fa93 f2a3 	rbit	r2, r3
 8001da2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001db4:	2202      	movs	r2, #2
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dbc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	fa93 f2a3 	rbit	r2, r3
 8001dc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dca:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001dce:	601a      	str	r2, [r3, #0]
  return result;
 8001dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001dd8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <HAL_RCC_OscConfig+0xa00>
 8001dea:	4b98      	ldr	r3, [pc, #608]	@ (800204c <HAL_RCC_OscConfig+0xc5c>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	e013      	b.n	8001e18 <HAL_RCC_OscConfig+0xa28>
 8001df0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001df8:	2202      	movs	r2, #2
 8001dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e00:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	fa93 f2a3 	rbit	r2, r3
 8001e0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e0e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	4b8d      	ldr	r3, [pc, #564]	@ (800204c <HAL_RCC_OscConfig+0xc5c>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e1c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001e20:	2102      	movs	r1, #2
 8001e22:	6011      	str	r1, [r2, #0]
 8001e24:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e28:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	fa92 f1a2 	rbit	r1, r2
 8001e32:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e36:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001e3a:	6011      	str	r1, [r2, #0]
  return result;
 8001e3c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e40:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	fab2 f282 	clz	r2, r2
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	f002 021f 	and.w	r2, r2, #31
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d080      	beq.n	8001d64 <HAL_RCC_OscConfig+0x974>
 8001e62:	e07d      	b.n	8001f60 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e64:	f7fe fbbe 	bl	80005e4 <HAL_GetTick>
 8001e68:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6c:	e00b      	b.n	8001e86 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7fe fbb9 	bl	80005e4 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e2d1      	b.n	800242a <HAL_RCC_OscConfig+0x103a>
 8001e86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e8a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e8e:	2202      	movs	r2, #2
 8001e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e96:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	fa93 f2a3 	rbit	r2, r3
 8001ea0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eae:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fa93 f2a3 	rbit	r2, r3
 8001ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ecc:	601a      	str	r2, [r3, #0]
  return result;
 8001ece:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ed6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <HAL_RCC_OscConfig+0xafe>
 8001ee8:	4b58      	ldr	r3, [pc, #352]	@ (800204c <HAL_RCC_OscConfig+0xc5c>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	e013      	b.n	8001f16 <HAL_RCC_OscConfig+0xb26>
 8001eee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001efe:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	fa93 f2a3 	rbit	r2, r3
 8001f08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f0c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	4b4e      	ldr	r3, [pc, #312]	@ (800204c <HAL_RCC_OscConfig+0xc5c>)
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f1a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001f1e:	2102      	movs	r1, #2
 8001f20:	6011      	str	r1, [r2, #0]
 8001f22:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f26:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	fa92 f1a2 	rbit	r1, r2
 8001f30:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f34:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001f38:	6011      	str	r1, [r2, #0]
  return result;
 8001f3a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f3e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	fab2 f282 	clz	r2, r2
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	f002 021f 	and.w	r2, r2, #31
 8001f54:	2101      	movs	r1, #1
 8001f56:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d186      	bne.n	8001e6e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f60:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d105      	bne.n	8001f74 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f68:	4b38      	ldr	r3, [pc, #224]	@ (800204c <HAL_RCC_OscConfig+0xc5c>)
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	4a37      	ldr	r2, [pc, #220]	@ (800204c <HAL_RCC_OscConfig+0xc5c>)
 8001f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8251 	beq.w	8002428 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f86:	4b31      	ldr	r3, [pc, #196]	@ (800204c <HAL_RCC_OscConfig+0xc5c>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	f000 820f 	beq.w	80023b2 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	f040 8165 	bne.w	8002270 <HAL_RCC_OscConfig+0xe80>
 8001fa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001faa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001fae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001fb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	fa93 f2a3 	rbit	r2, r3
 8001fc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001fca:	601a      	str	r2, [r3, #0]
  return result;
 8001fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001fd4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fe0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	2300      	movs	r3, #0
 8001fea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7fe fafa 	bl	80005e4 <HAL_GetTick>
 8001ff0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff4:	e009      	b.n	800200a <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff6:	f7fe faf5 	bl	80005e4 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e20f      	b.n	800242a <HAL_RCC_OscConfig+0x103a>
 800200a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002012:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800201c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	fa93 f2a3 	rbit	r2, r3
 8002026:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800202a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800202e:	601a      	str	r2, [r3, #0]
  return result;
 8002030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002034:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002038:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b3f      	cmp	r3, #63	@ 0x3f
 8002042:	d805      	bhi.n	8002050 <HAL_RCC_OscConfig+0xc60>
 8002044:	4b01      	ldr	r3, [pc, #4]	@ (800204c <HAL_RCC_OscConfig+0xc5c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	e02a      	b.n	80020a0 <HAL_RCC_OscConfig+0xcb0>
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002054:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002058:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800205c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002062:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	fa93 f2a3 	rbit	r2, r3
 800206c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002070:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800207a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800207e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002088:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	fa93 f2a3 	rbit	r2, r3
 8002092:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002096:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	4bca      	ldr	r3, [pc, #808]	@ (80023c8 <HAL_RCC_OscConfig+0xfd8>)
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020a4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80020a8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80020ac:	6011      	str	r1, [r2, #0]
 80020ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020b2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	fa92 f1a2 	rbit	r1, r2
 80020bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020c0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80020c4:	6011      	str	r1, [r2, #0]
  return result;
 80020c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020ca:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	fab2 f282 	clz	r2, r2
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f042 0220 	orr.w	r2, r2, #32
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	f002 021f 	and.w	r2, r2, #31
 80020e0:	2101      	movs	r1, #1
 80020e2:	fa01 f202 	lsl.w	r2, r1, r2
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d184      	bne.n	8001ff6 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ec:	4bb6      	ldr	r3, [pc, #728]	@ (80023c8 <HAL_RCC_OscConfig+0xfd8>)
 80020ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f0:	f023 020f 	bic.w	r2, r3, #15
 80020f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002100:	49b1      	ldr	r1, [pc, #708]	@ (80023c8 <HAL_RCC_OscConfig+0xfd8>)
 8002102:	4313      	orrs	r3, r2
 8002104:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002106:	4bb0      	ldr	r3, [pc, #704]	@ (80023c8 <HAL_RCC_OscConfig+0xfd8>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800210e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002112:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6a19      	ldr	r1, [r3, #32]
 800211a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	430b      	orrs	r3, r1
 8002128:	49a7      	ldr	r1, [pc, #668]	@ (80023c8 <HAL_RCC_OscConfig+0xfd8>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
 800212e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002132:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002136:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800213a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002140:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	fa93 f2a3 	rbit	r2, r3
 800214a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800214e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002152:	601a      	str	r2, [r3, #0]
  return result;
 8002154:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002158:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800215c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002168:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	461a      	mov	r2, r3
 8002170:	2301      	movs	r3, #1
 8002172:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7fe fa36 	bl	80005e4 <HAL_GetTick>
 8002178:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800217c:	e009      	b.n	8002192 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217e:	f7fe fa31 	bl	80005e4 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e14b      	b.n	800242a <HAL_RCC_OscConfig+0x103a>
 8002192:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002196:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800219a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800219e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	fa93 f2a3 	rbit	r2, r3
 80021ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80021b6:	601a      	str	r2, [r3, #0]
  return result;
 80021b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021bc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80021c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80021ca:	d802      	bhi.n	80021d2 <HAL_RCC_OscConfig+0xde2>
 80021cc:	4b7e      	ldr	r3, [pc, #504]	@ (80023c8 <HAL_RCC_OscConfig+0xfd8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	e027      	b.n	8002222 <HAL_RCC_OscConfig+0xe32>
 80021d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	fa93 f2a3 	rbit	r2, r3
 80021ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021fc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002200:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	fa93 f2a3 	rbit	r2, r3
 8002214:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002218:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	4b6a      	ldr	r3, [pc, #424]	@ (80023c8 <HAL_RCC_OscConfig+0xfd8>)
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002226:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800222a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800222e:	6011      	str	r1, [r2, #0]
 8002230:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002234:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	fa92 f1a2 	rbit	r1, r2
 800223e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002242:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002246:	6011      	str	r1, [r2, #0]
  return result;
 8002248:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800224c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	fab2 f282 	clz	r2, r2
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	f042 0220 	orr.w	r2, r2, #32
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	f002 021f 	and.w	r2, r2, #31
 8002262:	2101      	movs	r1, #1
 8002264:	fa01 f202 	lsl.w	r2, r1, r2
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d087      	beq.n	800217e <HAL_RCC_OscConfig+0xd8e>
 800226e:	e0db      	b.n	8002428 <HAL_RCC_OscConfig+0x1038>
 8002270:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002274:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002278:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800227c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002282:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	fa93 f2a3 	rbit	r2, r3
 800228c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002290:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002294:	601a      	str	r2, [r3, #0]
  return result;
 8002296:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800229a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800229e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022aa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	461a      	mov	r2, r3
 80022b2:	2300      	movs	r3, #0
 80022b4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7fe f995 	bl	80005e4 <HAL_GetTick>
 80022ba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022be:	e009      	b.n	80022d4 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe f990 	bl	80005e4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0aa      	b.n	800242a <HAL_RCC_OscConfig+0x103a>
 80022d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80022dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f2a3 	rbit	r2, r3
 80022f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80022f8:	601a      	str	r2, [r3, #0]
  return result;
 80022fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022fe:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002302:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b3f      	cmp	r3, #63	@ 0x3f
 800230c:	d802      	bhi.n	8002314 <HAL_RCC_OscConfig+0xf24>
 800230e:	4b2e      	ldr	r3, [pc, #184]	@ (80023c8 <HAL_RCC_OscConfig+0xfd8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	e027      	b.n	8002364 <HAL_RCC_OscConfig+0xf74>
 8002314:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002318:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800231c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002326:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	fa93 f2a3 	rbit	r2, r3
 8002330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002334:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002342:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800234c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	fa93 f2a3 	rbit	r2, r3
 8002356:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800235a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	4b19      	ldr	r3, [pc, #100]	@ (80023c8 <HAL_RCC_OscConfig+0xfd8>)
 8002362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002364:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002368:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800236c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002370:	6011      	str	r1, [r2, #0]
 8002372:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002376:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	fa92 f1a2 	rbit	r1, r2
 8002380:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002384:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002388:	6011      	str	r1, [r2, #0]
  return result;
 800238a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800238e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	fab2 f282 	clz	r2, r2
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f042 0220 	orr.w	r2, r2, #32
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f002 021f 	and.w	r2, r2, #31
 80023a4:	2101      	movs	r1, #1
 80023a6:	fa01 f202 	lsl.w	r2, r1, r2
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d187      	bne.n	80022c0 <HAL_RCC_OscConfig+0xed0>
 80023b0:	e03a      	b.n	8002428 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d104      	bne.n	80023cc <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e031      	b.n	800242a <HAL_RCC_OscConfig+0x103a>
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023cc:	4b19      	ldr	r3, [pc, #100]	@ (8002434 <HAL_RCC_OscConfig+0x1044>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80023d4:	4b17      	ldr	r3, [pc, #92]	@ (8002434 <HAL_RCC_OscConfig+0x1044>)
 80023d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80023e0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80023e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d117      	bne.n	8002424 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80023f8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002400:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002408:	429a      	cmp	r2, r3
 800240a:	d10b      	bne.n	8002424 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800240c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002410:	f003 020f 	and.w	r2, r3, #15
 8002414:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002418:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000

08002438 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b09e      	sub	sp, #120	@ 0x78
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e154      	b.n	80026fa <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002450:	4b89      	ldr	r3, [pc, #548]	@ (8002678 <HAL_RCC_ClockConfig+0x240>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d910      	bls.n	8002480 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b86      	ldr	r3, [pc, #536]	@ (8002678 <HAL_RCC_ClockConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 0207 	bic.w	r2, r3, #7
 8002466:	4984      	ldr	r1, [pc, #528]	@ (8002678 <HAL_RCC_ClockConfig+0x240>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b82      	ldr	r3, [pc, #520]	@ (8002678 <HAL_RCC_ClockConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e13c      	b.n	80026fa <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800248c:	4b7b      	ldr	r3, [pc, #492]	@ (800267c <HAL_RCC_ClockConfig+0x244>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4978      	ldr	r1, [pc, #480]	@ (800267c <HAL_RCC_ClockConfig+0x244>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80cd 	beq.w	8002646 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d137      	bne.n	8002524 <HAL_RCC_ClockConfig+0xec>
 80024b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80024c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80024cc:	d802      	bhi.n	80024d4 <HAL_RCC_ClockConfig+0x9c>
 80024ce:	4b6b      	ldr	r3, [pc, #428]	@ (800267c <HAL_RCC_ClockConfig+0x244>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	e00f      	b.n	80024f4 <HAL_RCC_ClockConfig+0xbc>
 80024d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80024e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80024e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024f0:	4b62      	ldr	r3, [pc, #392]	@ (800267c <HAL_RCC_ClockConfig+0x244>)
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024fc:	fa92 f2a2 	rbit	r2, r2
 8002500:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002502:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002504:	fab2 f282 	clz	r2, r2
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f042 0220 	orr.w	r2, r2, #32
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	f002 021f 	and.w	r2, r2, #31
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f202 	lsl.w	r2, r1, r2
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d171      	bne.n	8002604 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0ea      	b.n	80026fa <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d137      	bne.n	800259c <HAL_RCC_ClockConfig+0x164>
 800252c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002530:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800253a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b3f      	cmp	r3, #63	@ 0x3f
 8002544:	d802      	bhi.n	800254c <HAL_RCC_ClockConfig+0x114>
 8002546:	4b4d      	ldr	r3, [pc, #308]	@ (800267c <HAL_RCC_ClockConfig+0x244>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	e00f      	b.n	800256c <HAL_RCC_ClockConfig+0x134>
 800254c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002550:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	647b      	str	r3, [r7, #68]	@ 0x44
 800255a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800255e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002560:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002568:	4b44      	ldr	r3, [pc, #272]	@ (800267c <HAL_RCC_ClockConfig+0x244>)
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002570:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002572:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002574:	fa92 f2a2 	rbit	r2, r2
 8002578:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800257a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800257c:	fab2 f282 	clz	r2, r2
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	f042 0220 	orr.w	r2, r2, #32
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	f002 021f 	and.w	r2, r2, #31
 800258c:	2101      	movs	r1, #1
 800258e:	fa01 f202 	lsl.w	r2, r1, r2
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d135      	bne.n	8002604 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0ae      	b.n	80026fa <HAL_RCC_ClockConfig+0x2c2>
 800259c:	2302      	movs	r3, #2
 800259e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80025a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80025b2:	d802      	bhi.n	80025ba <HAL_RCC_ClockConfig+0x182>
 80025b4:	4b31      	ldr	r3, [pc, #196]	@ (800267c <HAL_RCC_ClockConfig+0x244>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	e00d      	b.n	80025d6 <HAL_RCC_ClockConfig+0x19e>
 80025ba:	2302      	movs	r3, #2
 80025bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c6:	2302      	movs	r3, #2
 80025c8:	623b      	str	r3, [r7, #32]
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	4b2a      	ldr	r3, [pc, #168]	@ (800267c <HAL_RCC_ClockConfig+0x244>)
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	2202      	movs	r2, #2
 80025d8:	61ba      	str	r2, [r7, #24]
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	fa92 f2a2 	rbit	r2, r2
 80025e0:	617a      	str	r2, [r7, #20]
  return result;
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	fab2 f282 	clz	r2, r2
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	f042 0220 	orr.w	r2, r2, #32
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f002 021f 	and.w	r2, r2, #31
 80025f4:	2101      	movs	r1, #1
 80025f6:	fa01 f202 	lsl.w	r2, r1, r2
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e07a      	b.n	80026fa <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002604:	4b1d      	ldr	r3, [pc, #116]	@ (800267c <HAL_RCC_ClockConfig+0x244>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 0203 	bic.w	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	491a      	ldr	r1, [pc, #104]	@ (800267c <HAL_RCC_ClockConfig+0x244>)
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002616:	f7fd ffe5 	bl	80005e4 <HAL_GetTick>
 800261a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261c:	e00a      	b.n	8002634 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261e:	f7fd ffe1 	bl	80005e4 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e062      	b.n	80026fa <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002634:	4b11      	ldr	r3, [pc, #68]	@ (800267c <HAL_RCC_ClockConfig+0x244>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 020c 	and.w	r2, r3, #12
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	429a      	cmp	r2, r3
 8002644:	d1eb      	bne.n	800261e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002646:	4b0c      	ldr	r3, [pc, #48]	@ (8002678 <HAL_RCC_ClockConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d215      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002654:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <HAL_RCC_ClockConfig+0x240>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 0207 	bic.w	r2, r3, #7
 800265c:	4906      	ldr	r1, [pc, #24]	@ (8002678 <HAL_RCC_ClockConfig+0x240>)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002664:	4b04      	ldr	r3, [pc, #16]	@ (8002678 <HAL_RCC_ClockConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d006      	beq.n	8002680 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e041      	b.n	80026fa <HAL_RCC_ClockConfig+0x2c2>
 8002676:	bf00      	nop
 8002678:	40022000 	.word	0x40022000
 800267c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268c:	4b1d      	ldr	r3, [pc, #116]	@ (8002704 <HAL_RCC_ClockConfig+0x2cc>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	491a      	ldr	r1, [pc, #104]	@ (8002704 <HAL_RCC_ClockConfig+0x2cc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026aa:	4b16      	ldr	r3, [pc, #88]	@ (8002704 <HAL_RCC_ClockConfig+0x2cc>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4912      	ldr	r1, [pc, #72]	@ (8002704 <HAL_RCC_ClockConfig+0x2cc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026be:	f000 f829 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 80026c2:	4601      	mov	r1, r0
 80026c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002704 <HAL_RCC_ClockConfig+0x2cc>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026cc:	22f0      	movs	r2, #240	@ 0xf0
 80026ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	fa92 f2a2 	rbit	r2, r2
 80026d6:	60fa      	str	r2, [r7, #12]
  return result;
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	fab2 f282 	clz	r2, r2
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	40d3      	lsrs	r3, r2
 80026e2:	4a09      	ldr	r2, [pc, #36]	@ (8002708 <HAL_RCC_ClockConfig+0x2d0>)
 80026e4:	5cd3      	ldrb	r3, [r2, r3]
 80026e6:	fa21 f303 	lsr.w	r3, r1, r3
 80026ea:	4a08      	ldr	r2, [pc, #32]	@ (800270c <HAL_RCC_ClockConfig+0x2d4>)
 80026ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026ee:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <HAL_RCC_ClockConfig+0x2d8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fd ff32 	bl	800055c <HAL_InitTick>
  
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3778      	adds	r7, #120	@ 0x78
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	08002c64 	.word	0x08002c64
 800270c:	20000004 	.word	0x20000004
 8002710:	20000008 	.word	0x20000008

08002714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800272e:	4b1f      	ldr	r3, [pc, #124]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b04      	cmp	r3, #4
 800273c:	d002      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x30>
 800273e:	2b08      	cmp	r3, #8
 8002740:	d003      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x36>
 8002742:	e029      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002744:	4b1a      	ldr	r3, [pc, #104]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002746:	613b      	str	r3, [r7, #16]
      break;
 8002748:	e029      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	0c9b      	lsrs	r3, r3, #18
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	4a18      	ldr	r2, [pc, #96]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002754:	5cd3      	ldrb	r3, [r2, r3]
 8002756:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002758:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x98>)
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	4a15      	ldr	r2, [pc, #84]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002762:	5cd3      	ldrb	r3, [r2, r3]
 8002764:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002770:	4a0f      	ldr	r2, [pc, #60]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	fbb2 f2f3 	udiv	r2, r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	e007      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002782:	4a0b      	ldr	r2, [pc, #44]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	fbb2 f2f3 	udiv	r2, r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	fb02 f303 	mul.w	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	613b      	str	r3, [r7, #16]
      break;
 8002796:	e002      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800279a:	613b      	str	r3, [r7, #16]
      break;
 800279c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279e:	693b      	ldr	r3, [r7, #16]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	40021000 	.word	0x40021000
 80027b0:	007a1200 	.word	0x007a1200
 80027b4:	08002c74 	.word	0x08002c74
 80027b8:	08002c84 	.word	0x08002c84

080027bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b092      	sub	sp, #72	@ 0x48
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80d2 	beq.w	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10e      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	4a49      	ldr	r2, [pc, #292]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	61d3      	str	r3, [r2, #28]
 80027f8:	4b47      	ldr	r3, [pc, #284]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002804:	2301      	movs	r3, #1
 8002806:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280a:	4b44      	ldr	r3, [pc, #272]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d118      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002816:	4b41      	ldr	r3, [pc, #260]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a40      	ldr	r2, [pc, #256]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002820:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002822:	f7fd fedf 	bl	80005e4 <HAL_GetTick>
 8002826:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	e008      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282a:	f7fd fedb 	bl	80005e4 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b64      	cmp	r3, #100	@ 0x64
 8002836:	d901      	bls.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e1d4      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	4b37      	ldr	r3, [pc, #220]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002848:	4b33      	ldr	r3, [pc, #204]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002850:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 8082 	beq.w	800295e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002862:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002864:	429a      	cmp	r2, r3
 8002866:	d07a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002868:	4b2b      	ldr	r3, [pc, #172]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002870:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002872:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002876:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	4b25      	ldr	r3, [pc, #148]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	461a      	mov	r2, r3
 8002892:	2301      	movs	r3, #1
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800289a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80028a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	461a      	mov	r2, r3
 80028b6:	2300      	movs	r3, #0
 80028b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028ba:	4a17      	ldr	r2, [pc, #92]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80028bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d049      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7fd fe8b 	bl	80005e4 <HAL_GetTick>
 80028ce:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d0:	e00a      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d2:	f7fd fe87 	bl	80005e4 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e17e      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80028e8:	2302      	movs	r3, #2
 80028ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f4:	2302      	movs	r3, #2
 80028f6:	623b      	str	r3, [r7, #32]
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	61fb      	str	r3, [r7, #28]
  return result;
 8002900:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d108      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002912:	4b01      	ldr	r3, [pc, #4]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	e00d      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002918:	40021000 	.word	0x40021000
 800291c:	40007000 	.word	0x40007000
 8002920:	10908100 	.word	0x10908100
 8002924:	2302      	movs	r3, #2
 8002926:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	4b9a      	ldr	r3, [pc, #616]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	2202      	movs	r2, #2
 8002936:	613a      	str	r2, [r7, #16]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	fa92 f2a2 	rbit	r2, r2
 800293e:	60fa      	str	r2, [r7, #12]
  return result;
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	fab2 f282 	clz	r2, r2
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	f002 021f 	and.w	r2, r2, #31
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f202 	lsl.w	r2, r1, r2
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0b9      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800295e:	4b8f      	ldr	r3, [pc, #572]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	498c      	ldr	r1, [pc, #560]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296c:	4313      	orrs	r3, r2
 800296e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002970:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002978:	4b88      	ldr	r3, [pc, #544]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	4a87      	ldr	r2, [pc, #540]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002982:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002990:	4b82      	ldr	r3, [pc, #520]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002994:	f023 0203 	bic.w	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	497f      	ldr	r1, [pc, #508]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d008      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029ae:	4b7b      	ldr	r3, [pc, #492]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	4978      	ldr	r1, [pc, #480]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029cc:	4b73      	ldr	r3, [pc, #460]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	4970      	ldr	r1, [pc, #448]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ea:	4b6c      	ldr	r3, [pc, #432]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	f023 0210 	bic.w	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	4969      	ldr	r1, [pc, #420]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a08:	4b64      	ldr	r3, [pc, #400]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a14:	4961      	ldr	r1, [pc, #388]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a26:	4b5d      	ldr	r3, [pc, #372]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	f023 0220 	bic.w	r2, r3, #32
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	495a      	ldr	r1, [pc, #360]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a44:	4b55      	ldr	r3, [pc, #340]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a48:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	4952      	ldr	r1, [pc, #328]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a62:	4b4e      	ldr	r3, [pc, #312]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	494b      	ldr	r1, [pc, #300]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a80:	4b46      	ldr	r3, [pc, #280]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	4943      	ldr	r1, [pc, #268]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	493c      	ldr	r1, [pc, #240]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002abc:	4b37      	ldr	r3, [pc, #220]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	4934      	ldr	r1, [pc, #208]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ada:	4b30      	ldr	r3, [pc, #192]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ade:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	492d      	ldr	r1, [pc, #180]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002af8:	4b28      	ldr	r3, [pc, #160]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b04:	4925      	ldr	r1, [pc, #148]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002b16:	4b21      	ldr	r3, [pc, #132]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	491e      	ldr	r1, [pc, #120]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002b34:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b38:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b40:	4916      	ldr	r1, [pc, #88]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002b52:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5e:	490f      	ldr	r1, [pc, #60]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b70:	4b0a      	ldr	r3, [pc, #40]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7c:	4907      	ldr	r1, [pc, #28]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002b8e:	4b03      	ldr	r3, [pc, #12]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	e002      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba2:	4913      	ldr	r1, [pc, #76]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc0:	490b      	ldr	r1, [pc, #44]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002bd2:	4b07      	ldr	r3, [pc, #28]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bde:	4904      	ldr	r1, [pc, #16]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3748      	adds	r7, #72	@ 0x48
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000

08002bf4 <memset>:
 8002bf4:	4402      	add	r2, r0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d100      	bne.n	8002bfe <memset+0xa>
 8002bfc:	4770      	bx	lr
 8002bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8002c02:	e7f9      	b.n	8002bf8 <memset+0x4>

08002c04 <__libc_init_array>:
 8002c04:	b570      	push	{r4, r5, r6, lr}
 8002c06:	4d0d      	ldr	r5, [pc, #52]	@ (8002c3c <__libc_init_array+0x38>)
 8002c08:	4c0d      	ldr	r4, [pc, #52]	@ (8002c40 <__libc_init_array+0x3c>)
 8002c0a:	1b64      	subs	r4, r4, r5
 8002c0c:	10a4      	asrs	r4, r4, #2
 8002c0e:	2600      	movs	r6, #0
 8002c10:	42a6      	cmp	r6, r4
 8002c12:	d109      	bne.n	8002c28 <__libc_init_array+0x24>
 8002c14:	4d0b      	ldr	r5, [pc, #44]	@ (8002c44 <__libc_init_array+0x40>)
 8002c16:	4c0c      	ldr	r4, [pc, #48]	@ (8002c48 <__libc_init_array+0x44>)
 8002c18:	f000 f818 	bl	8002c4c <_init>
 8002c1c:	1b64      	subs	r4, r4, r5
 8002c1e:	10a4      	asrs	r4, r4, #2
 8002c20:	2600      	movs	r6, #0
 8002c22:	42a6      	cmp	r6, r4
 8002c24:	d105      	bne.n	8002c32 <__libc_init_array+0x2e>
 8002c26:	bd70      	pop	{r4, r5, r6, pc}
 8002c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c2c:	4798      	blx	r3
 8002c2e:	3601      	adds	r6, #1
 8002c30:	e7ee      	b.n	8002c10 <__libc_init_array+0xc>
 8002c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c36:	4798      	blx	r3
 8002c38:	3601      	adds	r6, #1
 8002c3a:	e7f2      	b.n	8002c22 <__libc_init_array+0x1e>
 8002c3c:	08002c94 	.word	0x08002c94
 8002c40:	08002c94 	.word	0x08002c94
 8002c44:	08002c94 	.word	0x08002c94
 8002c48:	08002c98 	.word	0x08002c98

08002c4c <_init>:
 8002c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4e:	bf00      	nop
 8002c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c52:	bc08      	pop	{r3}
 8002c54:	469e      	mov	lr, r3
 8002c56:	4770      	bx	lr

08002c58 <_fini>:
 8002c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5a:	bf00      	nop
 8002c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5e:	bc08      	pop	{r3}
 8002c60:	469e      	mov	lr, r3
 8002c62:	4770      	bx	lr
