
dc motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003708  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800389c  0800389c  0000489c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038cc  080038cc  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080038cc  080038cc  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080038cc  080038cc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038cc  080038cc  000048cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038d0  080038d0  000048d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080038d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099d7  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017f4  00000000  00000000  0000ea13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  00010208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000772  00000000  00000000  00010bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f3c5  00000000  00000000  00011322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c055  00000000  00000000  000306e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c15f5  00000000  00000000  0003c73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fdd31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027e8  00000000  00000000  000fdd74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0010055c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003884 	.word	0x08003884

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003884 	.word	0x08003884

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa10 	bl	80005fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f828 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8fc 	bl	80003dc <MX_GPIO_Init>
  MX_TIM2_Init();
 80001e4:	f000 f884 	bl	80002f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001e8:	2100      	movs	r1, #0
 80001ea:	4810      	ldr	r0, [pc, #64]	@ (800022c <main+0x58>)
 80001ec:	f002 f9e6 	bl	80025bc <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 htim2.Instance->CCR1 = 500;  // duty cycle is .5 ms
 80001f0:	4b0e      	ldr	r3, [pc, #56]	@ (800022c <main+0x58>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80001f8:	635a      	str	r2, [r3, #52]	@ 0x34
	 HAL_Delay(2000);
 80001fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001fe:	f000 fa63 	bl	80006c8 <HAL_Delay>
	 htim2.Instance->CCR1 = 1500;  // duty cycle is 1.5 ms
 8000202:	4b0a      	ldr	r3, [pc, #40]	@ (800022c <main+0x58>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800020a:	635a      	str	r2, [r3, #52]	@ 0x34
	 HAL_Delay(2000);
 800020c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000210:	f000 fa5a 	bl	80006c8 <HAL_Delay>
	 htim2.Instance->CCR1 = 2500;  // duty cycle is 2.5 ms
 8000214:	4b05      	ldr	r3, [pc, #20]	@ (800022c <main+0x58>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800021c:	635a      	str	r2, [r3, #52]	@ 0x34
	 HAL_Delay(2000);
 800021e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000222:	f000 fa51 	bl	80006c8 <HAL_Delay>
	 htim2.Instance->CCR1 = 500;  // duty cycle is .5 ms
 8000226:	bf00      	nop
 8000228:	e7e2      	b.n	80001f0 <main+0x1c>
 800022a:	bf00      	nop
 800022c:	20000028 	.word	0x20000028

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b0a6      	sub	sp, #152	@ 0x98
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800023a:	2228      	movs	r2, #40	@ 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f003 faf4 	bl	800382c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2258      	movs	r2, #88	@ 0x58
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 fae6 	bl	800382c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000260:	2302      	movs	r3, #2
 8000262:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000268:	2310      	movs	r3, #16
 800026a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026e:	2302      	movs	r3, #2
 8000270:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000274:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000278:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000280:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800028e:	4618      	mov	r0, r3
 8000290:	f000 fcda 	bl	8000c48 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029a:	f000 f8b7 	bl	800040c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a2:	2302      	movs	r3, #2
 80002a4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fce8 	bl	8001c90 <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002c6:	f000 f8a1 	bl	800040c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM2;
 80002ca:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80002ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80002d0:	2300      	movs	r3, #0
 80002d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 fe9c 	bl	8002014 <HAL_RCCEx_PeriphCLKConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002e2:	f000 f893 	bl	800040c <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3798      	adds	r7, #152	@ 0x98
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b08e      	sub	sp, #56	@ 0x38
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000304:	f107 031c 	add.w	r3, r7, #28
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000310:	463b      	mov	r3, r7
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]
 800031e:	615a      	str	r2, [r3, #20]
 8000320:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000322:	4b2d      	ldr	r3, [pc, #180]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 8000324:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000328:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800032a:	4b2b      	ldr	r3, [pc, #172]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 800032c:	2247      	movs	r2, #71	@ 0x47
 800032e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000330:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000336:	4b28      	ldr	r3, [pc, #160]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 8000338:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800033c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000344:	4b24      	ldr	r3, [pc, #144]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 8000346:	2200      	movs	r2, #0
 8000348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800034a:	4823      	ldr	r0, [pc, #140]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 800034c:	f002 f87e 	bl	800244c <HAL_TIM_Base_Init>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000356:	f000 f859 	bl	800040c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800035a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800035e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000360:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000364:	4619      	mov	r1, r3
 8000366:	481c      	ldr	r0, [pc, #112]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 8000368:	f002 fc4a 	bl	8002c00 <HAL_TIM_ConfigClockSource>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000372:	f000 f84b 	bl	800040c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000376:	4818      	ldr	r0, [pc, #96]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 8000378:	f002 f8bf 	bl	80024fa <HAL_TIM_PWM_Init>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000382:	f000 f843 	bl	800040c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000386:	2300      	movs	r3, #0
 8000388:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800038a:	2300      	movs	r3, #0
 800038c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800038e:	f107 031c 	add.w	r3, r7, #28
 8000392:	4619      	mov	r1, r3
 8000394:	4810      	ldr	r0, [pc, #64]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 8000396:	f003 f99f 	bl	80036d8 <HAL_TIMEx_MasterConfigSynchronization>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80003a0:	f000 f834 	bl	800040c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003a4:	2360      	movs	r3, #96	@ 0x60
 80003a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003b0:	2300      	movs	r3, #0
 80003b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003b4:	463b      	mov	r3, r7
 80003b6:	2200      	movs	r2, #0
 80003b8:	4619      	mov	r1, r3
 80003ba:	4807      	ldr	r0, [pc, #28]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 80003bc:	f002 fb0c 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80003c6:	f000 f821 	bl	800040c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003ca:	4803      	ldr	r0, [pc, #12]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 80003cc:	f000 f86c 	bl	80004a8 <HAL_TIM_MspPostInit>

}
 80003d0:	bf00      	nop
 80003d2:	3738      	adds	r7, #56	@ 0x38
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000028 	.word	0x20000028

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e2:	4b09      	ldr	r3, [pc, #36]	@ (8000408 <MX_GPIO_Init+0x2c>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a08      	ldr	r2, [pc, #32]	@ (8000408 <MX_GPIO_Init+0x2c>)
 80003e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b06      	ldr	r3, [pc, #24]	@ (8000408 <MX_GPIO_Init+0x2c>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000

0800040c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000410:	b672      	cpsid	i
}
 8000412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <Error_Handler+0x8>

08000418 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041e:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <HAL_MspInit+0x44>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a0e      	ldr	r2, [pc, #56]	@ (800045c <HAL_MspInit+0x44>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <HAL_MspInit+0x44>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b09      	ldr	r3, [pc, #36]	@ (800045c <HAL_MspInit+0x44>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a08      	ldr	r2, [pc, #32]	@ (800045c <HAL_MspInit+0x44>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b06      	ldr	r3, [pc, #24]	@ (800045c <HAL_MspInit+0x44>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800044e:	2007      	movs	r0, #7
 8000450:	f000 fa2e 	bl	80008b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000

08000460 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000470:	d113      	bne.n	800049a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000472:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <HAL_TIM_Base_MspInit+0x44>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a0b      	ldr	r2, [pc, #44]	@ (80004a4 <HAL_TIM_Base_MspInit+0x44>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <HAL_TIM_Base_MspInit+0x44>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	201c      	movs	r0, #28
 8000490:	f000 fa19 	bl	80008c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000494:	201c      	movs	r0, #28
 8000496:	f000 fa32 	bl	80008fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800049a:	bf00      	nop
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000

080004a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 030c 	add.w	r3, r7, #12
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80004c8:	d11c      	bne.n	8000504 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b10      	ldr	r3, [pc, #64]	@ (800050c <HAL_TIM_MspPostInit+0x64>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a0f      	ldr	r2, [pc, #60]	@ (800050c <HAL_TIM_MspPostInit+0x64>)
 80004d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <HAL_TIM_MspPostInit+0x64>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004e2:	2301      	movs	r3, #1
 80004e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e6:	2302      	movs	r3, #2
 80004e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80004f2:	2301      	movs	r3, #1
 80004f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	4619      	mov	r1, r3
 80004fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000500:	f000 fa18 	bl	8000934 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000

08000510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <NMI_Handler+0x4>

08000518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <HardFault_Handler+0x4>

08000520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <MemManage_Handler+0x4>

08000528 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <BusFault_Handler+0x4>

08000530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <UsageFault_Handler+0x4>

08000538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000566:	f000 f88f 	bl	8000688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000574:	4802      	ldr	r0, [pc, #8]	@ (8000580 <TIM2_IRQHandler+0x10>)
 8000576:	f002 f92d 	bl	80027d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000028 	.word	0x20000028

08000584 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <SystemInit+0x20>)
 800058a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800058e:	4a05      	ldr	r2, [pc, #20]	@ (80005a4 <SystemInit+0x20>)
 8000590:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000594:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005ac:	f7ff ffea 	bl	8000584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b2:	490d      	ldr	r1, [pc, #52]	@ (80005e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b4:	4a0d      	ldr	r2, [pc, #52]	@ (80005ec <LoopForever+0xe>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a0a      	ldr	r2, [pc, #40]	@ (80005f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c8:	4c0a      	ldr	r4, [pc, #40]	@ (80005f4 <LoopForever+0x16>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005d6:	f003 f931 	bl	800383c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005da:	f7ff fdfb 	bl	80001d4 <main>

080005de <LoopForever>:

LoopForever:
    b LoopForever
 80005de:	e7fe      	b.n	80005de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005ec:	080038d4 	.word	0x080038d4
  ldr r2, =_sbss
 80005f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005f4:	20000078 	.word	0x20000078

080005f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005f8:	e7fe      	b.n	80005f8 <ADC1_2_IRQHandler>
	...

080005fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000600:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <HAL_Init+0x28>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a07      	ldr	r2, [pc, #28]	@ (8000624 <HAL_Init+0x28>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800060c:	2003      	movs	r0, #3
 800060e:	f000 f94f 	bl	80008b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000612:	2000      	movs	r0, #0
 8000614:	f000 f808 	bl	8000628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000618:	f7ff fefe 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40022000 	.word	0x40022000

08000628 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <HAL_InitTick+0x54>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <HAL_InitTick+0x58>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800063e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000642:	fbb2 f3f3 	udiv	r3, r2, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f967 	bl	800091a <HAL_SYSTICK_Config>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	e00e      	b.n	8000674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b0f      	cmp	r3, #15
 800065a:	d80a      	bhi.n	8000672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800065c:	2200      	movs	r2, #0
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	f000 f92f 	bl	80008c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000668:	4a06      	ldr	r2, [pc, #24]	@ (8000684 <HAL_InitTick+0x5c>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800066e:	2300      	movs	r3, #0
 8000670:	e000      	b.n	8000674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000000 	.word	0x20000000
 8000680:	20000008 	.word	0x20000008
 8000684:	20000004 	.word	0x20000004

08000688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <HAL_IncTick+0x20>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <HAL_IncTick+0x24>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4413      	add	r3, r2
 8000698:	4a04      	ldr	r2, [pc, #16]	@ (80006ac <HAL_IncTick+0x24>)
 800069a:	6013      	str	r3, [r2, #0]
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000074 	.word	0x20000074

080006b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80006b4:	4b03      	ldr	r3, [pc, #12]	@ (80006c4 <HAL_GetTick+0x14>)
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000074 	.word	0x20000074

080006c8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d0:	f7ff ffee 	bl	80006b0 <HAL_GetTick>
 80006d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e0:	d005      	beq.n	80006ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e2:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <HAL_Delay+0x44>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4413      	add	r3, r2
 80006ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006ee:	bf00      	nop
 80006f0:	f7ff ffde 	bl	80006b0 <HAL_GetTick>
 80006f4:	4602      	mov	r2, r0
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d8f7      	bhi.n	80006f0 <HAL_Delay+0x28>
  {
  }
}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000008 	.word	0x20000008

08000710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800072c:	4013      	ands	r3, r2
 800072e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000738:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800073c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000742:	4a04      	ldr	r2, [pc, #16]	@ (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	60d3      	str	r3, [r2, #12]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800075c:	4b04      	ldr	r3, [pc, #16]	@ (8000770 <__NVIC_GetPriorityGrouping+0x18>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	f003 0307 	and.w	r3, r3, #7
}
 8000766:	4618      	mov	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	2b00      	cmp	r3, #0
 8000784:	db0b      	blt.n	800079e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	f003 021f 	and.w	r2, r3, #31
 800078c:	4907      	ldr	r1, [pc, #28]	@ (80007ac <__NVIC_EnableIRQ+0x38>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	095b      	lsrs	r3, r3, #5
 8000794:	2001      	movs	r0, #1
 8000796:	fa00 f202 	lsl.w	r2, r0, r2
 800079a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000e100 	.word	0xe000e100

080007b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	6039      	str	r1, [r7, #0]
 80007ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	db0a      	blt.n	80007da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	490c      	ldr	r1, [pc, #48]	@ (80007fc <__NVIC_SetPriority+0x4c>)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	0112      	lsls	r2, r2, #4
 80007d0:	b2d2      	uxtb	r2, r2
 80007d2:	440b      	add	r3, r1
 80007d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d8:	e00a      	b.n	80007f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4908      	ldr	r1, [pc, #32]	@ (8000800 <__NVIC_SetPriority+0x50>)
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	f003 030f 	and.w	r3, r3, #15
 80007e6:	3b04      	subs	r3, #4
 80007e8:	0112      	lsls	r2, r2, #4
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	440b      	add	r3, r1
 80007ee:	761a      	strb	r2, [r3, #24]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	e000e100 	.word	0xe000e100
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000804:	b480      	push	{r7}
 8000806:	b089      	sub	sp, #36	@ 0x24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	f1c3 0307 	rsb	r3, r3, #7
 800081e:	2b04      	cmp	r3, #4
 8000820:	bf28      	it	cs
 8000822:	2304      	movcs	r3, #4
 8000824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3304      	adds	r3, #4
 800082a:	2b06      	cmp	r3, #6
 800082c:	d902      	bls.n	8000834 <NVIC_EncodePriority+0x30>
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3b03      	subs	r3, #3
 8000832:	e000      	b.n	8000836 <NVIC_EncodePriority+0x32>
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	f04f 32ff 	mov.w	r2, #4294967295
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43da      	mvns	r2, r3
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	401a      	ands	r2, r3
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800084c:	f04f 31ff 	mov.w	r1, #4294967295
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	fa01 f303 	lsl.w	r3, r1, r3
 8000856:	43d9      	mvns	r1, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085c:	4313      	orrs	r3, r2
         );
}
 800085e:	4618      	mov	r0, r3
 8000860:	3724      	adds	r7, #36	@ 0x24
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800087c:	d301      	bcc.n	8000882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800087e:	2301      	movs	r3, #1
 8000880:	e00f      	b.n	80008a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000882:	4a0a      	ldr	r2, [pc, #40]	@ (80008ac <SysTick_Config+0x40>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088a:	210f      	movs	r1, #15
 800088c:	f04f 30ff 	mov.w	r0, #4294967295
 8000890:	f7ff ff8e 	bl	80007b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <SysTick_Config+0x40>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089a:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <SysTick_Config+0x40>)
 800089c:	2207      	movs	r2, #7
 800089e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	e000e010 	.word	0xe000e010

080008b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff ff29 	bl	8000710 <__NVIC_SetPriorityGrouping>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
 80008d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d8:	f7ff ff3e 	bl	8000758 <__NVIC_GetPriorityGrouping>
 80008dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	68b9      	ldr	r1, [r7, #8]
 80008e2:	6978      	ldr	r0, [r7, #20]
 80008e4:	f7ff ff8e 	bl	8000804 <NVIC_EncodePriority>
 80008e8:	4602      	mov	r2, r0
 80008ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff5d 	bl	80007b0 <__NVIC_SetPriority>
}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff31 	bl	8000774 <__NVIC_EnableIRQ>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ffa2 	bl	800086c <SysTick_Config>
 8000928:	4603      	mov	r3, r0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000934:	b480      	push	{r7}
 8000936:	b087      	sub	sp, #28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000942:	e160      	b.n	8000c06 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	2101      	movs	r1, #1
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	fa01 f303 	lsl.w	r3, r1, r3
 8000950:	4013      	ands	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2b00      	cmp	r3, #0
 8000958:	f000 8152 	beq.w	8000c00 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f003 0303 	and.w	r3, r3, #3
 8000964:	2b01      	cmp	r3, #1
 8000966:	d005      	beq.n	8000974 <HAL_GPIO_Init+0x40>
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f003 0303 	and.w	r3, r3, #3
 8000970:	2b02      	cmp	r3, #2
 8000972:	d130      	bne.n	80009d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2203      	movs	r2, #3
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4013      	ands	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68da      	ldr	r2, [r3, #12]
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4313      	orrs	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009aa:	2201      	movs	r2, #1
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	4013      	ands	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	091b      	lsrs	r3, r3, #4
 80009c0:	f003 0201 	and.w	r2, r3, #1
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f003 0303 	and.w	r3, r3, #3
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d017      	beq.n	8000a12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	2203      	movs	r2, #3
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f003 0303 	and.w	r3, r3, #3
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d123      	bne.n	8000a66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	08da      	lsrs	r2, r3, #3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3208      	adds	r2, #8
 8000a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	220f      	movs	r2, #15
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	691a      	ldr	r2, [r3, #16]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	f003 0307 	and.w	r3, r3, #7
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	08da      	lsrs	r2, r3, #3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3208      	adds	r2, #8
 8000a60:	6939      	ldr	r1, [r7, #16]
 8000a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	2203      	movs	r2, #3
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43db      	mvns	r3, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f003 0203 	and.w	r2, r3, #3
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 80ac 	beq.w	8000c00 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa8:	4b5e      	ldr	r3, [pc, #376]	@ (8000c24 <HAL_GPIO_Init+0x2f0>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a5d      	ldr	r2, [pc, #372]	@ (8000c24 <HAL_GPIO_Init+0x2f0>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8000c24 <HAL_GPIO_Init+0x2f0>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ac0:	4a59      	ldr	r2, [pc, #356]	@ (8000c28 <HAL_GPIO_Init+0x2f4>)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	089b      	lsrs	r3, r3, #2
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	f003 0303 	and.w	r3, r3, #3
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	220f      	movs	r2, #15
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000aea:	d025      	beq.n	8000b38 <HAL_GPIO_Init+0x204>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a4f      	ldr	r2, [pc, #316]	@ (8000c2c <HAL_GPIO_Init+0x2f8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d01f      	beq.n	8000b34 <HAL_GPIO_Init+0x200>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a4e      	ldr	r2, [pc, #312]	@ (8000c30 <HAL_GPIO_Init+0x2fc>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d019      	beq.n	8000b30 <HAL_GPIO_Init+0x1fc>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a4d      	ldr	r2, [pc, #308]	@ (8000c34 <HAL_GPIO_Init+0x300>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d013      	beq.n	8000b2c <HAL_GPIO_Init+0x1f8>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a4c      	ldr	r2, [pc, #304]	@ (8000c38 <HAL_GPIO_Init+0x304>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d00d      	beq.n	8000b28 <HAL_GPIO_Init+0x1f4>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a4b      	ldr	r2, [pc, #300]	@ (8000c3c <HAL_GPIO_Init+0x308>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d007      	beq.n	8000b24 <HAL_GPIO_Init+0x1f0>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a4a      	ldr	r2, [pc, #296]	@ (8000c40 <HAL_GPIO_Init+0x30c>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d101      	bne.n	8000b20 <HAL_GPIO_Init+0x1ec>
 8000b1c:	2306      	movs	r3, #6
 8000b1e:	e00c      	b.n	8000b3a <HAL_GPIO_Init+0x206>
 8000b20:	2307      	movs	r3, #7
 8000b22:	e00a      	b.n	8000b3a <HAL_GPIO_Init+0x206>
 8000b24:	2305      	movs	r3, #5
 8000b26:	e008      	b.n	8000b3a <HAL_GPIO_Init+0x206>
 8000b28:	2304      	movs	r3, #4
 8000b2a:	e006      	b.n	8000b3a <HAL_GPIO_Init+0x206>
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e004      	b.n	8000b3a <HAL_GPIO_Init+0x206>
 8000b30:	2302      	movs	r3, #2
 8000b32:	e002      	b.n	8000b3a <HAL_GPIO_Init+0x206>
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <HAL_GPIO_Init+0x206>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	f002 0203 	and.w	r2, r2, #3
 8000b40:	0092      	lsls	r2, r2, #2
 8000b42:	4093      	lsls	r3, r2
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b4a:	4937      	ldr	r1, [pc, #220]	@ (8000c28 <HAL_GPIO_Init+0x2f4>)
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	089b      	lsrs	r3, r3, #2
 8000b50:	3302      	adds	r3, #2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b58:	4b3a      	ldr	r3, [pc, #232]	@ (8000c44 <HAL_GPIO_Init+0x310>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b7c:	4a31      	ldr	r2, [pc, #196]	@ (8000c44 <HAL_GPIO_Init+0x310>)
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b82:	4b30      	ldr	r3, [pc, #192]	@ (8000c44 <HAL_GPIO_Init+0x310>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ba6:	4a27      	ldr	r2, [pc, #156]	@ (8000c44 <HAL_GPIO_Init+0x310>)
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bac:	4b25      	ldr	r3, [pc, #148]	@ (8000c44 <HAL_GPIO_Init+0x310>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8000c44 <HAL_GPIO_Init+0x310>)
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <HAL_GPIO_Init+0x310>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bfa:	4a12      	ldr	r2, [pc, #72]	@ (8000c44 <HAL_GPIO_Init+0x310>)
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	3301      	adds	r3, #1
 8000c04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f47f ae97 	bne.w	8000944 <HAL_GPIO_Init+0x10>
  }
}
 8000c16:	bf00      	nop
 8000c18:	bf00      	nop
 8000c1a:	371c      	adds	r7, #28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010000 	.word	0x40010000
 8000c2c:	48000400 	.word	0x48000400
 8000c30:	48000800 	.word	0x48000800
 8000c34:	48000c00 	.word	0x48000c00
 8000c38:	48001000 	.word	0x48001000
 8000c3c:	48001400 	.word	0x48001400
 8000c40:	48001800 	.word	0x48001800
 8000c44:	40010400 	.word	0x40010400

08000c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c58:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	f001 b80a 	b.w	8001c82 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 8161 	beq.w	8000f46 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c84:	4bae      	ldr	r3, [pc, #696]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 030c 	and.w	r3, r3, #12
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d00c      	beq.n	8000caa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c90:	4bab      	ldr	r3, [pc, #684]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 030c 	and.w	r3, r3, #12
 8000c98:	2b08      	cmp	r3, #8
 8000c9a:	d157      	bne.n	8000d4c <HAL_RCC_OscConfig+0x104>
 8000c9c:	4ba8      	ldr	r3, [pc, #672]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ca8:	d150      	bne.n	8000d4c <HAL_RCC_OscConfig+0x104>
 8000caa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cae:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000cb6:	fa93 f3a3 	rbit	r3, r3
 8000cba:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cbe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc2:	fab3 f383 	clz	r3, r3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cca:	d802      	bhi.n	8000cd2 <HAL_RCC_OscConfig+0x8a>
 8000ccc:	4b9c      	ldr	r3, [pc, #624]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	e015      	b.n	8000cfe <HAL_RCC_OscConfig+0xb6>
 8000cd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cd6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cda:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000cde:	fa93 f3a3 	rbit	r3, r3
 8000ce2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000ce6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cea:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000cee:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000cf2:	fa93 f3a3 	rbit	r3, r3
 8000cf6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000cfa:	4b91      	ldr	r3, [pc, #580]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cfe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d02:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000d06:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000d0a:	fa92 f2a2 	rbit	r2, r2
 8000d0e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000d12:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000d16:	fab2 f282 	clz	r2, r2
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	f042 0220 	orr.w	r2, r2, #32
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	f002 021f 	and.w	r2, r2, #31
 8000d26:	2101      	movs	r1, #1
 8000d28:	fa01 f202 	lsl.w	r2, r1, r2
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 8108 	beq.w	8000f44 <HAL_RCC_OscConfig+0x2fc>
 8000d34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f040 80ff 	bne.w	8000f44 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f000 bf9b 	b.w	8001c82 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d5c:	d106      	bne.n	8000d6c <HAL_RCC_OscConfig+0x124>
 8000d5e:	4b78      	ldr	r3, [pc, #480]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a77      	ldr	r2, [pc, #476]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e036      	b.n	8000dda <HAL_RCC_OscConfig+0x192>
 8000d6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d10c      	bne.n	8000d96 <HAL_RCC_OscConfig+0x14e>
 8000d7c:	4b70      	ldr	r3, [pc, #448]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a6f      	ldr	r2, [pc, #444]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b6d      	ldr	r3, [pc, #436]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a6c      	ldr	r2, [pc, #432]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	e021      	b.n	8000dda <HAL_RCC_OscConfig+0x192>
 8000d96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d9a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000da6:	d10c      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x17a>
 8000da8:	4b65      	ldr	r3, [pc, #404]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a64      	ldr	r2, [pc, #400]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000dae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b62      	ldr	r3, [pc, #392]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a61      	ldr	r2, [pc, #388]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000dba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	e00b      	b.n	8000dda <HAL_RCC_OscConfig+0x192>
 8000dc2:	4b5f      	ldr	r3, [pc, #380]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a5e      	ldr	r2, [pc, #376]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000dc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	4b5c      	ldr	r3, [pc, #368]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a5b      	ldr	r2, [pc, #364]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000dd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dd8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dde:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d054      	beq.n	8000e94 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dea:	f7ff fc61 	bl	80006b0 <HAL_GetTick>
 8000dee:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df2:	e00a      	b.n	8000e0a <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000df4:	f7ff fc5c 	bl	80006b0 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b64      	cmp	r3, #100	@ 0x64
 8000e02:	d902      	bls.n	8000e0a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	f000 bf3c 	b.w	8001c82 <HAL_RCC_OscConfig+0x103a>
 8000e0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e0e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e12:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000e16:	fa93 f3a3 	rbit	r3, r3
 8000e1a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000e1e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e22:	fab3 f383 	clz	r3, r3
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e2a:	d802      	bhi.n	8000e32 <HAL_RCC_OscConfig+0x1ea>
 8000e2c:	4b44      	ldr	r3, [pc, #272]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	e015      	b.n	8000e5e <HAL_RCC_OscConfig+0x216>
 8000e32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e36:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000e3e:	fa93 f3a3 	rbit	r3, r3
 8000e42:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000e46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e4a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000e4e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000e52:	fa93 f3a3 	rbit	r3, r3
 8000e56:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000e5a:	4b39      	ldr	r3, [pc, #228]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e62:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000e66:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000e6a:	fa92 f2a2 	rbit	r2, r2
 8000e6e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000e72:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000e76:	fab2 f282 	clz	r2, r2
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	f042 0220 	orr.w	r2, r2, #32
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	f002 021f 	and.w	r2, r2, #31
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0b0      	beq.n	8000df4 <HAL_RCC_OscConfig+0x1ac>
 8000e92:	e058      	b.n	8000f46 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fc0c 	bl	80006b0 <HAL_GetTick>
 8000e98:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9c:	e00a      	b.n	8000eb4 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e9e:	f7ff fc07 	bl	80006b0 <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b64      	cmp	r3, #100	@ 0x64
 8000eac:	d902      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	f000 bee7 	b.w	8001c82 <HAL_RCC_OscConfig+0x103a>
 8000eb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eb8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000ec0:	fa93 f3a3 	rbit	r3, r3
 8000ec4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000ec8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ecc:	fab3 f383 	clz	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ed4:	d802      	bhi.n	8000edc <HAL_RCC_OscConfig+0x294>
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	e015      	b.n	8000f08 <HAL_RCC_OscConfig+0x2c0>
 8000edc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ee0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000ef0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ef4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000ef8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000efc:	fa93 f3a3 	rbit	r3, r3
 8000f00:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000f04:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <HAL_RCC_OscConfig+0x2f8>)
 8000f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f08:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f0c:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000f10:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000f14:	fa92 f2a2 	rbit	r2, r2
 8000f18:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000f1c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000f20:	fab2 f282 	clz	r2, r2
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	f042 0220 	orr.w	r2, r2, #32
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	f002 021f 	and.w	r2, r2, #31
 8000f30:	2101      	movs	r1, #1
 8000f32:	fa01 f202 	lsl.w	r2, r1, r2
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1b0      	bne.n	8000e9e <HAL_RCC_OscConfig+0x256>
 8000f3c:	e003      	b.n	8000f46 <HAL_RCC_OscConfig+0x2fe>
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 816d 	beq.w	8001236 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f5c:	4bcd      	ldr	r3, [pc, #820]	@ (8001294 <HAL_RCC_OscConfig+0x64c>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 030c 	and.w	r3, r3, #12
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00c      	beq.n	8000f82 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f68:	4bca      	ldr	r3, [pc, #808]	@ (8001294 <HAL_RCC_OscConfig+0x64c>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	2b08      	cmp	r3, #8
 8000f72:	d16e      	bne.n	8001052 <HAL_RCC_OscConfig+0x40a>
 8000f74:	4bc7      	ldr	r3, [pc, #796]	@ (8001294 <HAL_RCC_OscConfig+0x64c>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000f7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f80:	d167      	bne.n	8001052 <HAL_RCC_OscConfig+0x40a>
 8000f82:	2302      	movs	r3, #2
 8000f84:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f88:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000f8c:	fa93 f3a3 	rbit	r3, r3
 8000f90:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8000f94:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f98:	fab3 f383 	clz	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fa0:	d802      	bhi.n	8000fa8 <HAL_RCC_OscConfig+0x360>
 8000fa2:	4bbc      	ldr	r3, [pc, #752]	@ (8001294 <HAL_RCC_OscConfig+0x64c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	e013      	b.n	8000fd0 <HAL_RCC_OscConfig+0x388>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fae:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000fc0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000fc4:	fa93 f3a3 	rbit	r3, r3
 8000fc8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000fcc:	4bb1      	ldr	r3, [pc, #708]	@ (8001294 <HAL_RCC_OscConfig+0x64c>)
 8000fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8000fd6:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000fda:	fa92 f2a2 	rbit	r2, r2
 8000fde:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8000fe2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000fe6:	fab2 f282 	clz	r2, r2
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	f042 0220 	orr.w	r2, r2, #32
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	f002 021f 	and.w	r2, r2, #31
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00a      	beq.n	8001018 <HAL_RCC_OscConfig+0x3d0>
 8001002:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001006:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d002      	beq.n	8001018 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	f000 be35 	b.w	8001c82 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001018:	4b9e      	ldr	r3, [pc, #632]	@ (8001294 <HAL_RCC_OscConfig+0x64c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001020:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001024:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	21f8      	movs	r1, #248	@ 0xf8
 800102e:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001032:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001036:	fa91 f1a1 	rbit	r1, r1
 800103a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800103e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001042:	fab1 f181 	clz	r1, r1
 8001046:	b2c9      	uxtb	r1, r1
 8001048:	408b      	lsls	r3, r1
 800104a:	4992      	ldr	r1, [pc, #584]	@ (8001294 <HAL_RCC_OscConfig+0x64c>)
 800104c:	4313      	orrs	r3, r2
 800104e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001050:	e0f1      	b.n	8001236 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001052:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001056:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 8083 	beq.w	800116a <HAL_RCC_OscConfig+0x522>
 8001064:	2301      	movs	r3, #1
 8001066:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001076:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800107a:	fab3 f383 	clz	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001084:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	461a      	mov	r2, r3
 800108c:	2301      	movs	r3, #1
 800108e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fb0e 	bl	80006b0 <HAL_GetTick>
 8001094:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001098:	e00a      	b.n	80010b0 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800109a:	f7ff fb09 	bl	80006b0 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d902      	bls.n	80010b0 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	f000 bde9 	b.w	8001c82 <HAL_RCC_OscConfig+0x103a>
 80010b0:	2302      	movs	r3, #2
 80010b2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80010c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c6:	fab3 f383 	clz	r3, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80010ce:	d802      	bhi.n	80010d6 <HAL_RCC_OscConfig+0x48e>
 80010d0:	4b70      	ldr	r3, [pc, #448]	@ (8001294 <HAL_RCC_OscConfig+0x64c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	e013      	b.n	80010fe <HAL_RCC_OscConfig+0x4b6>
 80010d6:	2302      	movs	r3, #2
 80010d8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010dc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80010e0:	fa93 f3a3 	rbit	r3, r3
 80010e4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80010e8:	2302      	movs	r3, #2
 80010ea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80010ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80010fa:	4b66      	ldr	r3, [pc, #408]	@ (8001294 <HAL_RCC_OscConfig+0x64c>)
 80010fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fe:	2202      	movs	r2, #2
 8001100:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001104:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001108:	fa92 f2a2 	rbit	r2, r2
 800110c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001110:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001114:	fab2 f282 	clz	r2, r2
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	f042 0220 	orr.w	r2, r2, #32
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	f002 021f 	and.w	r2, r2, #31
 8001124:	2101      	movs	r1, #1
 8001126:	fa01 f202 	lsl.w	r2, r1, r2
 800112a:	4013      	ands	r3, r2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0b4      	beq.n	800109a <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4b58      	ldr	r3, [pc, #352]	@ (8001294 <HAL_RCC_OscConfig+0x64c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001138:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800113c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	21f8      	movs	r1, #248	@ 0xf8
 8001146:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800114e:	fa91 f1a1 	rbit	r1, r1
 8001152:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001156:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800115a:	fab1 f181 	clz	r1, r1
 800115e:	b2c9      	uxtb	r1, r1
 8001160:	408b      	lsls	r3, r1
 8001162:	494c      	ldr	r1, [pc, #304]	@ (8001294 <HAL_RCC_OscConfig+0x64c>)
 8001164:	4313      	orrs	r3, r2
 8001166:	600b      	str	r3, [r1, #0]
 8001168:	e065      	b.n	8001236 <HAL_RCC_OscConfig+0x5ee>
 800116a:	2301      	movs	r3, #1
 800116c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001170:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800117c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001180:	fab3 f383 	clz	r3, r3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800118a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	461a      	mov	r2, r3
 8001192:	2300      	movs	r3, #0
 8001194:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fa8b 	bl	80006b0 <HAL_GetTick>
 800119a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119e:	e00a      	b.n	80011b6 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a0:	f7ff fa86 	bl	80006b0 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d902      	bls.n	80011b6 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	f000 bd66 	b.w	8001c82 <HAL_RCC_OscConfig+0x103a>
 80011b6:	2302      	movs	r3, #2
 80011b8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80011c0:	fa93 f3a3 	rbit	r3, r3
 80011c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80011c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011cc:	fab3 f383 	clz	r3, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80011d4:	d802      	bhi.n	80011dc <HAL_RCC_OscConfig+0x594>
 80011d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001294 <HAL_RCC_OscConfig+0x64c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	e013      	b.n	8001204 <HAL_RCC_OscConfig+0x5bc>
 80011dc:	2302      	movs	r3, #2
 80011de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011e6:	fa93 f3a3 	rbit	r3, r3
 80011ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80011ee:	2302      	movs	r3, #2
 80011f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80011f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80011f8:	fa93 f3a3 	rbit	r3, r3
 80011fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001200:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <HAL_RCC_OscConfig+0x64c>)
 8001202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001204:	2202      	movs	r2, #2
 8001206:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800120a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800120e:	fa92 f2a2 	rbit	r2, r2
 8001212:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001216:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800121a:	fab2 f282 	clz	r2, r2
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	f042 0220 	orr.w	r2, r2, #32
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	f002 021f 	and.w	r2, r2, #31
 800122a:	2101      	movs	r1, #1
 800122c:	fa01 f202 	lsl.w	r2, r1, r2
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1b4      	bne.n	80011a0 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001236:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800123a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 8119 	beq.w	800147e <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800124c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001250:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 8082 	beq.w	8001362 <HAL_RCC_OscConfig+0x71a>
 800125e:	2301      	movs	r3, #1
 8001260:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001270:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001274:	fab3 f383 	clz	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_RCC_OscConfig+0x650>)
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	461a      	mov	r2, r3
 8001284:	2301      	movs	r3, #1
 8001286:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001288:	f7ff fa12 	bl	80006b0 <HAL_GetTick>
 800128c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001290:	e00f      	b.n	80012b2 <HAL_RCC_OscConfig+0x66a>
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
 8001298:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129c:	f7ff fa08 	bl	80006b0 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d902      	bls.n	80012b2 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	f000 bce8 	b.w	8001c82 <HAL_RCC_OscConfig+0x103a>
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80012bc:	fa93 f2a3 	rbit	r2, r3
 80012c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012d2:	2202      	movs	r2, #2
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	fa93 f2a3 	rbit	r2, r3
 80012e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012f6:	2202      	movs	r2, #2
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	fa93 f2a3 	rbit	r2, r3
 8001308:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800130c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001310:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	4bb0      	ldr	r3, [pc, #704]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 8001314:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800131a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800131e:	2102      	movs	r1, #2
 8001320:	6019      	str	r1, [r3, #0]
 8001322:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001326:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	fa93 f1a3 	rbit	r1, r3
 8001330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001334:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001338:	6019      	str	r1, [r3, #0]
  return result;
 800133a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800133e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800134e:	b2db      	uxtb	r3, r3
 8001350:	f003 031f 	and.w	r3, r3, #31
 8001354:	2101      	movs	r1, #1
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	4013      	ands	r3, r2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d09d      	beq.n	800129c <HAL_RCC_OscConfig+0x654>
 8001360:	e08d      	b.n	800147e <HAL_RCC_OscConfig+0x836>
 8001362:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001366:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800136a:	2201      	movs	r2, #1
 800136c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001372:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	fa93 f2a3 	rbit	r2, r3
 800137c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001380:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001384:	601a      	str	r2, [r3, #0]
  return result;
 8001386:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800138a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800138e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	fab3 f383 	clz	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	4b8f      	ldr	r3, [pc, #572]	@ (80015d8 <HAL_RCC_OscConfig+0x990>)
 800139a:	4413      	add	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	461a      	mov	r2, r3
 80013a0:	2300      	movs	r3, #0
 80013a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a4:	f7ff f984 	bl	80006b0 <HAL_GetTick>
 80013a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	e00a      	b.n	80013c4 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff f97f 	bl	80006b0 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d902      	bls.n	80013c4 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	f000 bc5f 	b.w	8001c82 <HAL_RCC_OscConfig+0x103a>
 80013c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013cc:	2202      	movs	r2, #2
 80013ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	fa93 f2a3 	rbit	r2, r3
 80013de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013f0:	2202      	movs	r2, #2
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	fa93 f2a3 	rbit	r2, r3
 8001402:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001406:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001410:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001414:	2202      	movs	r2, #2
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800141c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	fa93 f2a3 	rbit	r2, r3
 8001426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800142a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800142e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	4b68      	ldr	r3, [pc, #416]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 8001432:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001434:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001438:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800143c:	2102      	movs	r1, #2
 800143e:	6019      	str	r1, [r3, #0]
 8001440:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001444:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fa93 f1a3 	rbit	r1, r3
 800144e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001452:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001456:	6019      	str	r1, [r3, #0]
  return result;
 8001458:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800145c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	fab3 f383 	clz	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f003 031f 	and.w	r3, r3, #31
 8001472:	2101      	movs	r1, #1
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d197      	bne.n	80013ae <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001482:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 819c 	beq.w	80017cc <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b4e      	ldr	r3, [pc, #312]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d116      	bne.n	80014d4 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b4b      	ldr	r3, [pc, #300]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a4a      	ldr	r2, [pc, #296]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b48      	ldr	r3, [pc, #288]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80014ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014cc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	4b41      	ldr	r3, [pc, #260]	@ (80015dc <HAL_RCC_OscConfig+0x994>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d11a      	bne.n	8001516 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e0:	4b3e      	ldr	r3, [pc, #248]	@ (80015dc <HAL_RCC_OscConfig+0x994>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a3d      	ldr	r2, [pc, #244]	@ (80015dc <HAL_RCC_OscConfig+0x994>)
 80014e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ec:	f7ff f8e0 	bl	80006b0 <HAL_GetTick>
 80014f0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	e009      	b.n	800150a <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f6:	f7ff f8db 	bl	80006b0 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	@ 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e3bb      	b.n	8001c82 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150a:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <HAL_RCC_OscConfig+0x994>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0ef      	beq.n	80014f6 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800151a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d106      	bne.n	8001534 <HAL_RCC_OscConfig+0x8ec>
 8001526:	4b2b      	ldr	r3, [pc, #172]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4a2a      	ldr	r2, [pc, #168]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6213      	str	r3, [r2, #32]
 8001532:	e035      	b.n	80015a0 <HAL_RCC_OscConfig+0x958>
 8001534:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001538:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10c      	bne.n	800155e <HAL_RCC_OscConfig+0x916>
 8001544:	4b23      	ldr	r3, [pc, #140]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4a22      	ldr	r2, [pc, #136]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	6213      	str	r3, [r2, #32]
 8001550:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4a1f      	ldr	r2, [pc, #124]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 8001556:	f023 0304 	bic.w	r3, r3, #4
 800155a:	6213      	str	r3, [r2, #32]
 800155c:	e020      	b.n	80015a0 <HAL_RCC_OscConfig+0x958>
 800155e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001562:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b05      	cmp	r3, #5
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x940>
 800156e:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4a18      	ldr	r2, [pc, #96]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6213      	str	r3, [r2, #32]
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	4a15      	ldr	r2, [pc, #84]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6213      	str	r3, [r2, #32]
 8001586:	e00b      	b.n	80015a0 <HAL_RCC_OscConfig+0x958>
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4a11      	ldr	r2, [pc, #68]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	6213      	str	r3, [r2, #32]
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	4a0e      	ldr	r2, [pc, #56]	@ (80015d4 <HAL_RCC_OscConfig+0x98c>)
 800159a:	f023 0304 	bic.w	r3, r3, #4
 800159e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 8085 	beq.w	80016bc <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff f87d 	bl	80006b0 <HAL_GetTick>
 80015b6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	e011      	b.n	80015e0 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015bc:	f7ff f878 	bl	80006b0 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d907      	bls.n	80015e0 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e356      	b.n	8001c82 <HAL_RCC_OscConfig+0x103a>
 80015d4:	40021000 	.word	0x40021000
 80015d8:	10908120 	.word	0x10908120
 80015dc:	40007000 	.word	0x40007000
 80015e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80015e8:	2202      	movs	r2, #2
 80015ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015f0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	fa93 f2a3 	rbit	r2, r3
 80015fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015fe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001608:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800160c:	2202      	movs	r2, #2
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001614:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	fa93 f2a3 	rbit	r2, r3
 800161e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001622:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001626:	601a      	str	r2, [r3, #0]
  return result;
 8001628:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800162c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001630:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001632:	fab3 f383 	clz	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <HAL_RCC_OscConfig+0xa00>
 8001642:	4b98      	ldr	r3, [pc, #608]	@ (80018a4 <HAL_RCC_OscConfig+0xc5c>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	e013      	b.n	8001670 <HAL_RCC_OscConfig+0xa28>
 8001648:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800164c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001650:	2202      	movs	r2, #2
 8001652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001658:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	fa93 f2a3 	rbit	r2, r3
 8001662:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001666:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	4b8d      	ldr	r3, [pc, #564]	@ (80018a4 <HAL_RCC_OscConfig+0xc5c>)
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001674:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001678:	2102      	movs	r1, #2
 800167a:	6011      	str	r1, [r2, #0]
 800167c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001680:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	fa92 f1a2 	rbit	r1, r2
 800168a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800168e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001692:	6011      	str	r1, [r2, #0]
  return result;
 8001694:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001698:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	fab2 f282 	clz	r2, r2
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	f002 021f 	and.w	r2, r2, #31
 80016ae:	2101      	movs	r1, #1
 80016b0:	fa01 f202 	lsl.w	r2, r1, r2
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d080      	beq.n	80015bc <HAL_RCC_OscConfig+0x974>
 80016ba:	e07d      	b.n	80017b8 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016bc:	f7fe fff8 	bl	80006b0 <HAL_GetTick>
 80016c0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c4:	e00b      	b.n	80016de <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c6:	f7fe fff3 	bl	80006b0 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e2d1      	b.n	8001c82 <HAL_RCC_OscConfig+0x103a>
 80016de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80016e6:	2202      	movs	r2, #2
 80016e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ee:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	fa93 f2a3 	rbit	r2, r3
 80016f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016fc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001706:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800170a:	2202      	movs	r2, #2
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001712:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	fa93 f2a3 	rbit	r2, r3
 800171c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001720:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001724:	601a      	str	r2, [r3, #0]
  return result;
 8001726:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800172a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800172e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	fab3 f383 	clz	r3, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <HAL_RCC_OscConfig+0xafe>
 8001740:	4b58      	ldr	r3, [pc, #352]	@ (80018a4 <HAL_RCC_OscConfig+0xc5c>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	e013      	b.n	800176e <HAL_RCC_OscConfig+0xb26>
 8001746:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800174a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800174e:	2202      	movs	r2, #2
 8001750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001756:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	fa93 f2a3 	rbit	r2, r3
 8001760:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001764:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	4b4e      	ldr	r3, [pc, #312]	@ (80018a4 <HAL_RCC_OscConfig+0xc5c>)
 800176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001772:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001776:	2102      	movs	r1, #2
 8001778:	6011      	str	r1, [r2, #0]
 800177a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800177e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	fa92 f1a2 	rbit	r1, r2
 8001788:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800178c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001790:	6011      	str	r1, [r2, #0]
  return result;
 8001792:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001796:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	fab2 f282 	clz	r2, r2
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	f002 021f 	and.w	r2, r2, #31
 80017ac:	2101      	movs	r1, #1
 80017ae:	fa01 f202 	lsl.w	r2, r1, r2
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d186      	bne.n	80016c6 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017b8:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d105      	bne.n	80017cc <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c0:	4b38      	ldr	r3, [pc, #224]	@ (80018a4 <HAL_RCC_OscConfig+0xc5c>)
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	4a37      	ldr	r2, [pc, #220]	@ (80018a4 <HAL_RCC_OscConfig+0xc5c>)
 80017c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 8251 	beq.w	8001c80 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017de:	4b31      	ldr	r3, [pc, #196]	@ (80018a4 <HAL_RCC_OscConfig+0xc5c>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	f000 820f 	beq.w	8001c0a <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	f040 8165 	bne.w	8001ac8 <HAL_RCC_OscConfig+0xe80>
 80017fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001802:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001806:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800180a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001810:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	fa93 f2a3 	rbit	r2, r3
 800181a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800181e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001822:	601a      	str	r2, [r3, #0]
  return result;
 8001824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001828:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800182c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182e:	fab3 f383 	clz	r3, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001838:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	461a      	mov	r2, r3
 8001840:	2300      	movs	r3, #0
 8001842:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7fe ff34 	bl	80006b0 <HAL_GetTick>
 8001848:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184c:	e009      	b.n	8001862 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184e:	f7fe ff2f 	bl	80006b0 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e20f      	b.n	8001c82 <HAL_RCC_OscConfig+0x103a>
 8001862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001866:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800186a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800186e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001874:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	fa93 f2a3 	rbit	r2, r3
 800187e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001882:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001886:	601a      	str	r2, [r3, #0]
  return result;
 8001888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001890:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b3f      	cmp	r3, #63	@ 0x3f
 800189a:	d805      	bhi.n	80018a8 <HAL_RCC_OscConfig+0xc60>
 800189c:	4b01      	ldr	r3, [pc, #4]	@ (80018a4 <HAL_RCC_OscConfig+0xc5c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	e02a      	b.n	80018f8 <HAL_RCC_OscConfig+0xcb0>
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000
 80018a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ac:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80018b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ba:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	fa93 f2a3 	rbit	r2, r3
 80018c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80018d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	fa93 f2a3 	rbit	r2, r3
 80018ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ee:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	4bca      	ldr	r3, [pc, #808]	@ (8001c20 <HAL_RCC_OscConfig+0xfd8>)
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018fc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001900:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001904:	6011      	str	r1, [r2, #0]
 8001906:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800190a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	fa92 f1a2 	rbit	r1, r2
 8001914:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001918:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800191c:	6011      	str	r1, [r2, #0]
  return result;
 800191e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001922:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	fab2 f282 	clz	r2, r2
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f042 0220 	orr.w	r2, r2, #32
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	f002 021f 	and.w	r2, r2, #31
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f202 	lsl.w	r2, r1, r2
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d184      	bne.n	800184e <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001944:	4bb6      	ldr	r3, [pc, #728]	@ (8001c20 <HAL_RCC_OscConfig+0xfd8>)
 8001946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001948:	f023 020f 	bic.w	r2, r3, #15
 800194c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001950:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	49b1      	ldr	r1, [pc, #708]	@ (8001c20 <HAL_RCC_OscConfig+0xfd8>)
 800195a:	4313      	orrs	r3, r2
 800195c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800195e:	4bb0      	ldr	r3, [pc, #704]	@ (8001c20 <HAL_RCC_OscConfig+0xfd8>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001966:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6a19      	ldr	r1, [r3, #32]
 8001972:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001976:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	430b      	orrs	r3, r1
 8001980:	49a7      	ldr	r1, [pc, #668]	@ (8001c20 <HAL_RCC_OscConfig+0xfd8>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
 8001986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800198a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800198e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001998:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	fa93 f2a3 	rbit	r2, r3
 80019a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80019aa:	601a      	str	r2, [r3, #0]
  return result;
 80019ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80019b4:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019c0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	461a      	mov	r2, r3
 80019c8:	2301      	movs	r3, #1
 80019ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7fe fe70 	bl	80006b0 <HAL_GetTick>
 80019d0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d4:	e009      	b.n	80019ea <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d6:	f7fe fe6b 	bl	80006b0 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e14b      	b.n	8001c82 <HAL_RCC_OscConfig+0x103a>
 80019ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ee:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80019f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	fa93 f2a3 	rbit	r2, r3
 8001a06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a0e:	601a      	str	r2, [r3, #0]
  return result;
 8001a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a14:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a22:	d802      	bhi.n	8001a2a <HAL_RCC_OscConfig+0xde2>
 8001a24:	4b7e      	ldr	r3, [pc, #504]	@ (8001c20 <HAL_RCC_OscConfig+0xfd8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	e027      	b.n	8001a7a <HAL_RCC_OscConfig+0xe32>
 8001a2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a2e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a3c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	fa93 f2a3 	rbit	r2, r3
 8001a46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a4a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a54:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001a58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a62:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	fa93 f2a3 	rbit	r2, r3
 8001a6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a70:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	4b6a      	ldr	r3, [pc, #424]	@ (8001c20 <HAL_RCC_OscConfig+0xfd8>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a7e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001a82:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a86:	6011      	str	r1, [r2, #0]
 8001a88:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a8c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001a90:	6812      	ldr	r2, [r2, #0]
 8001a92:	fa92 f1a2 	rbit	r1, r2
 8001a96:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a9a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001a9e:	6011      	str	r1, [r2, #0]
  return result;
 8001aa0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001aa4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	fab2 f282 	clz	r2, r2
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	f042 0220 	orr.w	r2, r2, #32
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	f002 021f 	and.w	r2, r2, #31
 8001aba:	2101      	movs	r1, #1
 8001abc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d087      	beq.n	80019d6 <HAL_RCC_OscConfig+0xd8e>
 8001ac6:	e0db      	b.n	8001c80 <HAL_RCC_OscConfig+0x1038>
 8001ac8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001acc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001ad0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ada:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fa93 f2a3 	rbit	r2, r3
 8001ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001aec:	601a      	str	r2, [r3, #0]
  return result;
 8001aee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001af6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b02:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7fe fdcf 	bl	80006b0 <HAL_GetTick>
 8001b12:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b16:	e009      	b.n	8001b2c <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b18:	f7fe fdca 	bl	80006b0 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e0aa      	b.n	8001c82 <HAL_RCC_OscConfig+0x103a>
 8001b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b30:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fa93 f2a3 	rbit	r2, r3
 8001b48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b4c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b50:	601a      	str	r2, [r3, #0]
  return result;
 8001b52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b56:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5c:	fab3 f383 	clz	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b64:	d802      	bhi.n	8001b6c <HAL_RCC_OscConfig+0xf24>
 8001b66:	4b2e      	ldr	r3, [pc, #184]	@ (8001c20 <HAL_RCC_OscConfig+0xfd8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	e027      	b.n	8001bbc <HAL_RCC_OscConfig+0xf74>
 8001b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b70:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001b74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	fa93 f2a3 	rbit	r2, r3
 8001b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b8c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b96:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001b9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	fa93 f2a3 	rbit	r2, r3
 8001bae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb2:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <HAL_RCC_OscConfig+0xfd8>)
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bc0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001bc4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001bc8:	6011      	str	r1, [r2, #0]
 8001bca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bce:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	fa92 f1a2 	rbit	r1, r2
 8001bd8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bdc:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001be0:	6011      	str	r1, [r2, #0]
  return result;
 8001be2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001be6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	fab2 f282 	clz	r2, r2
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	f042 0220 	orr.w	r2, r2, #32
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	f002 021f 	and.w	r2, r2, #31
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d187      	bne.n	8001b18 <HAL_RCC_OscConfig+0xed0>
 8001c08:	e03a      	b.n	8001c80 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d104      	bne.n	8001c24 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e031      	b.n	8001c82 <HAL_RCC_OscConfig+0x103a>
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c24:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <HAL_RCC_OscConfig+0x1044>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001c2c:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <HAL_RCC_OscConfig+0x1044>)
 8001c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c30:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001c38:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001c3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d117      	bne.n	8001c7c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001c4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001c50:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d10b      	bne.n	8001c7c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001c64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c68:	f003 020f 	and.w	r2, r3, #15
 8001c6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000

08001c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b09e      	sub	sp, #120	@ 0x78
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e154      	b.n	8001f52 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b89      	ldr	r3, [pc, #548]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d910      	bls.n	8001cd8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b86      	ldr	r3, [pc, #536]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 0207 	bic.w	r2, r3, #7
 8001cbe:	4984      	ldr	r1, [pc, #528]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b82      	ldr	r3, [pc, #520]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e13c      	b.n	8001f52 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	4978      	ldr	r1, [pc, #480]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80cd 	beq.w	8001e9e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d137      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xec>
 8001d0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d10:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001d1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1c:	fab3 f383 	clz	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d24:	d802      	bhi.n	8001d2c <HAL_RCC_ClockConfig+0x9c>
 8001d26:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCC_ClockConfig+0xbc>
 8001d2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d48:	4b62      	ldr	r3, [pc, #392]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d50:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001d52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d54:	fa92 f2a2 	rbit	r2, r2
 8001d58:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001d5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d5c:	fab2 f282 	clz	r2, r2
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	f042 0220 	orr.w	r2, r2, #32
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f002 021f 	and.w	r2, r2, #31
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d171      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0ea      	b.n	8001f52 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d137      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x164>
 8001d84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d88:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d94:	fab3 f383 	clz	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d9c:	d802      	bhi.n	8001da4 <HAL_RCC_ClockConfig+0x114>
 8001d9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	e00f      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x134>
 8001da4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001da8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001db2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001db6:	643b      	str	r3, [r7, #64]	@ 0x40
 8001db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dc0:	4b44      	ldr	r3, [pc, #272]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dc8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001dca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001dcc:	fa92 f2a2 	rbit	r2, r2
 8001dd0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001dd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dd4:	fab2 f282 	clz	r2, r2
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f042 0220 	orr.w	r2, r2, #32
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f002 021f 	and.w	r2, r2, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d135      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0ae      	b.n	8001f52 <HAL_RCC_ClockConfig+0x2c2>
 8001df4:	2302      	movs	r3, #2
 8001df6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e0a:	d802      	bhi.n	8001e12 <HAL_RCC_ClockConfig+0x182>
 8001e0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	e00d      	b.n	8001e2e <HAL_RCC_ClockConfig+0x19e>
 8001e12:	2302      	movs	r3, #2
 8001e14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e1e:	2302      	movs	r3, #2
 8001e20:	623b      	str	r3, [r7, #32]
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2e:	2202      	movs	r2, #2
 8001e30:	61ba      	str	r2, [r7, #24]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	fa92 f2a2 	rbit	r2, r2
 8001e38:	617a      	str	r2, [r7, #20]
  return result;
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	fab2 f282 	clz	r2, r2
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	f042 0220 	orr.w	r2, r2, #32
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f002 021f 	and.w	r2, r2, #31
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e07a      	b.n	8001f52 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 0203 	bic.w	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	491a      	ldr	r1, [pc, #104]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e6e:	f7fe fc1f 	bl	80006b0 <HAL_GetTick>
 8001e72:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e76:	f7fe fc1b 	bl	80006b0 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e062      	b.n	8001f52 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 020c 	and.w	r2, r3, #12
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d1eb      	bne.n	8001e76 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d215      	bcs.n	8001ed8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eac:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 0207 	bic.w	r2, r3, #7
 8001eb4:	4906      	ldr	r1, [pc, #24]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebc:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d006      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e041      	b.n	8001f52 <HAL_RCC_ClockConfig+0x2c2>
 8001ece:	bf00      	nop
 8001ed0:	40022000 	.word	0x40022000
 8001ed4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f5c <HAL_RCC_ClockConfig+0x2cc>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	491a      	ldr	r1, [pc, #104]	@ (8001f5c <HAL_RCC_ClockConfig+0x2cc>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f02:	4b16      	ldr	r3, [pc, #88]	@ (8001f5c <HAL_RCC_ClockConfig+0x2cc>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4912      	ldr	r1, [pc, #72]	@ (8001f5c <HAL_RCC_ClockConfig+0x2cc>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f16:	f000 f829 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001f1a:	4601      	mov	r1, r0
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f5c <HAL_RCC_ClockConfig+0x2cc>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f24:	22f0      	movs	r2, #240	@ 0xf0
 8001f26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	fa92 f2a2 	rbit	r2, r2
 8001f2e:	60fa      	str	r2, [r7, #12]
  return result;
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	fab2 f282 	clz	r2, r2
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	40d3      	lsrs	r3, r2
 8001f3a:	4a09      	ldr	r2, [pc, #36]	@ (8001f60 <HAL_RCC_ClockConfig+0x2d0>)
 8001f3c:	5cd3      	ldrb	r3, [r2, r3]
 8001f3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f42:	4a08      	ldr	r2, [pc, #32]	@ (8001f64 <HAL_RCC_ClockConfig+0x2d4>)
 8001f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f46:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <HAL_RCC_ClockConfig+0x2d8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fb6c 	bl	8000628 <HAL_InitTick>
  
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3778      	adds	r7, #120	@ 0x78
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	0800389c 	.word	0x0800389c
 8001f64:	20000000 	.word	0x20000000
 8001f68:	20000004 	.word	0x20000004

08001f6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001f86:	4b1f      	ldr	r3, [pc, #124]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d002      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x30>
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d003      	beq.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x36>
 8001f9a:	e029      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f9e:	613b      	str	r3, [r7, #16]
      break;
 8001fa0:	e029      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	0c9b      	lsrs	r3, r3, #18
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	4a18      	ldr	r2, [pc, #96]	@ (800200c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fac:	5cd3      	ldrb	r3, [r2, r3]
 8001fae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001fb0:	4b14      	ldr	r3, [pc, #80]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	4a15      	ldr	r2, [pc, #84]	@ (8002010 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
 8001fbc:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e007      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fda:	4a0b      	ldr	r2, [pc, #44]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	613b      	str	r3, [r7, #16]
      break;
 8001fee:	e002      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ff0:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ff2:	613b      	str	r3, [r7, #16]
      break;
 8001ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ff6:	693b      	ldr	r3, [r7, #16]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40021000 	.word	0x40021000
 8002008:	007a1200 	.word	0x007a1200
 800200c:	080038ac 	.word	0x080038ac
 8002010:	080038bc 	.word	0x080038bc

08002014 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b092      	sub	sp, #72	@ 0x48
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002024:	2300      	movs	r3, #0
 8002026:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80d2 	beq.w	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002038:	4b4d      	ldr	r3, [pc, #308]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10e      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002044:	4b4a      	ldr	r3, [pc, #296]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	4a49      	ldr	r2, [pc, #292]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800204a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204e:	61d3      	str	r3, [r2, #28]
 8002050:	4b47      	ldr	r3, [pc, #284]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205c:	2301      	movs	r3, #1
 800205e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002062:	4b44      	ldr	r3, [pc, #272]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d118      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206e:	4b41      	ldr	r3, [pc, #260]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a40      	ldr	r2, [pc, #256]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002078:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207a:	f7fe fb19 	bl	80006b0 <HAL_GetTick>
 800207e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	e008      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002082:	f7fe fb15 	bl	80006b0 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b64      	cmp	r3, #100	@ 0x64
 800208e:	d901      	bls.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e1d4      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	4b37      	ldr	r3, [pc, #220]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020a0:	4b33      	ldr	r3, [pc, #204]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8082 	beq.w	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020bc:	429a      	cmp	r2, r3
 80020be:	d07a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80020d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b25      	ldr	r3, [pc, #148]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	461a      	mov	r2, r3
 80020ea:	2301      	movs	r3, #1
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80020fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	461a      	mov	r2, r3
 800210e:	2300      	movs	r3, #0
 8002110:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002112:	4a17      	ldr	r2, [pc, #92]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002116:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d049      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7fe fac5 	bl	80006b0 <HAL_GetTick>
 8002126:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002128:	e00a      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7fe fac1 	bl	80006b0 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e17e      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002140:	2302      	movs	r3, #2
 8002142:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	627b      	str	r3, [r7, #36]	@ 0x24
 800214c:	2302      	movs	r3, #2
 800214e:	623b      	str	r3, [r7, #32]
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	61fb      	str	r3, [r7, #28]
  return result;
 8002158:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d108      	bne.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800216a:	4b01      	ldr	r3, [pc, #4]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	e00d      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002170:	40021000 	.word	0x40021000
 8002174:	40007000 	.word	0x40007000
 8002178:	10908100 	.word	0x10908100
 800217c:	2302      	movs	r3, #2
 800217e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	4b9a      	ldr	r3, [pc, #616]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	2202      	movs	r2, #2
 800218e:	613a      	str	r2, [r7, #16]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	fa92 f2a2 	rbit	r2, r2
 8002196:	60fa      	str	r2, [r7, #12]
  return result;
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	fab2 f282 	clz	r2, r2
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	f002 021f 	and.w	r2, r2, #31
 80021aa:	2101      	movs	r1, #1
 80021ac:	fa01 f202 	lsl.w	r2, r1, r2
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0b9      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021b6:	4b8f      	ldr	r3, [pc, #572]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	498c      	ldr	r1, [pc, #560]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d0:	4b88      	ldr	r3, [pc, #544]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	4a87      	ldr	r2, [pc, #540]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e8:	4b82      	ldr	r3, [pc, #520]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ec:	f023 0203 	bic.w	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	497f      	ldr	r1, [pc, #508]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002206:	4b7b      	ldr	r3, [pc, #492]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	4978      	ldr	r1, [pc, #480]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002214:	4313      	orrs	r3, r2
 8002216:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002224:	4b73      	ldr	r3, [pc, #460]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002228:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	4970      	ldr	r1, [pc, #448]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002232:	4313      	orrs	r3, r2
 8002234:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002242:	4b6c      	ldr	r3, [pc, #432]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	f023 0210 	bic.w	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4969      	ldr	r1, [pc, #420]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002250:	4313      	orrs	r3, r2
 8002252:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002260:	4b64      	ldr	r3, [pc, #400]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226c:	4961      	ldr	r1, [pc, #388]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d008      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800227e:	4b5d      	ldr	r3, [pc, #372]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	f023 0220 	bic.w	r2, r3, #32
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	495a      	ldr	r1, [pc, #360]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800228c:	4313      	orrs	r3, r2
 800228e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800229c:	4b55      	ldr	r3, [pc, #340]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	4952      	ldr	r1, [pc, #328]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022ba:	4b4e      	ldr	r3, [pc, #312]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	494b      	ldr	r1, [pc, #300]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022d8:	4b46      	ldr	r3, [pc, #280]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	4943      	ldr	r1, [pc, #268]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022f6:	4b3f      	ldr	r3, [pc, #252]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	493c      	ldr	r1, [pc, #240]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002314:	4b37      	ldr	r3, [pc, #220]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002318:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002320:	4934      	ldr	r1, [pc, #208]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002322:	4313      	orrs	r3, r2
 8002324:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d008      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002332:	4b30      	ldr	r3, [pc, #192]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002336:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233e:	492d      	ldr	r1, [pc, #180]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002340:	4313      	orrs	r3, r2
 8002342:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002350:	4b28      	ldr	r3, [pc, #160]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002354:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800235c:	4925      	ldr	r1, [pc, #148]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235e:	4313      	orrs	r3, r2
 8002360:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800236e:	4b21      	ldr	r3, [pc, #132]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	491e      	ldr	r1, [pc, #120]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237c:	4313      	orrs	r3, r2
 800237e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800238c:	4b19      	ldr	r3, [pc, #100]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002390:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002398:	4916      	ldr	r1, [pc, #88]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239a:	4313      	orrs	r3, r2
 800239c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d008      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80023aa:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b6:	490f      	ldr	r1, [pc, #60]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80023c8:	4b0a      	ldr	r3, [pc, #40]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023cc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d4:	4907      	ldr	r1, [pc, #28]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00c      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80023e6:	4b03      	ldr	r3, [pc, #12]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	e002      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023fa:	4913      	ldr	r1, [pc, #76]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800240c:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002410:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002418:	490b      	ldr	r1, [pc, #44]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800241a:	4313      	orrs	r3, r2
 800241c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800242a:	4b07      	ldr	r3, [pc, #28]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002436:	4904      	ldr	r1, [pc, #16]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002438:	4313      	orrs	r3, r2
 800243a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3748      	adds	r7, #72	@ 0x48
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000

0800244c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e049      	b.n	80024f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fd fff4 	bl	8000460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3304      	adds	r3, #4
 8002488:	4619      	mov	r1, r3
 800248a:	4610      	mov	r0, r2
 800248c:	f000 fcb4 	bl	8002df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e049      	b.n	80025a0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d106      	bne.n	8002526 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f841 	bl	80025a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2202      	movs	r2, #2
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3304      	adds	r3, #4
 8002536:	4619      	mov	r1, r3
 8002538:	4610      	mov	r0, r2
 800253a:	f000 fc5d 	bl	8002df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d109      	bne.n	80025e0 <HAL_TIM_PWM_Start+0x24>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e03c      	b.n	800265a <HAL_TIM_PWM_Start+0x9e>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d109      	bne.n	80025fa <HAL_TIM_PWM_Start+0x3e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	bf14      	ite	ne
 80025f2:	2301      	movne	r3, #1
 80025f4:	2300      	moveq	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	e02f      	b.n	800265a <HAL_TIM_PWM_Start+0x9e>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d109      	bne.n	8002614 <HAL_TIM_PWM_Start+0x58>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b01      	cmp	r3, #1
 800260a:	bf14      	ite	ne
 800260c:	2301      	movne	r3, #1
 800260e:	2300      	moveq	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	e022      	b.n	800265a <HAL_TIM_PWM_Start+0x9e>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d109      	bne.n	800262e <HAL_TIM_PWM_Start+0x72>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	bf14      	ite	ne
 8002626:	2301      	movne	r3, #1
 8002628:	2300      	moveq	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	e015      	b.n	800265a <HAL_TIM_PWM_Start+0x9e>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b10      	cmp	r3, #16
 8002632:	d109      	bne.n	8002648 <HAL_TIM_PWM_Start+0x8c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	bf14      	ite	ne
 8002640:	2301      	movne	r3, #1
 8002642:	2300      	moveq	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	e008      	b.n	800265a <HAL_TIM_PWM_Start+0x9e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b01      	cmp	r3, #1
 8002652:	bf14      	ite	ne
 8002654:	2301      	movne	r3, #1
 8002656:	2300      	moveq	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0a1      	b.n	80027a6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d104      	bne.n	8002672 <HAL_TIM_PWM_Start+0xb6>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002670:	e023      	b.n	80026ba <HAL_TIM_PWM_Start+0xfe>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d104      	bne.n	8002682 <HAL_TIM_PWM_Start+0xc6>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002680:	e01b      	b.n	80026ba <HAL_TIM_PWM_Start+0xfe>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d104      	bne.n	8002692 <HAL_TIM_PWM_Start+0xd6>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002690:	e013      	b.n	80026ba <HAL_TIM_PWM_Start+0xfe>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b0c      	cmp	r3, #12
 8002696:	d104      	bne.n	80026a2 <HAL_TIM_PWM_Start+0xe6>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026a0:	e00b      	b.n	80026ba <HAL_TIM_PWM_Start+0xfe>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d104      	bne.n	80026b2 <HAL_TIM_PWM_Start+0xf6>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026b0:	e003      	b.n	80026ba <HAL_TIM_PWM_Start+0xfe>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2201      	movs	r2, #1
 80026c0:	6839      	ldr	r1, [r7, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 ffe2 	bl	800368c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a38      	ldr	r2, [pc, #224]	@ (80027b0 <HAL_TIM_PWM_Start+0x1f4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d018      	beq.n	8002704 <HAL_TIM_PWM_Start+0x148>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a37      	ldr	r2, [pc, #220]	@ (80027b4 <HAL_TIM_PWM_Start+0x1f8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d013      	beq.n	8002704 <HAL_TIM_PWM_Start+0x148>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a35      	ldr	r2, [pc, #212]	@ (80027b8 <HAL_TIM_PWM_Start+0x1fc>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00e      	beq.n	8002704 <HAL_TIM_PWM_Start+0x148>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a34      	ldr	r2, [pc, #208]	@ (80027bc <HAL_TIM_PWM_Start+0x200>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d009      	beq.n	8002704 <HAL_TIM_PWM_Start+0x148>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a32      	ldr	r2, [pc, #200]	@ (80027c0 <HAL_TIM_PWM_Start+0x204>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d004      	beq.n	8002704 <HAL_TIM_PWM_Start+0x148>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a31      	ldr	r2, [pc, #196]	@ (80027c4 <HAL_TIM_PWM_Start+0x208>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d101      	bne.n	8002708 <HAL_TIM_PWM_Start+0x14c>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_TIM_PWM_Start+0x14e>
 8002708:	2300      	movs	r3, #0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d007      	beq.n	800271e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800271c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a23      	ldr	r2, [pc, #140]	@ (80027b0 <HAL_TIM_PWM_Start+0x1f4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d01d      	beq.n	8002764 <HAL_TIM_PWM_Start+0x1a8>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002730:	d018      	beq.n	8002764 <HAL_TIM_PWM_Start+0x1a8>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a24      	ldr	r2, [pc, #144]	@ (80027c8 <HAL_TIM_PWM_Start+0x20c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d013      	beq.n	8002764 <HAL_TIM_PWM_Start+0x1a8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a22      	ldr	r2, [pc, #136]	@ (80027cc <HAL_TIM_PWM_Start+0x210>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00e      	beq.n	8002764 <HAL_TIM_PWM_Start+0x1a8>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a1a      	ldr	r2, [pc, #104]	@ (80027b4 <HAL_TIM_PWM_Start+0x1f8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d009      	beq.n	8002764 <HAL_TIM_PWM_Start+0x1a8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a18      	ldr	r2, [pc, #96]	@ (80027b8 <HAL_TIM_PWM_Start+0x1fc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d004      	beq.n	8002764 <HAL_TIM_PWM_Start+0x1a8>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a19      	ldr	r2, [pc, #100]	@ (80027c4 <HAL_TIM_PWM_Start+0x208>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d115      	bne.n	8002790 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <HAL_TIM_PWM_Start+0x214>)
 800276c:	4013      	ands	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b06      	cmp	r3, #6
 8002774:	d015      	beq.n	80027a2 <HAL_TIM_PWM_Start+0x1e6>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800277c:	d011      	beq.n	80027a2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0201 	orr.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278e:	e008      	b.n	80027a2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e000      	b.n	80027a4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40012c00 	.word	0x40012c00
 80027b4:	40013400 	.word	0x40013400
 80027b8:	40014000 	.word	0x40014000
 80027bc:	40014400 	.word	0x40014400
 80027c0:	40014800 	.word	0x40014800
 80027c4:	40015000 	.word	0x40015000
 80027c8:	40000400 	.word	0x40000400
 80027cc:	40000800 	.word	0x40000800
 80027d0:	00010007 	.word	0x00010007

080027d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d020      	beq.n	8002838 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d01b      	beq.n	8002838 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0202 	mvn.w	r2, #2
 8002808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 facb 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 8002824:	e005      	b.n	8002832 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fabd 	bl	8002da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 face 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	2b00      	cmp	r3, #0
 8002840:	d020      	beq.n	8002884 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d01b      	beq.n	8002884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0204 	mvn.w	r2, #4
 8002854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2202      	movs	r2, #2
 800285a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 faa5 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 8002870:	e005      	b.n	800287e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fa97 	bl	8002da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 faa8 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d020      	beq.n	80028d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01b      	beq.n	80028d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f06f 0208 	mvn.w	r2, #8
 80028a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2204      	movs	r2, #4
 80028a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fa7f 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 80028bc:	e005      	b.n	80028ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fa71 	bl	8002da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fa82 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d020      	beq.n	800291c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01b      	beq.n	800291c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0210 	mvn.w	r2, #16
 80028ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2208      	movs	r2, #8
 80028f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fa59 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fa4b 	bl	8002da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fa5c 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00c      	beq.n	8002940 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d007      	beq.n	8002940 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0201 	mvn.w	r2, #1
 8002938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fa29 	bl	8002d92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00c      	beq.n	8002964 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800295c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 ff50 	bl	8003804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00c      	beq.n	8002988 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 ff48 	bl	8003818 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00c      	beq.n	80029ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d007      	beq.n	80029ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fa1b 	bl	8002de2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00c      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0220 	mvn.w	r2, #32
 80029c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 ff10 	bl	80037f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0ff      	b.n	8002bf6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b14      	cmp	r3, #20
 8002a02:	f200 80f0 	bhi.w	8002be6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002a06:	a201      	add	r2, pc, #4	@ (adr r2, 8002a0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a61 	.word	0x08002a61
 8002a10:	08002be7 	.word	0x08002be7
 8002a14:	08002be7 	.word	0x08002be7
 8002a18:	08002be7 	.word	0x08002be7
 8002a1c:	08002aa1 	.word	0x08002aa1
 8002a20:	08002be7 	.word	0x08002be7
 8002a24:	08002be7 	.word	0x08002be7
 8002a28:	08002be7 	.word	0x08002be7
 8002a2c:	08002ae3 	.word	0x08002ae3
 8002a30:	08002be7 	.word	0x08002be7
 8002a34:	08002be7 	.word	0x08002be7
 8002a38:	08002be7 	.word	0x08002be7
 8002a3c:	08002b23 	.word	0x08002b23
 8002a40:	08002be7 	.word	0x08002be7
 8002a44:	08002be7 	.word	0x08002be7
 8002a48:	08002be7 	.word	0x08002be7
 8002a4c:	08002b65 	.word	0x08002b65
 8002a50:	08002be7 	.word	0x08002be7
 8002a54:	08002be7 	.word	0x08002be7
 8002a58:	08002be7 	.word	0x08002be7
 8002a5c:	08002ba5 	.word	0x08002ba5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fa70 	bl	8002f4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0208 	orr.w	r2, r2, #8
 8002a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0204 	bic.w	r2, r2, #4
 8002a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6999      	ldr	r1, [r3, #24]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	619a      	str	r2, [r3, #24]
      break;
 8002a9e:	e0a5      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 faea 	bl	8003080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6999      	ldr	r1, [r3, #24]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	619a      	str	r2, [r3, #24]
      break;
 8002ae0:	e084      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fb5d 	bl	80031a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0208 	orr.w	r2, r2, #8
 8002afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0204 	bic.w	r2, r2, #4
 8002b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69d9      	ldr	r1, [r3, #28]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	61da      	str	r2, [r3, #28]
      break;
 8002b20:	e064      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fbcf 	bl	80032cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69d9      	ldr	r1, [r3, #28]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	021a      	lsls	r2, r3, #8
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	61da      	str	r2, [r3, #28]
      break;
 8002b62:	e043      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fc1e 	bl	80033ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0208 	orr.w	r2, r2, #8
 8002b7e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002ba2:	e023      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fc68 	bl	8003480 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bbe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	021a      	lsls	r2, r3, #8
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002be4:	e002      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop

08002c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_TIM_ConfigClockSource+0x1c>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e0b6      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x18a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c58:	d03e      	beq.n	8002cd8 <HAL_TIM_ConfigClockSource+0xd8>
 8002c5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c5e:	f200 8087 	bhi.w	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c66:	f000 8086 	beq.w	8002d76 <HAL_TIM_ConfigClockSource+0x176>
 8002c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c6e:	d87f      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002c70:	2b70      	cmp	r3, #112	@ 0x70
 8002c72:	d01a      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0xaa>
 8002c74:	2b70      	cmp	r3, #112	@ 0x70
 8002c76:	d87b      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002c78:	2b60      	cmp	r3, #96	@ 0x60
 8002c7a:	d050      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x11e>
 8002c7c:	2b60      	cmp	r3, #96	@ 0x60
 8002c7e:	d877      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002c80:	2b50      	cmp	r3, #80	@ 0x50
 8002c82:	d03c      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0xfe>
 8002c84:	2b50      	cmp	r3, #80	@ 0x50
 8002c86:	d873      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002c88:	2b40      	cmp	r3, #64	@ 0x40
 8002c8a:	d058      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0x13e>
 8002c8c:	2b40      	cmp	r3, #64	@ 0x40
 8002c8e:	d86f      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002c90:	2b30      	cmp	r3, #48	@ 0x30
 8002c92:	d064      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15e>
 8002c94:	2b30      	cmp	r3, #48	@ 0x30
 8002c96:	d86b      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d060      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15e>
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d867      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d05c      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15e>
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	d05a      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15e>
 8002ca8:	e062      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cba:	f000 fcc7 	bl	800364c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ccc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	609a      	str	r2, [r3, #8]
      break;
 8002cd6:	e04f      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ce8:	f000 fcb0 	bl	800364c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cfa:	609a      	str	r2, [r3, #8]
      break;
 8002cfc:	e03c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f000 fc24 	bl	8003558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2150      	movs	r1, #80	@ 0x50
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fc7d 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 8002d1c:	e02c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f000 fc43 	bl	80035b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2160      	movs	r1, #96	@ 0x60
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fc6d 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 8002d3c:	e01c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f000 fc04 	bl	8003558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2140      	movs	r1, #64	@ 0x40
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fc5d 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 8002d5c:	e00c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4619      	mov	r1, r3
 8002d68:	4610      	mov	r0, r2
 8002d6a:	f000 fc54 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 8002d6e:	e003      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      break;
 8002d74:	e000      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002d76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a48      	ldr	r2, [pc, #288]	@ (8002f2c <TIM_Base_SetConfig+0x134>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d013      	beq.n	8002e38 <TIM_Base_SetConfig+0x40>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e16:	d00f      	beq.n	8002e38 <TIM_Base_SetConfig+0x40>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a45      	ldr	r2, [pc, #276]	@ (8002f30 <TIM_Base_SetConfig+0x138>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00b      	beq.n	8002e38 <TIM_Base_SetConfig+0x40>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a44      	ldr	r2, [pc, #272]	@ (8002f34 <TIM_Base_SetConfig+0x13c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d007      	beq.n	8002e38 <TIM_Base_SetConfig+0x40>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a43      	ldr	r2, [pc, #268]	@ (8002f38 <TIM_Base_SetConfig+0x140>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d003      	beq.n	8002e38 <TIM_Base_SetConfig+0x40>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a42      	ldr	r2, [pc, #264]	@ (8002f3c <TIM_Base_SetConfig+0x144>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d108      	bne.n	8002e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a37      	ldr	r2, [pc, #220]	@ (8002f2c <TIM_Base_SetConfig+0x134>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d01f      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e58:	d01b      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a34      	ldr	r2, [pc, #208]	@ (8002f30 <TIM_Base_SetConfig+0x138>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d017      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a33      	ldr	r2, [pc, #204]	@ (8002f34 <TIM_Base_SetConfig+0x13c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a32      	ldr	r2, [pc, #200]	@ (8002f38 <TIM_Base_SetConfig+0x140>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00f      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a32      	ldr	r2, [pc, #200]	@ (8002f40 <TIM_Base_SetConfig+0x148>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00b      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a31      	ldr	r2, [pc, #196]	@ (8002f44 <TIM_Base_SetConfig+0x14c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d007      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a30      	ldr	r2, [pc, #192]	@ (8002f48 <TIM_Base_SetConfig+0x150>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d003      	beq.n	8002e92 <TIM_Base_SetConfig+0x9a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f3c <TIM_Base_SetConfig+0x144>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d108      	bne.n	8002ea4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a18      	ldr	r2, [pc, #96]	@ (8002f2c <TIM_Base_SetConfig+0x134>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <TIM_Base_SetConfig+0x100>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a19      	ldr	r2, [pc, #100]	@ (8002f38 <TIM_Base_SetConfig+0x140>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00f      	beq.n	8002ef8 <TIM_Base_SetConfig+0x100>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a19      	ldr	r2, [pc, #100]	@ (8002f40 <TIM_Base_SetConfig+0x148>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00b      	beq.n	8002ef8 <TIM_Base_SetConfig+0x100>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a18      	ldr	r2, [pc, #96]	@ (8002f44 <TIM_Base_SetConfig+0x14c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <TIM_Base_SetConfig+0x100>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a17      	ldr	r2, [pc, #92]	@ (8002f48 <TIM_Base_SetConfig+0x150>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d003      	beq.n	8002ef8 <TIM_Base_SetConfig+0x100>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a12      	ldr	r2, [pc, #72]	@ (8002f3c <TIM_Base_SetConfig+0x144>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d103      	bne.n	8002f00 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d105      	bne.n	8002f1e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f023 0201 	bic.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	611a      	str	r2, [r3, #16]
  }
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40012c00 	.word	0x40012c00
 8002f30:	40000400 	.word	0x40000400
 8002f34:	40000800 	.word	0x40000800
 8002f38:	40013400 	.word	0x40013400
 8002f3c:	40015000 	.word	0x40015000
 8002f40:	40014000 	.word	0x40014000
 8002f44:	40014400 	.word	0x40014400
 8002f48:	40014800 	.word	0x40014800

08002f4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f023 0201 	bic.w	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0303 	bic.w	r3, r3, #3
 8002f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f023 0302 	bic.w	r3, r3, #2
 8002f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a30      	ldr	r2, [pc, #192]	@ (8003068 <TIM_OC1_SetConfig+0x11c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d013      	beq.n	8002fd4 <TIM_OC1_SetConfig+0x88>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a2f      	ldr	r2, [pc, #188]	@ (800306c <TIM_OC1_SetConfig+0x120>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00f      	beq.n	8002fd4 <TIM_OC1_SetConfig+0x88>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a2e      	ldr	r2, [pc, #184]	@ (8003070 <TIM_OC1_SetConfig+0x124>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <TIM_OC1_SetConfig+0x88>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a2d      	ldr	r2, [pc, #180]	@ (8003074 <TIM_OC1_SetConfig+0x128>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d007      	beq.n	8002fd4 <TIM_OC1_SetConfig+0x88>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a2c      	ldr	r2, [pc, #176]	@ (8003078 <TIM_OC1_SetConfig+0x12c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d003      	beq.n	8002fd4 <TIM_OC1_SetConfig+0x88>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a2b      	ldr	r2, [pc, #172]	@ (800307c <TIM_OC1_SetConfig+0x130>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d10c      	bne.n	8002fee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f023 0308 	bic.w	r3, r3, #8
 8002fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f023 0304 	bic.w	r3, r3, #4
 8002fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8003068 <TIM_OC1_SetConfig+0x11c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <TIM_OC1_SetConfig+0xd2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800306c <TIM_OC1_SetConfig+0x120>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00f      	beq.n	800301e <TIM_OC1_SetConfig+0xd2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a1b      	ldr	r2, [pc, #108]	@ (8003070 <TIM_OC1_SetConfig+0x124>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00b      	beq.n	800301e <TIM_OC1_SetConfig+0xd2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a1a      	ldr	r2, [pc, #104]	@ (8003074 <TIM_OC1_SetConfig+0x128>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <TIM_OC1_SetConfig+0xd2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a19      	ldr	r2, [pc, #100]	@ (8003078 <TIM_OC1_SetConfig+0x12c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d003      	beq.n	800301e <TIM_OC1_SetConfig+0xd2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a18      	ldr	r2, [pc, #96]	@ (800307c <TIM_OC1_SetConfig+0x130>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d111      	bne.n	8003042 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800302c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	621a      	str	r2, [r3, #32]
}
 800305c:	bf00      	nop
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	40012c00 	.word	0x40012c00
 800306c:	40013400 	.word	0x40013400
 8003070:	40014000 	.word	0x40014000
 8003074:	40014400 	.word	0x40014400
 8003078:	40014800 	.word	0x40014800
 800307c:	40015000 	.word	0x40015000

08003080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f023 0210 	bic.w	r2, r3, #16
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f023 0320 	bic.w	r3, r3, #32
 80030ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a2c      	ldr	r2, [pc, #176]	@ (8003190 <TIM_OC2_SetConfig+0x110>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d007      	beq.n	80030f4 <TIM_OC2_SetConfig+0x74>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003194 <TIM_OC2_SetConfig+0x114>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_OC2_SetConfig+0x74>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003198 <TIM_OC2_SetConfig+0x118>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d10d      	bne.n	8003110 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800310e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a1f      	ldr	r2, [pc, #124]	@ (8003190 <TIM_OC2_SetConfig+0x110>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d013      	beq.n	8003140 <TIM_OC2_SetConfig+0xc0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a1e      	ldr	r2, [pc, #120]	@ (8003194 <TIM_OC2_SetConfig+0x114>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00f      	beq.n	8003140 <TIM_OC2_SetConfig+0xc0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a1e      	ldr	r2, [pc, #120]	@ (800319c <TIM_OC2_SetConfig+0x11c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00b      	beq.n	8003140 <TIM_OC2_SetConfig+0xc0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a1d      	ldr	r2, [pc, #116]	@ (80031a0 <TIM_OC2_SetConfig+0x120>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d007      	beq.n	8003140 <TIM_OC2_SetConfig+0xc0>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a1c      	ldr	r2, [pc, #112]	@ (80031a4 <TIM_OC2_SetConfig+0x124>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d003      	beq.n	8003140 <TIM_OC2_SetConfig+0xc0>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a17      	ldr	r2, [pc, #92]	@ (8003198 <TIM_OC2_SetConfig+0x118>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d113      	bne.n	8003168 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003146:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800314e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	621a      	str	r2, [r3, #32]
}
 8003182:	bf00      	nop
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40012c00 	.word	0x40012c00
 8003194:	40013400 	.word	0x40013400
 8003198:	40015000 	.word	0x40015000
 800319c:	40014000 	.word	0x40014000
 80031a0:	40014400 	.word	0x40014400
 80031a4:	40014800 	.word	0x40014800

080031a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0303 	bic.w	r3, r3, #3
 80031e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a2b      	ldr	r2, [pc, #172]	@ (80032b4 <TIM_OC3_SetConfig+0x10c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d007      	beq.n	800321a <TIM_OC3_SetConfig+0x72>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a2a      	ldr	r2, [pc, #168]	@ (80032b8 <TIM_OC3_SetConfig+0x110>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d003      	beq.n	800321a <TIM_OC3_SetConfig+0x72>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a29      	ldr	r2, [pc, #164]	@ (80032bc <TIM_OC3_SetConfig+0x114>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d10d      	bne.n	8003236 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003234:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a1e      	ldr	r2, [pc, #120]	@ (80032b4 <TIM_OC3_SetConfig+0x10c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <TIM_OC3_SetConfig+0xbe>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a1d      	ldr	r2, [pc, #116]	@ (80032b8 <TIM_OC3_SetConfig+0x110>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00f      	beq.n	8003266 <TIM_OC3_SetConfig+0xbe>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a1d      	ldr	r2, [pc, #116]	@ (80032c0 <TIM_OC3_SetConfig+0x118>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d00b      	beq.n	8003266 <TIM_OC3_SetConfig+0xbe>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a1c      	ldr	r2, [pc, #112]	@ (80032c4 <TIM_OC3_SetConfig+0x11c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d007      	beq.n	8003266 <TIM_OC3_SetConfig+0xbe>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a1b      	ldr	r2, [pc, #108]	@ (80032c8 <TIM_OC3_SetConfig+0x120>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d003      	beq.n	8003266 <TIM_OC3_SetConfig+0xbe>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a16      	ldr	r2, [pc, #88]	@ (80032bc <TIM_OC3_SetConfig+0x114>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d113      	bne.n	800328e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800326c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	621a      	str	r2, [r3, #32]
}
 80032a8:	bf00      	nop
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40013400 	.word	0x40013400
 80032bc:	40015000 	.word	0x40015000
 80032c0:	40014000 	.word	0x40014000
 80032c4:	40014400 	.word	0x40014400
 80032c8:	40014800 	.word	0x40014800

080032cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800331a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	031b      	lsls	r3, r3, #12
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a1a      	ldr	r2, [pc, #104]	@ (8003394 <TIM_OC4_SetConfig+0xc8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d013      	beq.n	8003358 <TIM_OC4_SetConfig+0x8c>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a19      	ldr	r2, [pc, #100]	@ (8003398 <TIM_OC4_SetConfig+0xcc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00f      	beq.n	8003358 <TIM_OC4_SetConfig+0x8c>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a18      	ldr	r2, [pc, #96]	@ (800339c <TIM_OC4_SetConfig+0xd0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00b      	beq.n	8003358 <TIM_OC4_SetConfig+0x8c>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a17      	ldr	r2, [pc, #92]	@ (80033a0 <TIM_OC4_SetConfig+0xd4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d007      	beq.n	8003358 <TIM_OC4_SetConfig+0x8c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a16      	ldr	r2, [pc, #88]	@ (80033a4 <TIM_OC4_SetConfig+0xd8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <TIM_OC4_SetConfig+0x8c>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a15      	ldr	r2, [pc, #84]	@ (80033a8 <TIM_OC4_SetConfig+0xdc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d109      	bne.n	800336c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800335e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	019b      	lsls	r3, r3, #6
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	621a      	str	r2, [r3, #32]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40012c00 	.word	0x40012c00
 8003398:	40013400 	.word	0x40013400
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800
 80033a8:	40015000 	.word	0x40015000

080033ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80033f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	041b      	lsls	r3, r3, #16
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a19      	ldr	r2, [pc, #100]	@ (8003468 <TIM_OC5_SetConfig+0xbc>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <TIM_OC5_SetConfig+0x82>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a18      	ldr	r2, [pc, #96]	@ (800346c <TIM_OC5_SetConfig+0xc0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00f      	beq.n	800342e <TIM_OC5_SetConfig+0x82>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a17      	ldr	r2, [pc, #92]	@ (8003470 <TIM_OC5_SetConfig+0xc4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00b      	beq.n	800342e <TIM_OC5_SetConfig+0x82>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a16      	ldr	r2, [pc, #88]	@ (8003474 <TIM_OC5_SetConfig+0xc8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d007      	beq.n	800342e <TIM_OC5_SetConfig+0x82>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a15      	ldr	r2, [pc, #84]	@ (8003478 <TIM_OC5_SetConfig+0xcc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d003      	beq.n	800342e <TIM_OC5_SetConfig+0x82>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a14      	ldr	r2, [pc, #80]	@ (800347c <TIM_OC5_SetConfig+0xd0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d109      	bne.n	8003442 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003434:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	621a      	str	r2, [r3, #32]
}
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	40012c00 	.word	0x40012c00
 800346c:	40013400 	.word	0x40013400
 8003470:	40014000 	.word	0x40014000
 8003474:	40014400 	.word	0x40014400
 8003478:	40014800 	.word	0x40014800
 800347c:	40015000 	.word	0x40015000

08003480 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80034c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	051b      	lsls	r3, r3, #20
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003540 <TIM_OC6_SetConfig+0xc0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d013      	beq.n	8003504 <TIM_OC6_SetConfig+0x84>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a19      	ldr	r2, [pc, #100]	@ (8003544 <TIM_OC6_SetConfig+0xc4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00f      	beq.n	8003504 <TIM_OC6_SetConfig+0x84>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a18      	ldr	r2, [pc, #96]	@ (8003548 <TIM_OC6_SetConfig+0xc8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00b      	beq.n	8003504 <TIM_OC6_SetConfig+0x84>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a17      	ldr	r2, [pc, #92]	@ (800354c <TIM_OC6_SetConfig+0xcc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d007      	beq.n	8003504 <TIM_OC6_SetConfig+0x84>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a16      	ldr	r2, [pc, #88]	@ (8003550 <TIM_OC6_SetConfig+0xd0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <TIM_OC6_SetConfig+0x84>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a15      	ldr	r2, [pc, #84]	@ (8003554 <TIM_OC6_SetConfig+0xd4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d109      	bne.n	8003518 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800350a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	029b      	lsls	r3, r3, #10
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	621a      	str	r2, [r3, #32]
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40013400 	.word	0x40013400
 8003548:	40014000 	.word	0x40014000
 800354c:	40014400 	.word	0x40014400
 8003550:	40014800 	.word	0x40014800
 8003554:	40015000 	.word	0x40015000

08003558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f023 0201 	bic.w	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f023 030a 	bic.w	r3, r3, #10
 8003594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b087      	sub	sp, #28
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f023 0210 	bic.w	r2, r3, #16
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	031b      	lsls	r3, r3, #12
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	621a      	str	r2, [r3, #32]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800362c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	f043 0307 	orr.w	r3, r3, #7
 8003638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	609a      	str	r2, [r3, #8]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	021a      	lsls	r2, r3, #8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	431a      	orrs	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4313      	orrs	r3, r2
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	609a      	str	r2, [r3, #8]
}
 8003680:	bf00      	nop
 8003682:	371c      	adds	r7, #28
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	2201      	movs	r2, #1
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a1a      	ldr	r2, [r3, #32]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	401a      	ands	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a1a      	ldr	r2, [r3, #32]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	fa01 f303 	lsl.w	r3, r1, r3
 80036c4:	431a      	orrs	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	621a      	str	r2, [r3, #32]
}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e06d      	b.n	80037cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a30      	ldr	r2, [pc, #192]	@ (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d009      	beq.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a2f      	ldr	r2, [pc, #188]	@ (80037dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d004      	beq.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2d      	ldr	r2, [pc, #180]	@ (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d108      	bne.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003734:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1e      	ldr	r2, [pc, #120]	@ (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d01d      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376c:	d018      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1c      	ldr	r2, [pc, #112]	@ (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d013      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1a      	ldr	r2, [pc, #104]	@ (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00e      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a15      	ldr	r2, [pc, #84]	@ (80037dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d009      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a16      	ldr	r2, [pc, #88]	@ (80037ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a11      	ldr	r2, [pc, #68]	@ (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d10c      	bne.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40013400 	.word	0x40013400
 80037e0:	40015000 	.word	0x40015000
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800
 80037ec:	40014000 	.word	0x40014000

080037f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <memset>:
 800382c:	4402      	add	r2, r0
 800382e:	4603      	mov	r3, r0
 8003830:	4293      	cmp	r3, r2
 8003832:	d100      	bne.n	8003836 <memset+0xa>
 8003834:	4770      	bx	lr
 8003836:	f803 1b01 	strb.w	r1, [r3], #1
 800383a:	e7f9      	b.n	8003830 <memset+0x4>

0800383c <__libc_init_array>:
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	4d0d      	ldr	r5, [pc, #52]	@ (8003874 <__libc_init_array+0x38>)
 8003840:	4c0d      	ldr	r4, [pc, #52]	@ (8003878 <__libc_init_array+0x3c>)
 8003842:	1b64      	subs	r4, r4, r5
 8003844:	10a4      	asrs	r4, r4, #2
 8003846:	2600      	movs	r6, #0
 8003848:	42a6      	cmp	r6, r4
 800384a:	d109      	bne.n	8003860 <__libc_init_array+0x24>
 800384c:	4d0b      	ldr	r5, [pc, #44]	@ (800387c <__libc_init_array+0x40>)
 800384e:	4c0c      	ldr	r4, [pc, #48]	@ (8003880 <__libc_init_array+0x44>)
 8003850:	f000 f818 	bl	8003884 <_init>
 8003854:	1b64      	subs	r4, r4, r5
 8003856:	10a4      	asrs	r4, r4, #2
 8003858:	2600      	movs	r6, #0
 800385a:	42a6      	cmp	r6, r4
 800385c:	d105      	bne.n	800386a <__libc_init_array+0x2e>
 800385e:	bd70      	pop	{r4, r5, r6, pc}
 8003860:	f855 3b04 	ldr.w	r3, [r5], #4
 8003864:	4798      	blx	r3
 8003866:	3601      	adds	r6, #1
 8003868:	e7ee      	b.n	8003848 <__libc_init_array+0xc>
 800386a:	f855 3b04 	ldr.w	r3, [r5], #4
 800386e:	4798      	blx	r3
 8003870:	3601      	adds	r6, #1
 8003872:	e7f2      	b.n	800385a <__libc_init_array+0x1e>
 8003874:	080038cc 	.word	0x080038cc
 8003878:	080038cc 	.word	0x080038cc
 800387c:	080038cc 	.word	0x080038cc
 8003880:	080038d0 	.word	0x080038d0

08003884 <_init>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	bf00      	nop
 8003888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388a:	bc08      	pop	{r3}
 800388c:	469e      	mov	lr, r3
 800388e:	4770      	bx	lr

08003890 <_fini>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	bf00      	nop
 8003894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003896:	bc08      	pop	{r3}
 8003898:	469e      	mov	lr, r3
 800389a:	4770      	bx	lr
