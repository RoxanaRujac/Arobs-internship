
pwm signal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b68  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003cfc  08003cfc  00004cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d34  08003d34  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003d34  08003d34  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003d34  08003d34  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d34  08003d34  00004d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d38  08003d38  00004d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d3c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000f4  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d452  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a0c  00000000  00000000  0001248e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  00013ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095a  00000000  00000000  00014a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fcf4  00000000  00000000  000153da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef85  00000000  00000000  000350ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c655d  00000000  00000000  00044053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a5b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003220  00000000  00000000  0010a5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0010d814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003ce4 	.word	0x08003ce4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003ce4 	.word	0x08003ce4

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fa8b 	bl	80006f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f81b 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f90b 	bl	80003fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e6:	f000 f8d9 	bl	800039c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80001ea:	f000 f877 	bl	80002dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  uint16_t duty_cycle = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	80fb      	strh	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 80001f2:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <main+0x40>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	88fa      	ldrh	r2, [r7, #6]
 80001f8:	635a      	str	r2, [r3, #52]	@ 0x34
	  duty_cycle += 50;
 80001fa:	88fb      	ldrh	r3, [r7, #6]
 80001fc:	3332      	adds	r3, #50	@ 0x32
 80001fe:	80fb      	strh	r3, [r7, #6]

	  if (duty_cycle == 8000){
 8000200:	88fb      	ldrh	r3, [r7, #6]
 8000202:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8000206:	d101      	bne.n	800020c <main+0x38>
		  duty_cycle = 0;
 8000208:	2300      	movs	r3, #0
 800020a:	80fb      	strh	r3, [r7, #6]
	  }
	   HAL_Delay(10);
 800020c:	200a      	movs	r0, #10
 800020e:	f000 fad7 	bl	80007c0 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 8000212:	e7ee      	b.n	80001f2 <main+0x1e>
 8000214:	20000028 	.word	0x20000028

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b0a6      	sub	sp, #152	@ 0x98
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000222:	2228      	movs	r2, #40	@ 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f003 fd2f 	bl	8003c8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2258      	movs	r2, #88	@ 0x58
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f003 fd21 	bl	8003c8a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000248:	2302      	movs	r3, #2
 800024a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	2301      	movs	r3, #1
 800024e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000250:	2310      	movs	r3, #16
 8000252:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800025c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000260:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000264:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000268:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000272:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000276:	4618      	mov	r0, r3
 8000278:	f000 fd36 	bl	8000ce8 <HAL_RCC_OscConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000282:	f000 f90d 	bl	80004a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000286:	230f      	movs	r3, #15
 8000288:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028a:	2302      	movs	r3, #2
 800028c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000296:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002a0:	2102      	movs	r1, #2
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 fd44 	bl	8001d30 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ae:	f000 f8f7 	bl	80004a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2;
 80002b2:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <SystemClock_Config+0xc0>)
 80002b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80002ba:	2300      	movs	r3, #0
 80002bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 ff47 	bl	8002154 <HAL_RCCEx_PeriphCLKConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80002cc:	f000 f8e8 	bl	80004a0 <Error_Handler>
  }
}
 80002d0:	bf00      	nop
 80002d2:	3798      	adds	r7, #152	@ 0x98
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	00100002 	.word	0x00100002

080002dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08a      	sub	sp, #40	@ 0x28
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e2:	f107 031c 	add.w	r3, r7, #28
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ee:	463b      	mov	r3, r7
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
 80002fc:	615a      	str	r2, [r3, #20]
 80002fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000300:	4b25      	ldr	r3, [pc, #148]	@ (8000398 <MX_TIM2_Init+0xbc>)
 8000302:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000308:	4b23      	ldr	r3, [pc, #140]	@ (8000398 <MX_TIM2_Init+0xbc>)
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800030e:	4b22      	ldr	r3, [pc, #136]	@ (8000398 <MX_TIM2_Init+0xbc>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 8000314:	4b20      	ldr	r3, [pc, #128]	@ (8000398 <MX_TIM2_Init+0xbc>)
 8000316:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800031a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800031c:	4b1e      	ldr	r3, [pc, #120]	@ (8000398 <MX_TIM2_Init+0xbc>)
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000322:	4b1d      	ldr	r3, [pc, #116]	@ (8000398 <MX_TIM2_Init+0xbc>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000328:	481b      	ldr	r0, [pc, #108]	@ (8000398 <MX_TIM2_Init+0xbc>)
 800032a:	f002 f997 	bl	800265c <HAL_TIM_PWM_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000334:	f000 f8b4 	bl	80004a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000338:	2300      	movs	r3, #0
 800033a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800033c:	2300      	movs	r3, #0
 800033e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000340:	f107 031c 	add.w	r3, r7, #28
 8000344:	4619      	mov	r1, r3
 8000346:	4814      	ldr	r0, [pc, #80]	@ (8000398 <MX_TIM2_Init+0xbc>)
 8000348:	f002 ffd6 	bl	80032f8 <HAL_TIMEx_MasterConfigSynchronization>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000352:	f000 f8a5 	bl	80004a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000356:	2360      	movs	r3, #96	@ 0x60
 8000358:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000366:	463b      	mov	r3, r7
 8000368:	2200      	movs	r2, #0
 800036a:	4619      	mov	r1, r3
 800036c:	480a      	ldr	r0, [pc, #40]	@ (8000398 <MX_TIM2_Init+0xbc>)
 800036e:	f002 fad9 	bl	8002924 <HAL_TIM_PWM_ConfigChannel>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000378:	f000 f892 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  HAL_TIM_Base_Start(&htim2);
 800037c:	4806      	ldr	r0, [pc, #24]	@ (8000398 <MX_TIM2_Init+0xbc>)
 800037e:	f002 f905 	bl	800258c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000382:	2100      	movs	r1, #0
 8000384:	4804      	ldr	r0, [pc, #16]	@ (8000398 <MX_TIM2_Init+0xbc>)
 8000386:	f002 f9c1 	bl	800270c <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800038a:	4803      	ldr	r0, [pc, #12]	@ (8000398 <MX_TIM2_Init+0xbc>)
 800038c:	f000 f8d0 	bl	8000530 <HAL_TIM_MspPostInit>

}
 8000390:	bf00      	nop
 8000392:	3728      	adds	r7, #40	@ 0x28
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000028 	.word	0x20000028

0800039c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a0:	4b14      	ldr	r3, [pc, #80]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003a2:	4a15      	ldr	r2, [pc, #84]	@ (80003f8 <MX_USART2_UART_Init+0x5c>)
 80003a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003a6:	4b13      	ldr	r3, [pc, #76]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003a8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80003ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003c2:	220c      	movs	r2, #12
 80003c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003cc:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003de:	4805      	ldr	r0, [pc, #20]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003e0:	f003 f816 	bl	8003410 <HAL_UART_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003ea:	f000 f859 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000074 	.word	0x20000074
 80003f8:	40004400 	.word	0x40004400

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08a      	sub	sp, #40	@ 0x28
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	f107 0314 	add.w	r3, r7, #20
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
 8000410:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000412:	4b21      	ldr	r3, [pc, #132]	@ (8000498 <MX_GPIO_Init+0x9c>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a20      	ldr	r2, [pc, #128]	@ (8000498 <MX_GPIO_Init+0x9c>)
 8000418:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800041c:	6153      	str	r3, [r2, #20]
 800041e:	4b1e      	ldr	r3, [pc, #120]	@ (8000498 <MX_GPIO_Init+0x9c>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000426:	613b      	str	r3, [r7, #16]
 8000428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800042a:	4b1b      	ldr	r3, [pc, #108]	@ (8000498 <MX_GPIO_Init+0x9c>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a1a      	ldr	r2, [pc, #104]	@ (8000498 <MX_GPIO_Init+0x9c>)
 8000430:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000434:	6153      	str	r3, [r2, #20]
 8000436:	4b18      	ldr	r3, [pc, #96]	@ (8000498 <MX_GPIO_Init+0x9c>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	4b15      	ldr	r3, [pc, #84]	@ (8000498 <MX_GPIO_Init+0x9c>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a14      	ldr	r2, [pc, #80]	@ (8000498 <MX_GPIO_Init+0x9c>)
 8000448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b12      	ldr	r3, [pc, #72]	@ (8000498 <MX_GPIO_Init+0x9c>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045a:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <MX_GPIO_Init+0x9c>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a0e      	ldr	r2, [pc, #56]	@ (8000498 <MX_GPIO_Init+0x9c>)
 8000460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <MX_GPIO_Init+0x9c>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000472:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000478:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000482:	f107 0314 	add.w	r3, r7, #20
 8000486:	4619      	mov	r1, r3
 8000488:	4804      	ldr	r0, [pc, #16]	@ (800049c <MX_GPIO_Init+0xa0>)
 800048a:	f000 faa3 	bl	80009d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800048e:	bf00      	nop
 8000490:	3728      	adds	r7, #40	@ 0x28
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	48000800 	.word	0x48000800

080004a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a4:	b672      	cpsid	i
}
 80004a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a8:	bf00      	nop
 80004aa:	e7fd      	b.n	80004a8 <Error_Handler+0x8>

080004ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b2:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <HAL_MspInit+0x44>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a0e      	ldr	r2, [pc, #56]	@ (80004f0 <HAL_MspInit+0x44>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6193      	str	r3, [r2, #24]
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <HAL_MspInit+0x44>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <HAL_MspInit+0x44>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a08      	ldr	r2, [pc, #32]	@ (80004f0 <HAL_MspInit+0x44>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <HAL_MspInit+0x44>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004e2:	2007      	movs	r0, #7
 80004e4:	f000 fa42 	bl	800096c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40021000 	.word	0x40021000

080004f4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000504:	d10b      	bne.n	800051e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000506:	4b09      	ldr	r3, [pc, #36]	@ (800052c <HAL_TIM_PWM_MspInit+0x38>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a08      	ldr	r2, [pc, #32]	@ (800052c <HAL_TIM_PWM_MspInit+0x38>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <HAL_TIM_PWM_MspInit+0x38>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000550:	d11c      	bne.n	800058c <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <HAL_TIM_MspPostInit+0x64>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a0f      	ldr	r2, [pc, #60]	@ (8000594 <HAL_TIM_MspPostInit+0x64>)
 8000558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <HAL_TIM_MspPostInit+0x64>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800056a:	2320      	movs	r3, #32
 800056c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056e:	2302      	movs	r3, #2
 8000570:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800057a:	2301      	movs	r3, #1
 800057c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	4619      	mov	r1, r3
 8000584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000588:	f000 fa24 	bl	80009d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	@ 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a17      	ldr	r2, [pc, #92]	@ (8000614 <HAL_UART_MspInit+0x7c>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d128      	bne.n	800060c <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ba:	4b17      	ldr	r3, [pc, #92]	@ (8000618 <HAL_UART_MspInit+0x80>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	4a16      	ldr	r2, [pc, #88]	@ (8000618 <HAL_UART_MspInit+0x80>)
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005c4:	61d3      	str	r3, [r2, #28]
 80005c6:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <HAL_UART_MspInit+0x80>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <HAL_UART_MspInit+0x80>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a10      	ldr	r2, [pc, #64]	@ (8000618 <HAL_UART_MspInit+0x80>)
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <HAL_UART_MspInit+0x80>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005ea:	230c      	movs	r3, #12
 80005ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ee:	2302      	movs	r3, #2
 80005f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005fa:	2307      	movs	r3, #7
 80005fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000608:	f000 f9e4 	bl	80009d4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800060c:	bf00      	nop
 800060e:	3728      	adds	r7, #40	@ 0x28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40004400 	.word	0x40004400
 8000618:	40021000 	.word	0x40021000

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <NMI_Handler+0x4>

08000624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <MemManage_Handler+0x4>

08000634 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <UsageFault_Handler+0x4>

08000644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000672:	f000 f885 	bl	8000780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <SystemInit+0x20>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000686:	4a05      	ldr	r2, [pc, #20]	@ (800069c <SystemInit+0x20>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006d8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a4:	f7ff ffea 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	@ (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	@ (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	@ (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	@ (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ce:	f003 fae5 	bl	8003c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006d2:	f7ff fd7f 	bl	80001d4 <main>

080006d6 <LoopForever>:

LoopForever:
    b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e4:	08003d3c 	.word	0x08003d3c
  ldr r2, =_sbss
 80006e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006ec:	20000100 	.word	0x20000100

080006f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_2_IRQHandler>
	...

080006f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f8:	4b08      	ldr	r3, [pc, #32]	@ (800071c <HAL_Init+0x28>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <HAL_Init+0x28>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000704:	2003      	movs	r0, #3
 8000706:	f000 f931 	bl	800096c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 f808 	bl	8000720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000710:	f7ff fecc 	bl	80004ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40022000 	.word	0x40022000

08000720 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <HAL_InitTick+0x54>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <HAL_InitTick+0x58>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000736:	fbb3 f3f1 	udiv	r3, r3, r1
 800073a:	fbb2 f3f3 	udiv	r3, r2, r3
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f93b 	bl	80009ba <HAL_SYSTICK_Config>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	e00e      	b.n	800076c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b0f      	cmp	r3, #15
 8000752:	d80a      	bhi.n	800076a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000754:	2200      	movs	r2, #0
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	f04f 30ff 	mov.w	r0, #4294967295
 800075c:	f000 f911 	bl	8000982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000760:	4a06      	ldr	r2, [pc, #24]	@ (800077c <HAL_InitTick+0x5c>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	e000      	b.n	800076c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000000 	.word	0x20000000
 8000778:	20000008 	.word	0x20000008
 800077c:	20000004 	.word	0x20000004

08000780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <HAL_IncTick+0x20>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <HAL_IncTick+0x24>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	4a04      	ldr	r2, [pc, #16]	@ (80007a4 <HAL_IncTick+0x24>)
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000008 	.word	0x20000008
 80007a4:	200000fc 	.word	0x200000fc

080007a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80007ac:	4b03      	ldr	r3, [pc, #12]	@ (80007bc <HAL_GetTick+0x14>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	200000fc 	.word	0x200000fc

080007c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c8:	f7ff ffee 	bl	80007a8 <HAL_GetTick>
 80007cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d8:	d005      	beq.n	80007e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007da:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <HAL_Delay+0x44>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	461a      	mov	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4413      	add	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007e6:	bf00      	nop
 80007e8:	f7ff ffde 	bl	80007a8 <HAL_GetTick>
 80007ec:	4602      	mov	r2, r0
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d8f7      	bhi.n	80007e8 <HAL_Delay+0x28>
  {
  }
}
 80007f8:	bf00      	nop
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000008 	.word	0x20000008

08000808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000824:	4013      	ands	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083a:	4a04      	ldr	r2, [pc, #16]	@ (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	60d3      	str	r3, [r2, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000854:	4b04      	ldr	r3, [pc, #16]	@ (8000868 <__NVIC_GetPriorityGrouping+0x18>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	f003 0307 	and.w	r3, r3, #7
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	db0a      	blt.n	8000896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	490c      	ldr	r1, [pc, #48]	@ (80008b8 <__NVIC_SetPriority+0x4c>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	0112      	lsls	r2, r2, #4
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	440b      	add	r3, r1
 8000890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000894:	e00a      	b.n	80008ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4908      	ldr	r1, [pc, #32]	@ (80008bc <__NVIC_SetPriority+0x50>)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	f003 030f 	and.w	r3, r3, #15
 80008a2:	3b04      	subs	r3, #4
 80008a4:	0112      	lsls	r2, r2, #4
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	761a      	strb	r2, [r3, #24]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000e100 	.word	0xe000e100
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	@ 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f1c3 0307 	rsb	r3, r3, #7
 80008da:	2b04      	cmp	r3, #4
 80008dc:	bf28      	it	cs
 80008de:	2304      	movcs	r3, #4
 80008e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3304      	adds	r3, #4
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d902      	bls.n	80008f0 <NVIC_EncodePriority+0x30>
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3b03      	subs	r3, #3
 80008ee:	e000      	b.n	80008f2 <NVIC_EncodePriority+0x32>
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43da      	mvns	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	401a      	ands	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000908:	f04f 31ff 	mov.w	r1, #4294967295
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	43d9      	mvns	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	4313      	orrs	r3, r2
         );
}
 800091a:	4618      	mov	r0, r3
 800091c:	3724      	adds	r7, #36	@ 0x24
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000938:	d301      	bcc.n	800093e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093a:	2301      	movs	r3, #1
 800093c:	e00f      	b.n	800095e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093e:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <SysTick_Config+0x40>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000946:	210f      	movs	r1, #15
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f7ff ff8e 	bl	800086c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <SysTick_Config+0x40>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000956:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <SysTick_Config+0x40>)
 8000958:	2207      	movs	r2, #7
 800095a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	e000e010 	.word	0xe000e010

0800096c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ff47 	bl	8000808 <__NVIC_SetPriorityGrouping>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000994:	f7ff ff5c 	bl	8000850 <__NVIC_GetPriorityGrouping>
 8000998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	6978      	ldr	r0, [r7, #20]
 80009a0:	f7ff ff8e 	bl	80008c0 <NVIC_EncodePriority>
 80009a4:	4602      	mov	r2, r0
 80009a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff5d 	bl	800086c <__NVIC_SetPriority>
}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ffb0 	bl	8000928 <SysTick_Config>
 80009c8:	4603      	mov	r3, r0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009e2:	e160      	b.n	8000ca6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	2101      	movs	r1, #1
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	fa01 f303 	lsl.w	r3, r1, r3
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f000 8152 	beq.w	8000ca0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 0303 	and.w	r3, r3, #3
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d005      	beq.n	8000a14 <HAL_GPIO_Init+0x40>
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d130      	bne.n	8000a76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	2203      	movs	r2, #3
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68da      	ldr	r2, [r3, #12]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	091b      	lsrs	r3, r3, #4
 8000a60:	f003 0201 	and.w	r2, r3, #1
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f003 0303 	and.w	r3, r3, #3
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d017      	beq.n	8000ab2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 0303 	and.w	r3, r3, #3
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d123      	bne.n	8000b06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	08da      	lsrs	r2, r3, #3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3208      	adds	r2, #8
 8000ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	220f      	movs	r2, #15
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	691a      	ldr	r2, [r3, #16]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	f003 0307 	and.w	r3, r3, #7
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	08da      	lsrs	r2, r3, #3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3208      	adds	r2, #8
 8000b00:	6939      	ldr	r1, [r7, #16]
 8000b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	2203      	movs	r2, #3
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 0203 	and.w	r2, r3, #3
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 80ac 	beq.w	8000ca0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b48:	4b5e      	ldr	r3, [pc, #376]	@ (8000cc4 <HAL_GPIO_Init+0x2f0>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a5d      	ldr	r2, [pc, #372]	@ (8000cc4 <HAL_GPIO_Init+0x2f0>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b5b      	ldr	r3, [pc, #364]	@ (8000cc4 <HAL_GPIO_Init+0x2f0>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b60:	4a59      	ldr	r2, [pc, #356]	@ (8000cc8 <HAL_GPIO_Init+0x2f4>)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	089b      	lsrs	r3, r3, #2
 8000b66:	3302      	adds	r3, #2
 8000b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	220f      	movs	r2, #15
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b8a:	d025      	beq.n	8000bd8 <HAL_GPIO_Init+0x204>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a4f      	ldr	r2, [pc, #316]	@ (8000ccc <HAL_GPIO_Init+0x2f8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d01f      	beq.n	8000bd4 <HAL_GPIO_Init+0x200>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a4e      	ldr	r2, [pc, #312]	@ (8000cd0 <HAL_GPIO_Init+0x2fc>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d019      	beq.n	8000bd0 <HAL_GPIO_Init+0x1fc>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a4d      	ldr	r2, [pc, #308]	@ (8000cd4 <HAL_GPIO_Init+0x300>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d013      	beq.n	8000bcc <HAL_GPIO_Init+0x1f8>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a4c      	ldr	r2, [pc, #304]	@ (8000cd8 <HAL_GPIO_Init+0x304>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d00d      	beq.n	8000bc8 <HAL_GPIO_Init+0x1f4>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a4b      	ldr	r2, [pc, #300]	@ (8000cdc <HAL_GPIO_Init+0x308>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d007      	beq.n	8000bc4 <HAL_GPIO_Init+0x1f0>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a4a      	ldr	r2, [pc, #296]	@ (8000ce0 <HAL_GPIO_Init+0x30c>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d101      	bne.n	8000bc0 <HAL_GPIO_Init+0x1ec>
 8000bbc:	2306      	movs	r3, #6
 8000bbe:	e00c      	b.n	8000bda <HAL_GPIO_Init+0x206>
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	e00a      	b.n	8000bda <HAL_GPIO_Init+0x206>
 8000bc4:	2305      	movs	r3, #5
 8000bc6:	e008      	b.n	8000bda <HAL_GPIO_Init+0x206>
 8000bc8:	2304      	movs	r3, #4
 8000bca:	e006      	b.n	8000bda <HAL_GPIO_Init+0x206>
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e004      	b.n	8000bda <HAL_GPIO_Init+0x206>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	e002      	b.n	8000bda <HAL_GPIO_Init+0x206>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e000      	b.n	8000bda <HAL_GPIO_Init+0x206>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	f002 0203 	and.w	r2, r2, #3
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	4093      	lsls	r3, r2
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bea:	4937      	ldr	r1, [pc, #220]	@ (8000cc8 <HAL_GPIO_Init+0x2f4>)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bf8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce4 <HAL_GPIO_Init+0x310>)
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c1c:	4a31      	ldr	r2, [pc, #196]	@ (8000ce4 <HAL_GPIO_Init+0x310>)
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c22:	4b30      	ldr	r3, [pc, #192]	@ (8000ce4 <HAL_GPIO_Init+0x310>)
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c46:	4a27      	ldr	r2, [pc, #156]	@ (8000ce4 <HAL_GPIO_Init+0x310>)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ce4 <HAL_GPIO_Init+0x310>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c70:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce4 <HAL_GPIO_Init+0x310>)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <HAL_GPIO_Init+0x310>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ce4 <HAL_GPIO_Init+0x310>)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f47f ae97 	bne.w	80009e4 <HAL_GPIO_Init+0x10>
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	bf00      	nop
 8000cba:	371c      	adds	r7, #28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	48000400 	.word	0x48000400
 8000cd0:	48000800 	.word	0x48000800
 8000cd4:	48000c00 	.word	0x48000c00
 8000cd8:	48001000 	.word	0x48001000
 8000cdc:	48001400 	.word	0x48001400
 8000ce0:	48001800 	.word	0x48001800
 8000ce4:	40010400 	.word	0x40010400

08000ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cf4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000cf8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cfe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	f001 b80a 	b.w	8001d22 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 8161 	beq.w	8000fe6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d24:	4bae      	ldr	r3, [pc, #696]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 030c 	and.w	r3, r3, #12
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	d00c      	beq.n	8000d4a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d30:	4bab      	ldr	r3, [pc, #684]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 030c 	and.w	r3, r3, #12
 8000d38:	2b08      	cmp	r3, #8
 8000d3a:	d157      	bne.n	8000dec <HAL_RCC_OscConfig+0x104>
 8000d3c:	4ba8      	ldr	r3, [pc, #672]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d48:	d150      	bne.n	8000dec <HAL_RCC_OscConfig+0x104>
 8000d4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d4e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000d56:	fa93 f3a3 	rbit	r3, r3
 8000d5a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d62:	fab3 f383 	clz	r3, r3
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d6a:	d802      	bhi.n	8000d72 <HAL_RCC_OscConfig+0x8a>
 8000d6c:	4b9c      	ldr	r3, [pc, #624]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	e015      	b.n	8000d9e <HAL_RCC_OscConfig+0xb6>
 8000d72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d76:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000d7e:	fa93 f3a3 	rbit	r3, r3
 8000d82:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000d86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d8a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000d8e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000d92:	fa93 f3a3 	rbit	r3, r3
 8000d96:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000d9a:	4b91      	ldr	r3, [pc, #580]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000da2:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000da6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000daa:	fa92 f2a2 	rbit	r2, r2
 8000dae:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000db2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000db6:	fab2 f282 	clz	r2, r2
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	f042 0220 	orr.w	r2, r2, #32
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	f002 021f 	and.w	r2, r2, #31
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dcc:	4013      	ands	r3, r2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 8108 	beq.w	8000fe4 <HAL_RCC_OscConfig+0x2fc>
 8000dd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dd8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f040 80ff 	bne.w	8000fe4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	f000 bf9b 	b.w	8001d22 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000df0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dfc:	d106      	bne.n	8000e0c <HAL_RCC_OscConfig+0x124>
 8000dfe:	4b78      	ldr	r3, [pc, #480]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a77      	ldr	r2, [pc, #476]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e036      	b.n	8000e7a <HAL_RCC_OscConfig+0x192>
 8000e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d10c      	bne.n	8000e36 <HAL_RCC_OscConfig+0x14e>
 8000e1c:	4b70      	ldr	r3, [pc, #448]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a6f      	ldr	r2, [pc, #444]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b6d      	ldr	r3, [pc, #436]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a6c      	ldr	r2, [pc, #432]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000e2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	e021      	b.n	8000e7a <HAL_RCC_OscConfig+0x192>
 8000e36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e46:	d10c      	bne.n	8000e62 <HAL_RCC_OscConfig+0x17a>
 8000e48:	4b65      	ldr	r3, [pc, #404]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a64      	ldr	r2, [pc, #400]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000e4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b62      	ldr	r3, [pc, #392]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a61      	ldr	r2, [pc, #388]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000e5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	e00b      	b.n	8000e7a <HAL_RCC_OscConfig+0x192>
 8000e62:	4b5f      	ldr	r3, [pc, #380]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a5e      	ldr	r2, [pc, #376]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a5b      	ldr	r2, [pc, #364]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000e74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e78:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d054      	beq.n	8000f34 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8a:	f7ff fc8d 	bl	80007a8 <HAL_GetTick>
 8000e8e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e92:	e00a      	b.n	8000eaa <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e94:	f7ff fc88 	bl	80007a8 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b64      	cmp	r3, #100	@ 0x64
 8000ea2:	d902      	bls.n	8000eaa <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	f000 bf3c 	b.w	8001d22 <HAL_RCC_OscConfig+0x103a>
 8000eaa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eae:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000eb6:	fa93 f3a3 	rbit	r3, r3
 8000eba:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000ebe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec2:	fab3 f383 	clz	r3, r3
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000eca:	d802      	bhi.n	8000ed2 <HAL_RCC_OscConfig+0x1ea>
 8000ecc:	4b44      	ldr	r3, [pc, #272]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	e015      	b.n	8000efe <HAL_RCC_OscConfig+0x216>
 8000ed2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ed6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000ede:	fa93 f3a3 	rbit	r3, r3
 8000ee2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000ee6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eea:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000eee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000ef2:	fa93 f3a3 	rbit	r3, r3
 8000ef6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000efa:	4b39      	ldr	r3, [pc, #228]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f02:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000f06:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000f0a:	fa92 f2a2 	rbit	r2, r2
 8000f0e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000f12:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f16:	fab2 f282 	clz	r2, r2
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	f042 0220 	orr.w	r2, r2, #32
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	f002 021f 	and.w	r2, r2, #31
 8000f26:	2101      	movs	r1, #1
 8000f28:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0b0      	beq.n	8000e94 <HAL_RCC_OscConfig+0x1ac>
 8000f32:	e058      	b.n	8000fe6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fc38 	bl	80007a8 <HAL_GetTick>
 8000f38:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fc33 	bl	80007a8 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	@ 0x64
 8000f4c:	d902      	bls.n	8000f54 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f000 bee7 	b.w	8001d22 <HAL_RCC_OscConfig+0x103a>
 8000f54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f58:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000f60:	fa93 f3a3 	rbit	r3, r3
 8000f64:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000f68:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f6c:	fab3 f383 	clz	r3, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f74:	d802      	bhi.n	8000f7c <HAL_RCC_OscConfig+0x294>
 8000f76:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	e015      	b.n	8000fa8 <HAL_RCC_OscConfig+0x2c0>
 8000f7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f80:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f84:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000f88:	fa93 f3a3 	rbit	r3, r3
 8000f8c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000f90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f94:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000f98:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000f9c:	fa93 f3a3 	rbit	r3, r3
 8000fa0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <HAL_RCC_OscConfig+0x2f8>)
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fac:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000fb0:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000fb4:	fa92 f2a2 	rbit	r2, r2
 8000fb8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000fbc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000fc0:	fab2 f282 	clz	r2, r2
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	f042 0220 	orr.w	r2, r2, #32
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	f002 021f 	and.w	r2, r2, #31
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1b0      	bne.n	8000f3e <HAL_RCC_OscConfig+0x256>
 8000fdc:	e003      	b.n	8000fe6 <HAL_RCC_OscConfig+0x2fe>
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fe6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 816d 	beq.w	80012d6 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ffc:	4bcd      	ldr	r3, [pc, #820]	@ (8001334 <HAL_RCC_OscConfig+0x64c>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 030c 	and.w	r3, r3, #12
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00c      	beq.n	8001022 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001008:	4bca      	ldr	r3, [pc, #808]	@ (8001334 <HAL_RCC_OscConfig+0x64c>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 030c 	and.w	r3, r3, #12
 8001010:	2b08      	cmp	r3, #8
 8001012:	d16e      	bne.n	80010f2 <HAL_RCC_OscConfig+0x40a>
 8001014:	4bc7      	ldr	r3, [pc, #796]	@ (8001334 <HAL_RCC_OscConfig+0x64c>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800101c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001020:	d167      	bne.n	80010f2 <HAL_RCC_OscConfig+0x40a>
 8001022:	2302      	movs	r3, #2
 8001024:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001028:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800102c:	fa93 f3a3 	rbit	r3, r3
 8001030:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001034:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001038:	fab3 f383 	clz	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001040:	d802      	bhi.n	8001048 <HAL_RCC_OscConfig+0x360>
 8001042:	4bbc      	ldr	r3, [pc, #752]	@ (8001334 <HAL_RCC_OscConfig+0x64c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	e013      	b.n	8001070 <HAL_RCC_OscConfig+0x388>
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001052:	fa93 f3a3 	rbit	r3, r3
 8001056:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001060:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001064:	fa93 f3a3 	rbit	r3, r3
 8001068:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800106c:	4bb1      	ldr	r3, [pc, #708]	@ (8001334 <HAL_RCC_OscConfig+0x64c>)
 800106e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001070:	2202      	movs	r2, #2
 8001072:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001076:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800107a:	fa92 f2a2 	rbit	r2, r2
 800107e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001082:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001086:	fab2 f282 	clz	r2, r2
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	f042 0220 	orr.w	r2, r2, #32
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	f002 021f 	and.w	r2, r2, #31
 8001096:	2101      	movs	r1, #1
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	4013      	ands	r3, r2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00a      	beq.n	80010b8 <HAL_RCC_OscConfig+0x3d0>
 80010a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d002      	beq.n	80010b8 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	f000 be35 	b.w	8001d22 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b8:	4b9e      	ldr	r3, [pc, #632]	@ (8001334 <HAL_RCC_OscConfig+0x64c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	21f8      	movs	r1, #248	@ 0xf8
 80010ce:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80010d6:	fa91 f1a1 	rbit	r1, r1
 80010da:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80010de:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80010e2:	fab1 f181 	clz	r1, r1
 80010e6:	b2c9      	uxtb	r1, r1
 80010e8:	408b      	lsls	r3, r1
 80010ea:	4992      	ldr	r1, [pc, #584]	@ (8001334 <HAL_RCC_OscConfig+0x64c>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f0:	e0f1      	b.n	80012d6 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8083 	beq.w	800120a <HAL_RCC_OscConfig+0x522>
 8001104:	2301      	movs	r3, #1
 8001106:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001116:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800111a:	fab3 f383 	clz	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001124:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	461a      	mov	r2, r3
 800112c:	2301      	movs	r3, #1
 800112e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fb3a 	bl	80007a8 <HAL_GetTick>
 8001134:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001138:	e00a      	b.n	8001150 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113a:	f7ff fb35 	bl	80007a8 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d902      	bls.n	8001150 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	f000 bde9 	b.w	8001d22 <HAL_RCC_OscConfig+0x103a>
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800115a:	fa93 f3a3 	rbit	r3, r3
 800115e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001162:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001166:	fab3 f383 	clz	r3, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b3f      	cmp	r3, #63	@ 0x3f
 800116e:	d802      	bhi.n	8001176 <HAL_RCC_OscConfig+0x48e>
 8001170:	4b70      	ldr	r3, [pc, #448]	@ (8001334 <HAL_RCC_OscConfig+0x64c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	e013      	b.n	800119e <HAL_RCC_OscConfig+0x4b6>
 8001176:	2302      	movs	r3, #2
 8001178:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001180:	fa93 f3a3 	rbit	r3, r3
 8001184:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800118e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001192:	fa93 f3a3 	rbit	r3, r3
 8001196:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800119a:	4b66      	ldr	r3, [pc, #408]	@ (8001334 <HAL_RCC_OscConfig+0x64c>)
 800119c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119e:	2202      	movs	r2, #2
 80011a0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80011a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80011a8:	fa92 f2a2 	rbit	r2, r2
 80011ac:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80011b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80011b4:	fab2 f282 	clz	r2, r2
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	f042 0220 	orr.w	r2, r2, #32
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	f002 021f 	and.w	r2, r2, #31
 80011c4:	2101      	movs	r1, #1
 80011c6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0b4      	beq.n	800113a <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d0:	4b58      	ldr	r3, [pc, #352]	@ (8001334 <HAL_RCC_OscConfig+0x64c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	21f8      	movs	r1, #248	@ 0xf8
 80011e6:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ea:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80011ee:	fa91 f1a1 	rbit	r1, r1
 80011f2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80011f6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80011fa:	fab1 f181 	clz	r1, r1
 80011fe:	b2c9      	uxtb	r1, r1
 8001200:	408b      	lsls	r3, r1
 8001202:	494c      	ldr	r1, [pc, #304]	@ (8001334 <HAL_RCC_OscConfig+0x64c>)
 8001204:	4313      	orrs	r3, r2
 8001206:	600b      	str	r3, [r1, #0]
 8001208:	e065      	b.n	80012d6 <HAL_RCC_OscConfig+0x5ee>
 800120a:	2301      	movs	r3, #1
 800120c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001210:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001214:	fa93 f3a3 	rbit	r3, r3
 8001218:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800121c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001220:	fab3 f383 	clz	r3, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800122a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	461a      	mov	r2, r3
 8001232:	2300      	movs	r3, #0
 8001234:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff fab7 	bl	80007a8 <HAL_GetTick>
 800123a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	e00a      	b.n	8001256 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001240:	f7ff fab2 	bl	80007a8 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d902      	bls.n	8001256 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	f000 bd66 	b.w	8001d22 <HAL_RCC_OscConfig+0x103a>
 8001256:	2302      	movs	r3, #2
 8001258:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001260:	fa93 f3a3 	rbit	r3, r3
 8001264:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001268:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126c:	fab3 f383 	clz	r3, r3
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b3f      	cmp	r3, #63	@ 0x3f
 8001274:	d802      	bhi.n	800127c <HAL_RCC_OscConfig+0x594>
 8001276:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <HAL_RCC_OscConfig+0x64c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	e013      	b.n	80012a4 <HAL_RCC_OscConfig+0x5bc>
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001294:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80012a0:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <HAL_RCC_OscConfig+0x64c>)
 80012a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a4:	2202      	movs	r2, #2
 80012a6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80012aa:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80012ae:	fa92 f2a2 	rbit	r2, r2
 80012b2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80012b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80012ba:	fab2 f282 	clz	r2, r2
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	f042 0220 	orr.w	r2, r2, #32
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	f002 021f 	and.w	r2, r2, #31
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1b4      	bne.n	8001240 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8119 	beq.w	800151e <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 8082 	beq.w	8001402 <HAL_RCC_OscConfig+0x71a>
 80012fe:	2301      	movs	r3, #1
 8001300:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001308:	fa93 f3a3 	rbit	r3, r3
 800130c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001310:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001314:	fab3 f383 	clz	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_RCC_OscConfig+0x650>)
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	461a      	mov	r2, r3
 8001324:	2301      	movs	r3, #1
 8001326:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001328:	f7ff fa3e 	bl	80007a8 <HAL_GetTick>
 800132c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001330:	e00f      	b.n	8001352 <HAL_RCC_OscConfig+0x66a>
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800133c:	f7ff fa34 	bl	80007a8 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d902      	bls.n	8001352 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	f000 bce8 	b.w	8001d22 <HAL_RCC_OscConfig+0x103a>
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800135c:	fa93 f2a3 	rbit	r2, r3
 8001360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001364:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800136e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001372:	2202      	movs	r2, #2
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800137a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	fa93 f2a3 	rbit	r2, r3
 8001384:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001392:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001396:	2202      	movs	r2, #2
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800139e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	fa93 f2a3 	rbit	r2, r3
 80013a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	4bb0      	ldr	r3, [pc, #704]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 80013b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013be:	2102      	movs	r1, #2
 80013c0:	6019      	str	r1, [r3, #0]
 80013c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	fa93 f1a3 	rbit	r1, r3
 80013d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013d8:	6019      	str	r1, [r3, #0]
  return result;
 80013da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013de:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	fab3 f383 	clz	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	f003 031f 	and.w	r3, r3, #31
 80013f4:	2101      	movs	r1, #1
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d09d      	beq.n	800133c <HAL_RCC_OscConfig+0x654>
 8001400:	e08d      	b.n	800151e <HAL_RCC_OscConfig+0x836>
 8001402:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001406:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001412:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	fa93 f2a3 	rbit	r2, r3
 800141c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001420:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001424:	601a      	str	r2, [r3, #0]
  return result;
 8001426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800142a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800142e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001430:	fab3 f383 	clz	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	4b8f      	ldr	r3, [pc, #572]	@ (8001678 <HAL_RCC_OscConfig+0x990>)
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	461a      	mov	r2, r3
 8001440:	2300      	movs	r3, #0
 8001442:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff f9b0 	bl	80007a8 <HAL_GetTick>
 8001448:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144c:	e00a      	b.n	8001464 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144e:	f7ff f9ab 	bl	80007a8 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d902      	bls.n	8001464 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	f000 bc5f 	b.w	8001d22 <HAL_RCC_OscConfig+0x103a>
 8001464:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001468:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800146c:	2202      	movs	r2, #2
 800146e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001470:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001474:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	fa93 f2a3 	rbit	r2, r3
 800147e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001482:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800148c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001490:	2202      	movs	r2, #2
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001498:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	fa93 f2a3 	rbit	r2, r3
 80014a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014b4:	2202      	movs	r2, #2
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014bc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	fa93 f2a3 	rbit	r2, r3
 80014c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80014ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	4b68      	ldr	r3, [pc, #416]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 80014d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80014dc:	2102      	movs	r1, #2
 80014de:	6019      	str	r1, [r3, #0]
 80014e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014e4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	fa93 f1a3 	rbit	r1, r3
 80014ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014f6:	6019      	str	r1, [r3, #0]
  return result;
 80014f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d197      	bne.n	800144e <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001522:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 819c 	beq.w	800186c <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b4e      	ldr	r3, [pc, #312]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d116      	bne.n	8001574 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b4b      	ldr	r3, [pc, #300]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a4a      	ldr	r2, [pc, #296]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001550:	61d3      	str	r3, [r2, #28]
 8001552:	4b48      	ldr	r3, [pc, #288]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800155a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800155e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001568:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800156c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800156e:	2301      	movs	r3, #1
 8001570:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b41      	ldr	r3, [pc, #260]	@ (800167c <HAL_RCC_OscConfig+0x994>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d11a      	bne.n	80015b6 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001580:	4b3e      	ldr	r3, [pc, #248]	@ (800167c <HAL_RCC_OscConfig+0x994>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a3d      	ldr	r2, [pc, #244]	@ (800167c <HAL_RCC_OscConfig+0x994>)
 8001586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800158c:	f7ff f90c 	bl	80007a8 <HAL_GetTick>
 8001590:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001594:	e009      	b.n	80015aa <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001596:	f7ff f907 	bl	80007a8 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	@ 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e3bb      	b.n	8001d22 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b34      	ldr	r3, [pc, #208]	@ (800167c <HAL_RCC_OscConfig+0x994>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0ef      	beq.n	8001596 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d106      	bne.n	80015d4 <HAL_RCC_OscConfig+0x8ec>
 80015c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4a2a      	ldr	r2, [pc, #168]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6213      	str	r3, [r2, #32]
 80015d2:	e035      	b.n	8001640 <HAL_RCC_OscConfig+0x958>
 80015d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10c      	bne.n	80015fe <HAL_RCC_OscConfig+0x916>
 80015e4:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4a22      	ldr	r2, [pc, #136]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	6213      	str	r3, [r2, #32]
 80015f0:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 80015f6:	f023 0304 	bic.w	r3, r3, #4
 80015fa:	6213      	str	r3, [r2, #32]
 80015fc:	e020      	b.n	8001640 <HAL_RCC_OscConfig+0x958>
 80015fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001602:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b05      	cmp	r3, #5
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x940>
 800160e:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4a18      	ldr	r2, [pc, #96]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6213      	str	r3, [r2, #32]
 800161a:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4a15      	ldr	r2, [pc, #84]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6213      	str	r3, [r2, #32]
 8001626:	e00b      	b.n	8001640 <HAL_RCC_OscConfig+0x958>
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a11      	ldr	r2, [pc, #68]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a0e      	ldr	r2, [pc, #56]	@ (8001674 <HAL_RCC_OscConfig+0x98c>)
 800163a:	f023 0304 	bic.w	r3, r3, #4
 800163e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001644:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 8085 	beq.w	800175c <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff f8a9 	bl	80007a8 <HAL_GetTick>
 8001656:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165a:	e011      	b.n	8001680 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165c:	f7ff f8a4 	bl	80007a8 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d907      	bls.n	8001680 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e356      	b.n	8001d22 <HAL_RCC_OscConfig+0x103a>
 8001674:	40021000 	.word	0x40021000
 8001678:	10908120 	.word	0x10908120
 800167c:	40007000 	.word	0x40007000
 8001680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001684:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001688:	2202      	movs	r2, #2
 800168a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001690:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fa93 f2a3 	rbit	r2, r3
 800169a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800169e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80016ac:	2202      	movs	r2, #2
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016b4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	fa93 f2a3 	rbit	r2, r3
 80016be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016c2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80016c6:	601a      	str	r2, [r3, #0]
  return result;
 80016c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016cc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80016d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <HAL_RCC_OscConfig+0xa00>
 80016e2:	4b98      	ldr	r3, [pc, #608]	@ (8001944 <HAL_RCC_OscConfig+0xc5c>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	e013      	b.n	8001710 <HAL_RCC_OscConfig+0xa28>
 80016e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ec:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016f0:	2202      	movs	r2, #2
 80016f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	fa93 f2a3 	rbit	r2, r3
 8001702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001706:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	4b8d      	ldr	r3, [pc, #564]	@ (8001944 <HAL_RCC_OscConfig+0xc5c>)
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001714:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001718:	2102      	movs	r1, #2
 800171a:	6011      	str	r1, [r2, #0]
 800171c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001720:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	fa92 f1a2 	rbit	r1, r2
 800172a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800172e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001732:	6011      	str	r1, [r2, #0]
  return result;
 8001734:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001738:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	fab2 f282 	clz	r2, r2
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	f002 021f 	and.w	r2, r2, #31
 800174e:	2101      	movs	r1, #1
 8001750:	fa01 f202 	lsl.w	r2, r1, r2
 8001754:	4013      	ands	r3, r2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d080      	beq.n	800165c <HAL_RCC_OscConfig+0x974>
 800175a:	e07d      	b.n	8001858 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175c:	f7ff f824 	bl	80007a8 <HAL_GetTick>
 8001760:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001764:	e00b      	b.n	800177e <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001766:	f7ff f81f 	bl	80007a8 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e2d1      	b.n	8001d22 <HAL_RCC_OscConfig+0x103a>
 800177e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001782:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001786:	2202      	movs	r2, #2
 8001788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800178e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	fa93 f2a3 	rbit	r2, r3
 8001798:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017aa:	2202      	movs	r2, #2
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fa93 f2a3 	rbit	r2, r3
 80017bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80017c4:	601a      	str	r2, [r3, #0]
  return result;
 80017c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80017ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d0:	fab3 f383 	clz	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <HAL_RCC_OscConfig+0xafe>
 80017e0:	4b58      	ldr	r3, [pc, #352]	@ (8001944 <HAL_RCC_OscConfig+0xc5c>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	e013      	b.n	800180e <HAL_RCC_OscConfig+0xb26>
 80017e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ea:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80017ee:	2202      	movs	r2, #2
 80017f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa93 f2a3 	rbit	r2, r3
 8001800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001804:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	4b4e      	ldr	r3, [pc, #312]	@ (8001944 <HAL_RCC_OscConfig+0xc5c>)
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001812:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001816:	2102      	movs	r1, #2
 8001818:	6011      	str	r1, [r2, #0]
 800181a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800181e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	fa92 f1a2 	rbit	r1, r2
 8001828:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800182c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001830:	6011      	str	r1, [r2, #0]
  return result;
 8001832:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001836:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	fab2 f282 	clz	r2, r2
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	f002 021f 	and.w	r2, r2, #31
 800184c:	2101      	movs	r1, #1
 800184e:	fa01 f202 	lsl.w	r2, r1, r2
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d186      	bne.n	8001766 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001858:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800185c:	2b01      	cmp	r3, #1
 800185e:	d105      	bne.n	800186c <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001860:	4b38      	ldr	r3, [pc, #224]	@ (8001944 <HAL_RCC_OscConfig+0xc5c>)
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	4a37      	ldr	r2, [pc, #220]	@ (8001944 <HAL_RCC_OscConfig+0xc5c>)
 8001866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800186a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001870:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 8251 	beq.w	8001d20 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187e:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <HAL_RCC_OscConfig+0xc5c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b08      	cmp	r3, #8
 8001888:	f000 820f 	beq.w	8001caa <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800188c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001890:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	2b02      	cmp	r3, #2
 800189a:	f040 8165 	bne.w	8001b68 <HAL_RCC_OscConfig+0xe80>
 800189e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80018a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fa93 f2a3 	rbit	r2, r3
 80018ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018be:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80018c2:	601a      	str	r2, [r3, #0]
  return result;
 80018c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80018cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	461a      	mov	r2, r3
 80018e0:	2300      	movs	r3, #0
 80018e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7fe ff60 	bl	80007a8 <HAL_GetTick>
 80018e8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ec:	e009      	b.n	8001902 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ee:	f7fe ff5b 	bl	80007a8 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e20f      	b.n	8001d22 <HAL_RCC_OscConfig+0x103a>
 8001902:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001906:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800190a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800190e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001914:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	fa93 f2a3 	rbit	r2, r3
 800191e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001922:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001926:	601a      	str	r2, [r3, #0]
  return result;
 8001928:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001930:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b3f      	cmp	r3, #63	@ 0x3f
 800193a:	d805      	bhi.n	8001948 <HAL_RCC_OscConfig+0xc60>
 800193c:	4b01      	ldr	r3, [pc, #4]	@ (8001944 <HAL_RCC_OscConfig+0xc5c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	e02a      	b.n	8001998 <HAL_RCC_OscConfig+0xcb0>
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001950:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800195a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	fa93 f2a3 	rbit	r2, r3
 8001964:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001968:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001972:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001976:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001980:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	fa93 f2a3 	rbit	r2, r3
 800198a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800198e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	4bca      	ldr	r3, [pc, #808]	@ (8001cc0 <HAL_RCC_OscConfig+0xfd8>)
 8001996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001998:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800199c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80019a0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80019a4:	6011      	str	r1, [r2, #0]
 80019a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019aa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	fa92 f1a2 	rbit	r1, r2
 80019b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019b8:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80019bc:	6011      	str	r1, [r2, #0]
  return result;
 80019be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019c2:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	fab2 f282 	clz	r2, r2
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	f042 0220 	orr.w	r2, r2, #32
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	f002 021f 	and.w	r2, r2, #31
 80019d8:	2101      	movs	r1, #1
 80019da:	fa01 f202 	lsl.w	r2, r1, r2
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d184      	bne.n	80018ee <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e4:	4bb6      	ldr	r3, [pc, #728]	@ (8001cc0 <HAL_RCC_OscConfig+0xfd8>)
 80019e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e8:	f023 020f 	bic.w	r2, r3, #15
 80019ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f8:	49b1      	ldr	r1, [pc, #708]	@ (8001cc0 <HAL_RCC_OscConfig+0xfd8>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80019fe:	4bb0      	ldr	r3, [pc, #704]	@ (8001cc0 <HAL_RCC_OscConfig+0xfd8>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001a06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6a19      	ldr	r1, [r3, #32]
 8001a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a16:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	430b      	orrs	r3, r1
 8001a20:	49a7      	ldr	r1, [pc, #668]	@ (8001cc0 <HAL_RCC_OscConfig+0xfd8>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
 8001a26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a2a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a2e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a38:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	fa93 f2a3 	rbit	r2, r3
 8001a42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a46:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a4a:	601a      	str	r2, [r3, #0]
  return result;
 8001a4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a50:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a54:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	461a      	mov	r2, r3
 8001a68:	2301      	movs	r3, #1
 8001a6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7fe fe9c 	bl	80007a8 <HAL_GetTick>
 8001a70:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a74:	e009      	b.n	8001a8a <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a76:	f7fe fe97 	bl	80007a8 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e14b      	b.n	8001d22 <HAL_RCC_OscConfig+0x103a>
 8001a8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a9c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	fa93 f2a3 	rbit	r2, r3
 8001aa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aaa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001aae:	601a      	str	r2, [r3, #0]
  return result;
 8001ab0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ab8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ac2:	d802      	bhi.n	8001aca <HAL_RCC_OscConfig+0xde2>
 8001ac4:	4b7e      	ldr	r3, [pc, #504]	@ (8001cc0 <HAL_RCC_OscConfig+0xfd8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	e027      	b.n	8001b1a <HAL_RCC_OscConfig+0xe32>
 8001aca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ace:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ad2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001adc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	fa93 f2a3 	rbit	r2, r3
 8001ae6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aea:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001af8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b02:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	fa93 f2a3 	rbit	r2, r3
 8001b0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b10:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc0 <HAL_RCC_OscConfig+0xfd8>)
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b1e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b22:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b26:	6011      	str	r1, [r2, #0]
 8001b28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b2c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	fa92 f1a2 	rbit	r1, r2
 8001b36:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b3a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001b3e:	6011      	str	r1, [r2, #0]
  return result;
 8001b40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b44:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	fab2 f282 	clz	r2, r2
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	f042 0220 	orr.w	r2, r2, #32
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	f002 021f 	and.w	r2, r2, #31
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d087      	beq.n	8001a76 <HAL_RCC_OscConfig+0xd8e>
 8001b66:	e0db      	b.n	8001d20 <HAL_RCC_OscConfig+0x1038>
 8001b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b6c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	fa93 f2a3 	rbit	r2, r3
 8001b84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b88:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b8c:	601a      	str	r2, [r3, #0]
  return result;
 8001b8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b92:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b96:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b98:	fab3 f383 	clz	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ba2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	2300      	movs	r3, #0
 8001bac:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bae:	f7fe fdfb 	bl	80007a8 <HAL_GetTick>
 8001bb2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb6:	e009      	b.n	8001bcc <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7fe fdf6 	bl	80007a8 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e0aa      	b.n	8001d22 <HAL_RCC_OscConfig+0x103a>
 8001bcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001bd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bde:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	fa93 f2a3 	rbit	r2, r3
 8001be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bec:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001bf0:	601a      	str	r2, [r3, #0]
  return result;
 8001bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001bfa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c04:	d802      	bhi.n	8001c0c <HAL_RCC_OscConfig+0xf24>
 8001c06:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc0 <HAL_RCC_OscConfig+0xfd8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	e027      	b.n	8001c5c <HAL_RCC_OscConfig+0xf74>
 8001c0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c10:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c1e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	fa93 f2a3 	rbit	r2, r3
 8001c28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c36:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c44:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	fa93 f2a3 	rbit	r2, r3
 8001c4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c52:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <HAL_RCC_OscConfig+0xfd8>)
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c60:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c64:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c68:	6011      	str	r1, [r2, #0]
 8001c6a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c6e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	fa92 f1a2 	rbit	r1, r2
 8001c78:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c7c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001c80:	6011      	str	r1, [r2, #0]
  return result;
 8001c82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c86:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	fab2 f282 	clz	r2, r2
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f042 0220 	orr.w	r2, r2, #32
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f002 021f 	and.w	r2, r2, #31
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d187      	bne.n	8001bb8 <HAL_RCC_OscConfig+0xed0>
 8001ca8:	e03a      	b.n	8001d20 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001caa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d104      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e031      	b.n	8001d22 <HAL_RCC_OscConfig+0x103a>
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc4:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <HAL_RCC_OscConfig+0x1044>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	@ (8001d2c <HAL_RCC_OscConfig+0x1044>)
 8001cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cd4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001cd8:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001cdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d117      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001cec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001cf0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001cf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d10b      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d08:	f003 020f 	and.w	r2, r3, #15
 8001d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b09e      	sub	sp, #120	@ 0x78
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e154      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d48:	4b89      	ldr	r3, [pc, #548]	@ (8001f70 <HAL_RCC_ClockConfig+0x240>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d910      	bls.n	8001d78 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b86      	ldr	r3, [pc, #536]	@ (8001f70 <HAL_RCC_ClockConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 0207 	bic.w	r2, r3, #7
 8001d5e:	4984      	ldr	r1, [pc, #528]	@ (8001f70 <HAL_RCC_ClockConfig+0x240>)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	4b82      	ldr	r3, [pc, #520]	@ (8001f70 <HAL_RCC_ClockConfig+0x240>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e13c      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d84:	4b7b      	ldr	r3, [pc, #492]	@ (8001f74 <HAL_RCC_ClockConfig+0x244>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4978      	ldr	r1, [pc, #480]	@ (8001f74 <HAL_RCC_ClockConfig+0x244>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80cd 	beq.w	8001f3e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d137      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xec>
 8001dac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001db0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001dba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbc:	fab3 f383 	clz	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dc4:	d802      	bhi.n	8001dcc <HAL_RCC_ClockConfig+0x9c>
 8001dc6:	4b6b      	ldr	r3, [pc, #428]	@ (8001f74 <HAL_RCC_ClockConfig+0x244>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	e00f      	b.n	8001dec <HAL_RCC_ClockConfig+0xbc>
 8001dcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8001dda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dde:	663b      	str	r3, [r7, #96]	@ 0x60
 8001de0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001de8:	4b62      	ldr	r3, [pc, #392]	@ (8001f74 <HAL_RCC_ClockConfig+0x244>)
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001df0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001df2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001df4:	fa92 f2a2 	rbit	r2, r2
 8001df8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001dfa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001dfc:	fab2 f282 	clz	r2, r2
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	f042 0220 	orr.w	r2, r2, #32
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	f002 021f 	and.w	r2, r2, #31
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d171      	bne.n	8001efc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0ea      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d137      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x164>
 8001e24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e28:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e3c:	d802      	bhi.n	8001e44 <HAL_RCC_ClockConfig+0x114>
 8001e3e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f74 <HAL_RCC_ClockConfig+0x244>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	e00f      	b.n	8001e64 <HAL_RCC_ClockConfig+0x134>
 8001e44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e48:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e56:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e60:	4b44      	ldr	r3, [pc, #272]	@ (8001f74 <HAL_RCC_ClockConfig+0x244>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e68:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001e6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e6c:	fa92 f2a2 	rbit	r2, r2
 8001e70:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001e72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e74:	fab2 f282 	clz	r2, r2
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	f042 0220 	orr.w	r2, r2, #32
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	f002 021f 	and.w	r2, r2, #31
 8001e84:	2101      	movs	r1, #1
 8001e86:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d135      	bne.n	8001efc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0ae      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2c2>
 8001e94:	2302      	movs	r3, #2
 8001e96:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eaa:	d802      	bhi.n	8001eb2 <HAL_RCC_ClockConfig+0x182>
 8001eac:	4b31      	ldr	r3, [pc, #196]	@ (8001f74 <HAL_RCC_ClockConfig+0x244>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	e00d      	b.n	8001ece <HAL_RCC_ClockConfig+0x19e>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb8:	fa93 f3a3 	rbit	r3, r3
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	623b      	str	r3, [r7, #32]
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	4b2a      	ldr	r3, [pc, #168]	@ (8001f74 <HAL_RCC_ClockConfig+0x244>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	2202      	movs	r2, #2
 8001ed0:	61ba      	str	r2, [r7, #24]
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	fa92 f2a2 	rbit	r2, r2
 8001ed8:	617a      	str	r2, [r7, #20]
  return result;
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	fab2 f282 	clz	r2, r2
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f042 0220 	orr.w	r2, r2, #32
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	f002 021f 	and.w	r2, r2, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e07a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <HAL_RCC_ClockConfig+0x244>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 0203 	bic.w	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	491a      	ldr	r1, [pc, #104]	@ (8001f74 <HAL_RCC_ClockConfig+0x244>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f0e:	f7fe fc4b 	bl	80007a8 <HAL_GetTick>
 8001f12:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f16:	f7fe fc47 	bl	80007a8 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e062      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <HAL_RCC_ClockConfig+0x244>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 020c 	and.w	r2, r3, #12
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d1eb      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <HAL_RCC_ClockConfig+0x240>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d215      	bcs.n	8001f78 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4c:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <HAL_RCC_ClockConfig+0x240>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 0207 	bic.w	r2, r3, #7
 8001f54:	4906      	ldr	r1, [pc, #24]	@ (8001f70 <HAL_RCC_ClockConfig+0x240>)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5c:	4b04      	ldr	r3, [pc, #16]	@ (8001f70 <HAL_RCC_ClockConfig+0x240>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d006      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e041      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2c2>
 8001f6e:	bf00      	nop
 8001f70:	40022000 	.word	0x40022000
 8001f74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f84:	4b1d      	ldr	r3, [pc, #116]	@ (8001ffc <HAL_RCC_ClockConfig+0x2cc>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	491a      	ldr	r1, [pc, #104]	@ (8001ffc <HAL_RCC_ClockConfig+0x2cc>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fa2:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <HAL_RCC_ClockConfig+0x2cc>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4912      	ldr	r1, [pc, #72]	@ (8001ffc <HAL_RCC_ClockConfig+0x2cc>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fb6:	f000 f829 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fba:	4601      	mov	r1, r0
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <HAL_RCC_ClockConfig+0x2cc>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fc4:	22f0      	movs	r2, #240	@ 0xf0
 8001fc6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	fa92 f2a2 	rbit	r2, r2
 8001fce:	60fa      	str	r2, [r7, #12]
  return result;
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	fab2 f282 	clz	r2, r2
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	40d3      	lsrs	r3, r2
 8001fda:	4a09      	ldr	r2, [pc, #36]	@ (8002000 <HAL_RCC_ClockConfig+0x2d0>)
 8001fdc:	5cd3      	ldrb	r3, [r2, r3]
 8001fde:	fa21 f303 	lsr.w	r3, r1, r3
 8001fe2:	4a08      	ldr	r2, [pc, #32]	@ (8002004 <HAL_RCC_ClockConfig+0x2d4>)
 8001fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fe6:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <HAL_RCC_ClockConfig+0x2d8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fb98 	bl	8000720 <HAL_InitTick>
  
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3778      	adds	r7, #120	@ 0x78
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08003cfc 	.word	0x08003cfc
 8002004:	20000000 	.word	0x20000000
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002026:	4b1f      	ldr	r3, [pc, #124]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b04      	cmp	r3, #4
 8002034:	d002      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0x30>
 8002036:	2b08      	cmp	r3, #8
 8002038:	d003      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0x36>
 800203a:	e029      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800203c:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800203e:	613b      	str	r3, [r7, #16]
      break;
 8002040:	e029      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	0c9b      	lsrs	r3, r3, #18
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	4a18      	ldr	r2, [pc, #96]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002050:	4b14      	ldr	r3, [pc, #80]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	4a15      	ldr	r2, [pc, #84]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002068:	4a0f      	ldr	r2, [pc, #60]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	fb02 f303 	mul.w	r3, r2, r3
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	e007      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800207a:	4a0b      	ldr	r2, [pc, #44]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	fb02 f303 	mul.w	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	613b      	str	r3, [r7, #16]
      break;
 800208e:	e002      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002090:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002092:	613b      	str	r3, [r7, #16]
      break;
 8002094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002096:	693b      	ldr	r3, [r7, #16]
}
 8002098:	4618      	mov	r0, r3
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	40021000 	.word	0x40021000
 80020a8:	007a1200 	.word	0x007a1200
 80020ac:	08003d14 	.word	0x08003d14
 80020b0:	08003d24 	.word	0x08003d24

080020b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b8:	4b03      	ldr	r3, [pc, #12]	@ (80020c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000000 	.word	0x20000000

080020cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020d2:	f7ff ffef 	bl	80020b4 <HAL_RCC_GetHCLKFreq>
 80020d6:	4601      	mov	r1, r0
 80020d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020e0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80020e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	fa92 f2a2 	rbit	r2, r2
 80020ec:	603a      	str	r2, [r7, #0]
  return result;
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	fab2 f282 	clz	r2, r2
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	40d3      	lsrs	r3, r2
 80020f8:	4a04      	ldr	r2, [pc, #16]	@ (800210c <HAL_RCC_GetPCLK1Freq+0x40>)
 80020fa:	5cd3      	ldrb	r3, [r2, r3]
 80020fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	08003d0c 	.word	0x08003d0c

08002110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002116:	f7ff ffcd 	bl	80020b4 <HAL_RCC_GetHCLKFreq>
 800211a:	4601      	mov	r1, r0
 800211c:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002124:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002128:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	fa92 f2a2 	rbit	r2, r2
 8002130:	603a      	str	r2, [r7, #0]
  return result;
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	fab2 f282 	clz	r2, r2
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	40d3      	lsrs	r3, r2
 800213c:	4a04      	ldr	r2, [pc, #16]	@ (8002150 <HAL_RCC_GetPCLK2Freq+0x40>)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	08003d0c 	.word	0x08003d0c

08002154 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b092      	sub	sp, #72	@ 0x48
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80d2 	beq.w	800231c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002178:	4b4d      	ldr	r3, [pc, #308]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10e      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	4b4a      	ldr	r3, [pc, #296]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	4a49      	ldr	r2, [pc, #292]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218e:	61d3      	str	r3, [r2, #28]
 8002190:	4b47      	ldr	r3, [pc, #284]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219c:	2301      	movs	r3, #1
 800219e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a2:	4b44      	ldr	r3, [pc, #272]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d118      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ae:	4b41      	ldr	r3, [pc, #260]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a40      	ldr	r2, [pc, #256]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ba:	f7fe faf5 	bl	80007a8 <HAL_GetTick>
 80021be:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	e008      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c2:	f7fe faf1 	bl	80007a8 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b64      	cmp	r3, #100	@ 0x64
 80021ce:	d901      	bls.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e1d4      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d4:	4b37      	ldr	r3, [pc, #220]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021e0:	4b33      	ldr	r3, [pc, #204]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8082 	beq.w	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d07a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002200:	4b2b      	ldr	r3, [pc, #172]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002208:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800220a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800220e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	4b25      	ldr	r3, [pc, #148]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	461a      	mov	r2, r3
 800222a:	2301      	movs	r3, #1
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002232:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800223c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	4b1c      	ldr	r3, [pc, #112]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	461a      	mov	r2, r3
 800224e:	2300      	movs	r3, #0
 8002250:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002252:	4a17      	ldr	r2, [pc, #92]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002256:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d049      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7fe faa1 	bl	80007a8 <HAL_GetTick>
 8002266:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	e00a      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7fe fa9d 	bl	80007a8 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e17e      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002280:	2302      	movs	r3, #2
 8002282:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	627b      	str	r3, [r7, #36]	@ 0x24
 800228c:	2302      	movs	r3, #2
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	61fb      	str	r3, [r7, #28]
  return result;
 8002298:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d108      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80022aa:	4b01      	ldr	r3, [pc, #4]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	e00d      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40007000 	.word	0x40007000
 80022b8:	10908100 	.word	0x10908100
 80022bc:	2302      	movs	r3, #2
 80022be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	4b9a      	ldr	r3, [pc, #616]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022cc:	2202      	movs	r2, #2
 80022ce:	613a      	str	r2, [r7, #16]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	fa92 f2a2 	rbit	r2, r2
 80022d6:	60fa      	str	r2, [r7, #12]
  return result;
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	fab2 f282 	clz	r2, r2
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f002 021f 	and.w	r2, r2, #31
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0b9      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022f6:	4b8f      	ldr	r3, [pc, #572]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	498c      	ldr	r1, [pc, #560]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002304:	4313      	orrs	r3, r2
 8002306:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002308:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800230c:	2b01      	cmp	r3, #1
 800230e:	d105      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002310:	4b88      	ldr	r3, [pc, #544]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	4a87      	ldr	r2, [pc, #540]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002316:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800231a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002328:	4b82      	ldr	r3, [pc, #520]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232c:	f023 0203 	bic.w	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	497f      	ldr	r1, [pc, #508]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002336:	4313      	orrs	r3, r2
 8002338:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002346:	4b7b      	ldr	r3, [pc, #492]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	4978      	ldr	r1, [pc, #480]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002354:	4313      	orrs	r3, r2
 8002356:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002364:	4b73      	ldr	r3, [pc, #460]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002368:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	4970      	ldr	r1, [pc, #448]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002372:	4313      	orrs	r3, r2
 8002374:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d008      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002382:	4b6c      	ldr	r3, [pc, #432]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	f023 0210 	bic.w	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4969      	ldr	r1, [pc, #420]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002390:	4313      	orrs	r3, r2
 8002392:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80023a0:	4b64      	ldr	r3, [pc, #400]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ac:	4961      	ldr	r1, [pc, #388]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023be:	4b5d      	ldr	r3, [pc, #372]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	f023 0220 	bic.w	r2, r3, #32
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	495a      	ldr	r1, [pc, #360]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023dc:	4b55      	ldr	r3, [pc, #340]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	4952      	ldr	r1, [pc, #328]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	494b      	ldr	r1, [pc, #300]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002408:	4313      	orrs	r3, r2
 800240a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002418:	4b46      	ldr	r3, [pc, #280]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	4943      	ldr	r1, [pc, #268]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002426:	4313      	orrs	r3, r2
 8002428:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002436:	4b3f      	ldr	r3, [pc, #252]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	493c      	ldr	r1, [pc, #240]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002454:	4b37      	ldr	r3, [pc, #220]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002458:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002460:	4934      	ldr	r1, [pc, #208]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002462:	4313      	orrs	r3, r2
 8002464:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002472:	4b30      	ldr	r3, [pc, #192]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002476:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247e:	492d      	ldr	r1, [pc, #180]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002480:	4313      	orrs	r3, r2
 8002482:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002490:	4b28      	ldr	r3, [pc, #160]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002494:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800249c:	4925      	ldr	r1, [pc, #148]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d008      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80024ae:	4b21      	ldr	r3, [pc, #132]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	491e      	ldr	r1, [pc, #120]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80024cc:	4b19      	ldr	r3, [pc, #100]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d8:	4916      	ldr	r1, [pc, #88]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80024ea:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f6:	490f      	ldr	r1, [pc, #60]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002508:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002514:	4907      	ldr	r1, [pc, #28]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002516:	4313      	orrs	r3, r2
 8002518:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00c      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002526:	4b03      	ldr	r3, [pc, #12]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	e002      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253a:	4913      	ldr	r1, [pc, #76]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800253c:	4313      	orrs	r3, r2
 800253e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800254c:	4b0e      	ldr	r3, [pc, #56]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002558:	490b      	ldr	r1, [pc, #44]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800255a:	4313      	orrs	r3, r2
 800255c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800256a:	4b07      	ldr	r3, [pc, #28]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002576:	4904      	ldr	r1, [pc, #16]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002578:	4313      	orrs	r3, r2
 800257a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3748      	adds	r7, #72	@ 0x48
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000

0800258c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d001      	beq.n	80025a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e047      	b.n	8002634 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a23      	ldr	r2, [pc, #140]	@ (8002640 <HAL_TIM_Base_Start+0xb4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d01d      	beq.n	80025f2 <HAL_TIM_Base_Start+0x66>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025be:	d018      	beq.n	80025f2 <HAL_TIM_Base_Start+0x66>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002644 <HAL_TIM_Base_Start+0xb8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_TIM_Base_Start+0x66>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002648 <HAL_TIM_Base_Start+0xbc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00e      	beq.n	80025f2 <HAL_TIM_Base_Start+0x66>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1c      	ldr	r2, [pc, #112]	@ (800264c <HAL_TIM_Base_Start+0xc0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d009      	beq.n	80025f2 <HAL_TIM_Base_Start+0x66>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002650 <HAL_TIM_Base_Start+0xc4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d004      	beq.n	80025f2 <HAL_TIM_Base_Start+0x66>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a19      	ldr	r2, [pc, #100]	@ (8002654 <HAL_TIM_Base_Start+0xc8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d115      	bne.n	800261e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	4b17      	ldr	r3, [pc, #92]	@ (8002658 <HAL_TIM_Base_Start+0xcc>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b06      	cmp	r3, #6
 8002602:	d015      	beq.n	8002630 <HAL_TIM_Base_Start+0xa4>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800260a:	d011      	beq.n	8002630 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261c:	e008      	b.n	8002630 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0201 	orr.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	e000      	b.n	8002632 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002630:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40012c00 	.word	0x40012c00
 8002644:	40000400 	.word	0x40000400
 8002648:	40000800 	.word	0x40000800
 800264c:	40013400 	.word	0x40013400
 8002650:	40014000 	.word	0x40014000
 8002654:	40015000 	.word	0x40015000
 8002658:	00010007 	.word	0x00010007

0800265c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e049      	b.n	8002702 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fd ff36 	bl	80004f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3304      	adds	r3, #4
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f000 fa56 	bl	8002b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <HAL_TIM_PWM_Start+0x24>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	bf14      	ite	ne
 8002728:	2301      	movne	r3, #1
 800272a:	2300      	moveq	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e03c      	b.n	80027aa <HAL_TIM_PWM_Start+0x9e>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b04      	cmp	r3, #4
 8002734:	d109      	bne.n	800274a <HAL_TIM_PWM_Start+0x3e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	bf14      	ite	ne
 8002742:	2301      	movne	r3, #1
 8002744:	2300      	moveq	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	e02f      	b.n	80027aa <HAL_TIM_PWM_Start+0x9e>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b08      	cmp	r3, #8
 800274e:	d109      	bne.n	8002764 <HAL_TIM_PWM_Start+0x58>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b01      	cmp	r3, #1
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e022      	b.n	80027aa <HAL_TIM_PWM_Start+0x9e>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b0c      	cmp	r3, #12
 8002768:	d109      	bne.n	800277e <HAL_TIM_PWM_Start+0x72>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b01      	cmp	r3, #1
 8002774:	bf14      	ite	ne
 8002776:	2301      	movne	r3, #1
 8002778:	2300      	moveq	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	e015      	b.n	80027aa <HAL_TIM_PWM_Start+0x9e>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b10      	cmp	r3, #16
 8002782:	d109      	bne.n	8002798 <HAL_TIM_PWM_Start+0x8c>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	bf14      	ite	ne
 8002790:	2301      	movne	r3, #1
 8002792:	2300      	moveq	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e008      	b.n	80027aa <HAL_TIM_PWM_Start+0x9e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e0a1      	b.n	80028f6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d104      	bne.n	80027c2 <HAL_TIM_PWM_Start+0xb6>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027c0:	e023      	b.n	800280a <HAL_TIM_PWM_Start+0xfe>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d104      	bne.n	80027d2 <HAL_TIM_PWM_Start+0xc6>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027d0:	e01b      	b.n	800280a <HAL_TIM_PWM_Start+0xfe>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d104      	bne.n	80027e2 <HAL_TIM_PWM_Start+0xd6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027e0:	e013      	b.n	800280a <HAL_TIM_PWM_Start+0xfe>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b0c      	cmp	r3, #12
 80027e6:	d104      	bne.n	80027f2 <HAL_TIM_PWM_Start+0xe6>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80027f0:	e00b      	b.n	800280a <HAL_TIM_PWM_Start+0xfe>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d104      	bne.n	8002802 <HAL_TIM_PWM_Start+0xf6>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002800:	e003      	b.n	800280a <HAL_TIM_PWM_Start+0xfe>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2202      	movs	r2, #2
 8002806:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2201      	movs	r2, #1
 8002810:	6839      	ldr	r1, [r7, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fd4a 	bl	80032ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a38      	ldr	r2, [pc, #224]	@ (8002900 <HAL_TIM_PWM_Start+0x1f4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d018      	beq.n	8002854 <HAL_TIM_PWM_Start+0x148>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a37      	ldr	r2, [pc, #220]	@ (8002904 <HAL_TIM_PWM_Start+0x1f8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d013      	beq.n	8002854 <HAL_TIM_PWM_Start+0x148>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a35      	ldr	r2, [pc, #212]	@ (8002908 <HAL_TIM_PWM_Start+0x1fc>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00e      	beq.n	8002854 <HAL_TIM_PWM_Start+0x148>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a34      	ldr	r2, [pc, #208]	@ (800290c <HAL_TIM_PWM_Start+0x200>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d009      	beq.n	8002854 <HAL_TIM_PWM_Start+0x148>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a32      	ldr	r2, [pc, #200]	@ (8002910 <HAL_TIM_PWM_Start+0x204>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d004      	beq.n	8002854 <HAL_TIM_PWM_Start+0x148>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a31      	ldr	r2, [pc, #196]	@ (8002914 <HAL_TIM_PWM_Start+0x208>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d101      	bne.n	8002858 <HAL_TIM_PWM_Start+0x14c>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <HAL_TIM_PWM_Start+0x14e>
 8002858:	2300      	movs	r3, #0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800286c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a23      	ldr	r2, [pc, #140]	@ (8002900 <HAL_TIM_PWM_Start+0x1f4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d01d      	beq.n	80028b4 <HAL_TIM_PWM_Start+0x1a8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002880:	d018      	beq.n	80028b4 <HAL_TIM_PWM_Start+0x1a8>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a24      	ldr	r2, [pc, #144]	@ (8002918 <HAL_TIM_PWM_Start+0x20c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_TIM_PWM_Start+0x1a8>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a22      	ldr	r2, [pc, #136]	@ (800291c <HAL_TIM_PWM_Start+0x210>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_TIM_PWM_Start+0x1a8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1a      	ldr	r2, [pc, #104]	@ (8002904 <HAL_TIM_PWM_Start+0x1f8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_TIM_PWM_Start+0x1a8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a18      	ldr	r2, [pc, #96]	@ (8002908 <HAL_TIM_PWM_Start+0x1fc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_TIM_PWM_Start+0x1a8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a19      	ldr	r2, [pc, #100]	@ (8002914 <HAL_TIM_PWM_Start+0x208>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d115      	bne.n	80028e0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	4b19      	ldr	r3, [pc, #100]	@ (8002920 <HAL_TIM_PWM_Start+0x214>)
 80028bc:	4013      	ands	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d015      	beq.n	80028f2 <HAL_TIM_PWM_Start+0x1e6>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028cc:	d011      	beq.n	80028f2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0201 	orr.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028de:	e008      	b.n	80028f2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	e000      	b.n	80028f4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40012c00 	.word	0x40012c00
 8002904:	40013400 	.word	0x40013400
 8002908:	40014000 	.word	0x40014000
 800290c:	40014400 	.word	0x40014400
 8002910:	40014800 	.word	0x40014800
 8002914:	40015000 	.word	0x40015000
 8002918:	40000400 	.word	0x40000400
 800291c:	40000800 	.word	0x40000800
 8002920:	00010007 	.word	0x00010007

08002924 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800293e:	2302      	movs	r3, #2
 8002940:	e0ff      	b.n	8002b42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b14      	cmp	r3, #20
 800294e:	f200 80f0 	bhi.w	8002b32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002952:	a201      	add	r2, pc, #4	@ (adr r2, 8002958 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002958:	080029ad 	.word	0x080029ad
 800295c:	08002b33 	.word	0x08002b33
 8002960:	08002b33 	.word	0x08002b33
 8002964:	08002b33 	.word	0x08002b33
 8002968:	080029ed 	.word	0x080029ed
 800296c:	08002b33 	.word	0x08002b33
 8002970:	08002b33 	.word	0x08002b33
 8002974:	08002b33 	.word	0x08002b33
 8002978:	08002a2f 	.word	0x08002a2f
 800297c:	08002b33 	.word	0x08002b33
 8002980:	08002b33 	.word	0x08002b33
 8002984:	08002b33 	.word	0x08002b33
 8002988:	08002a6f 	.word	0x08002a6f
 800298c:	08002b33 	.word	0x08002b33
 8002990:	08002b33 	.word	0x08002b33
 8002994:	08002b33 	.word	0x08002b33
 8002998:	08002ab1 	.word	0x08002ab1
 800299c:	08002b33 	.word	0x08002b33
 80029a0:	08002b33 	.word	0x08002b33
 80029a4:	08002b33 	.word	0x08002b33
 80029a8:	08002af1 	.word	0x08002af1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f974 	bl	8002ca0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0208 	orr.w	r2, r2, #8
 80029c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0204 	bic.w	r2, r2, #4
 80029d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6999      	ldr	r1, [r3, #24]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	619a      	str	r2, [r3, #24]
      break;
 80029ea:	e0a5      	b.n	8002b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 f9ee 	bl	8002dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6999      	ldr	r1, [r3, #24]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	021a      	lsls	r2, r3, #8
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	619a      	str	r2, [r3, #24]
      break;
 8002a2c:	e084      	b.n	8002b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fa61 	bl	8002efc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69da      	ldr	r2, [r3, #28]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0208 	orr.w	r2, r2, #8
 8002a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69da      	ldr	r2, [r3, #28]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0204 	bic.w	r2, r2, #4
 8002a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69d9      	ldr	r1, [r3, #28]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	61da      	str	r2, [r3, #28]
      break;
 8002a6c:	e064      	b.n	8002b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fad3 	bl	8003020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	69da      	ldr	r2, [r3, #28]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69d9      	ldr	r1, [r3, #28]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	021a      	lsls	r2, r3, #8
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	61da      	str	r2, [r3, #28]
      break;
 8002aae:	e043      	b.n	8002b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 fb22 	bl	8003100 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0208 	orr.w	r2, r2, #8
 8002aca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0204 	bic.w	r2, r2, #4
 8002ada:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002aee:	e023      	b.n	8002b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fb6c 	bl	80031d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	021a      	lsls	r2, r3, #8
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002b30:	e002      	b.n	8002b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]
      break;
 8002b36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop

08002b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a48      	ldr	r2, [pc, #288]	@ (8002c80 <TIM_Base_SetConfig+0x134>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d013      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b6a:	d00f      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a45      	ldr	r2, [pc, #276]	@ (8002c84 <TIM_Base_SetConfig+0x138>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00b      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a44      	ldr	r2, [pc, #272]	@ (8002c88 <TIM_Base_SetConfig+0x13c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d007      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a43      	ldr	r2, [pc, #268]	@ (8002c8c <TIM_Base_SetConfig+0x140>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d003      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a42      	ldr	r2, [pc, #264]	@ (8002c90 <TIM_Base_SetConfig+0x144>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d108      	bne.n	8002b9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a37      	ldr	r2, [pc, #220]	@ (8002c80 <TIM_Base_SetConfig+0x134>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01f      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bac:	d01b      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a34      	ldr	r2, [pc, #208]	@ (8002c84 <TIM_Base_SetConfig+0x138>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d017      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a33      	ldr	r2, [pc, #204]	@ (8002c88 <TIM_Base_SetConfig+0x13c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a32      	ldr	r2, [pc, #200]	@ (8002c8c <TIM_Base_SetConfig+0x140>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00f      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a32      	ldr	r2, [pc, #200]	@ (8002c94 <TIM_Base_SetConfig+0x148>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00b      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a31      	ldr	r2, [pc, #196]	@ (8002c98 <TIM_Base_SetConfig+0x14c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a30      	ldr	r2, [pc, #192]	@ (8002c9c <TIM_Base_SetConfig+0x150>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d003      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a2b      	ldr	r2, [pc, #172]	@ (8002c90 <TIM_Base_SetConfig+0x144>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d108      	bne.n	8002bf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a18      	ldr	r2, [pc, #96]	@ (8002c80 <TIM_Base_SetConfig+0x134>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d013      	beq.n	8002c4c <TIM_Base_SetConfig+0x100>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a19      	ldr	r2, [pc, #100]	@ (8002c8c <TIM_Base_SetConfig+0x140>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00f      	beq.n	8002c4c <TIM_Base_SetConfig+0x100>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a19      	ldr	r2, [pc, #100]	@ (8002c94 <TIM_Base_SetConfig+0x148>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00b      	beq.n	8002c4c <TIM_Base_SetConfig+0x100>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a18      	ldr	r2, [pc, #96]	@ (8002c98 <TIM_Base_SetConfig+0x14c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d007      	beq.n	8002c4c <TIM_Base_SetConfig+0x100>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a17      	ldr	r2, [pc, #92]	@ (8002c9c <TIM_Base_SetConfig+0x150>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d003      	beq.n	8002c4c <TIM_Base_SetConfig+0x100>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a12      	ldr	r2, [pc, #72]	@ (8002c90 <TIM_Base_SetConfig+0x144>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d103      	bne.n	8002c54 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d105      	bne.n	8002c72 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f023 0201 	bic.w	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	611a      	str	r2, [r3, #16]
  }
}
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40000800 	.word	0x40000800
 8002c8c:	40013400 	.word	0x40013400
 8002c90:	40015000 	.word	0x40015000
 8002c94:	40014000 	.word	0x40014000
 8002c98:	40014400 	.word	0x40014400
 8002c9c:	40014800 	.word	0x40014800

08002ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f023 0201 	bic.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0303 	bic.w	r3, r3, #3
 8002cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f023 0302 	bic.w	r3, r3, #2
 8002cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a30      	ldr	r2, [pc, #192]	@ (8002dbc <TIM_OC1_SetConfig+0x11c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d013      	beq.n	8002d28 <TIM_OC1_SetConfig+0x88>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a2f      	ldr	r2, [pc, #188]	@ (8002dc0 <TIM_OC1_SetConfig+0x120>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00f      	beq.n	8002d28 <TIM_OC1_SetConfig+0x88>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a2e      	ldr	r2, [pc, #184]	@ (8002dc4 <TIM_OC1_SetConfig+0x124>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00b      	beq.n	8002d28 <TIM_OC1_SetConfig+0x88>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a2d      	ldr	r2, [pc, #180]	@ (8002dc8 <TIM_OC1_SetConfig+0x128>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d007      	beq.n	8002d28 <TIM_OC1_SetConfig+0x88>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8002dcc <TIM_OC1_SetConfig+0x12c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d003      	beq.n	8002d28 <TIM_OC1_SetConfig+0x88>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a2b      	ldr	r2, [pc, #172]	@ (8002dd0 <TIM_OC1_SetConfig+0x130>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d10c      	bne.n	8002d42 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f023 0308 	bic.w	r3, r3, #8
 8002d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f023 0304 	bic.w	r3, r3, #4
 8002d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a1d      	ldr	r2, [pc, #116]	@ (8002dbc <TIM_OC1_SetConfig+0x11c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <TIM_OC1_SetConfig+0xd2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc0 <TIM_OC1_SetConfig+0x120>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00f      	beq.n	8002d72 <TIM_OC1_SetConfig+0xd2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc4 <TIM_OC1_SetConfig+0x124>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00b      	beq.n	8002d72 <TIM_OC1_SetConfig+0xd2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8002dc8 <TIM_OC1_SetConfig+0x128>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d007      	beq.n	8002d72 <TIM_OC1_SetConfig+0xd2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a19      	ldr	r2, [pc, #100]	@ (8002dcc <TIM_OC1_SetConfig+0x12c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d003      	beq.n	8002d72 <TIM_OC1_SetConfig+0xd2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a18      	ldr	r2, [pc, #96]	@ (8002dd0 <TIM_OC1_SetConfig+0x130>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d111      	bne.n	8002d96 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	621a      	str	r2, [r3, #32]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	40012c00 	.word	0x40012c00
 8002dc0:	40013400 	.word	0x40013400
 8002dc4:	40014000 	.word	0x40014000
 8002dc8:	40014400 	.word	0x40014400
 8002dcc:	40014800 	.word	0x40014800
 8002dd0:	40015000 	.word	0x40015000

08002dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f023 0210 	bic.w	r2, r3, #16
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f023 0320 	bic.w	r3, r3, #32
 8002e22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee4 <TIM_OC2_SetConfig+0x110>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <TIM_OC2_SetConfig+0x74>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ee8 <TIM_OC2_SetConfig+0x114>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d003      	beq.n	8002e48 <TIM_OC2_SetConfig+0x74>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a2a      	ldr	r2, [pc, #168]	@ (8002eec <TIM_OC2_SetConfig+0x118>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d10d      	bne.n	8002e64 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee4 <TIM_OC2_SetConfig+0x110>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d013      	beq.n	8002e94 <TIM_OC2_SetConfig+0xc0>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee8 <TIM_OC2_SetConfig+0x114>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00f      	beq.n	8002e94 <TIM_OC2_SetConfig+0xc0>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef0 <TIM_OC2_SetConfig+0x11c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00b      	beq.n	8002e94 <TIM_OC2_SetConfig+0xc0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef4 <TIM_OC2_SetConfig+0x120>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d007      	beq.n	8002e94 <TIM_OC2_SetConfig+0xc0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef8 <TIM_OC2_SetConfig+0x124>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <TIM_OC2_SetConfig+0xc0>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a17      	ldr	r2, [pc, #92]	@ (8002eec <TIM_OC2_SetConfig+0x118>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d113      	bne.n	8002ebc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e9a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ea2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	621a      	str	r2, [r3, #32]
}
 8002ed6:	bf00      	nop
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40012c00 	.word	0x40012c00
 8002ee8:	40013400 	.word	0x40013400
 8002eec:	40015000 	.word	0x40015000
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40014400 	.word	0x40014400
 8002ef8:	40014800 	.word	0x40014800

08002efc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0303 	bic.w	r3, r3, #3
 8002f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a2b      	ldr	r2, [pc, #172]	@ (8003008 <TIM_OC3_SetConfig+0x10c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d007      	beq.n	8002f6e <TIM_OC3_SetConfig+0x72>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a2a      	ldr	r2, [pc, #168]	@ (800300c <TIM_OC3_SetConfig+0x110>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d003      	beq.n	8002f6e <TIM_OC3_SetConfig+0x72>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a29      	ldr	r2, [pc, #164]	@ (8003010 <TIM_OC3_SetConfig+0x114>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10d      	bne.n	8002f8a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f88:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003008 <TIM_OC3_SetConfig+0x10c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <TIM_OC3_SetConfig+0xbe>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a1d      	ldr	r2, [pc, #116]	@ (800300c <TIM_OC3_SetConfig+0x110>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00f      	beq.n	8002fba <TIM_OC3_SetConfig+0xbe>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003014 <TIM_OC3_SetConfig+0x118>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00b      	beq.n	8002fba <TIM_OC3_SetConfig+0xbe>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8003018 <TIM_OC3_SetConfig+0x11c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <TIM_OC3_SetConfig+0xbe>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a1b      	ldr	r2, [pc, #108]	@ (800301c <TIM_OC3_SetConfig+0x120>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d003      	beq.n	8002fba <TIM_OC3_SetConfig+0xbe>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a16      	ldr	r2, [pc, #88]	@ (8003010 <TIM_OC3_SetConfig+0x114>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d113      	bne.n	8002fe2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	621a      	str	r2, [r3, #32]
}
 8002ffc:	bf00      	nop
 8002ffe:	371c      	adds	r7, #28
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40013400 	.word	0x40013400
 8003010:	40015000 	.word	0x40015000
 8003014:	40014000 	.word	0x40014000
 8003018:	40014400 	.word	0x40014400
 800301c:	40014800 	.word	0x40014800

08003020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800304e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800305a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800306e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	031b      	lsls	r3, r3, #12
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a1a      	ldr	r2, [pc, #104]	@ (80030e8 <TIM_OC4_SetConfig+0xc8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d013      	beq.n	80030ac <TIM_OC4_SetConfig+0x8c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a19      	ldr	r2, [pc, #100]	@ (80030ec <TIM_OC4_SetConfig+0xcc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00f      	beq.n	80030ac <TIM_OC4_SetConfig+0x8c>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a18      	ldr	r2, [pc, #96]	@ (80030f0 <TIM_OC4_SetConfig+0xd0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00b      	beq.n	80030ac <TIM_OC4_SetConfig+0x8c>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a17      	ldr	r2, [pc, #92]	@ (80030f4 <TIM_OC4_SetConfig+0xd4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d007      	beq.n	80030ac <TIM_OC4_SetConfig+0x8c>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a16      	ldr	r2, [pc, #88]	@ (80030f8 <TIM_OC4_SetConfig+0xd8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d003      	beq.n	80030ac <TIM_OC4_SetConfig+0x8c>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a15      	ldr	r2, [pc, #84]	@ (80030fc <TIM_OC4_SetConfig+0xdc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d109      	bne.n	80030c0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	019b      	lsls	r3, r3, #6
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	621a      	str	r2, [r3, #32]
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40012c00 	.word	0x40012c00
 80030ec:	40013400 	.word	0x40013400
 80030f0:	40014000 	.word	0x40014000
 80030f4:	40014400 	.word	0x40014400
 80030f8:	40014800 	.word	0x40014800
 80030fc:	40015000 	.word	0x40015000

08003100 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800312e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003144:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	041b      	lsls	r3, r3, #16
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a19      	ldr	r2, [pc, #100]	@ (80031bc <TIM_OC5_SetConfig+0xbc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <TIM_OC5_SetConfig+0x82>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a18      	ldr	r2, [pc, #96]	@ (80031c0 <TIM_OC5_SetConfig+0xc0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00f      	beq.n	8003182 <TIM_OC5_SetConfig+0x82>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a17      	ldr	r2, [pc, #92]	@ (80031c4 <TIM_OC5_SetConfig+0xc4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00b      	beq.n	8003182 <TIM_OC5_SetConfig+0x82>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a16      	ldr	r2, [pc, #88]	@ (80031c8 <TIM_OC5_SetConfig+0xc8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d007      	beq.n	8003182 <TIM_OC5_SetConfig+0x82>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a15      	ldr	r2, [pc, #84]	@ (80031cc <TIM_OC5_SetConfig+0xcc>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d003      	beq.n	8003182 <TIM_OC5_SetConfig+0x82>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a14      	ldr	r2, [pc, #80]	@ (80031d0 <TIM_OC5_SetConfig+0xd0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d109      	bne.n	8003196 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003188:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	621a      	str	r2, [r3, #32]
}
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40012c00 	.word	0x40012c00
 80031c0:	40013400 	.word	0x40013400
 80031c4:	40014000 	.word	0x40014000
 80031c8:	40014400 	.word	0x40014400
 80031cc:	40014800 	.word	0x40014800
 80031d0:	40015000 	.word	0x40015000

080031d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800321a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	051b      	lsls	r3, r3, #20
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a1a      	ldr	r2, [pc, #104]	@ (8003294 <TIM_OC6_SetConfig+0xc0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d013      	beq.n	8003258 <TIM_OC6_SetConfig+0x84>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a19      	ldr	r2, [pc, #100]	@ (8003298 <TIM_OC6_SetConfig+0xc4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00f      	beq.n	8003258 <TIM_OC6_SetConfig+0x84>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a18      	ldr	r2, [pc, #96]	@ (800329c <TIM_OC6_SetConfig+0xc8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00b      	beq.n	8003258 <TIM_OC6_SetConfig+0x84>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a17      	ldr	r2, [pc, #92]	@ (80032a0 <TIM_OC6_SetConfig+0xcc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d007      	beq.n	8003258 <TIM_OC6_SetConfig+0x84>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a16      	ldr	r2, [pc, #88]	@ (80032a4 <TIM_OC6_SetConfig+0xd0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d003      	beq.n	8003258 <TIM_OC6_SetConfig+0x84>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a15      	ldr	r2, [pc, #84]	@ (80032a8 <TIM_OC6_SetConfig+0xd4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d109      	bne.n	800326c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800325e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	029b      	lsls	r3, r3, #10
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	621a      	str	r2, [r3, #32]
}
 8003286:	bf00      	nop
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40013400 	.word	0x40013400
 800329c:	40014000 	.word	0x40014000
 80032a0:	40014400 	.word	0x40014400
 80032a4:	40014800 	.word	0x40014800
 80032a8:	40015000 	.word	0x40015000

080032ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	2201      	movs	r2, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	401a      	ands	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a1a      	ldr	r2, [r3, #32]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	431a      	orrs	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	621a      	str	r2, [r3, #32]
}
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800330c:	2302      	movs	r3, #2
 800330e:	e06d      	b.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a30      	ldr	r2, [pc, #192]	@ (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d009      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2f      	ldr	r2, [pc, #188]	@ (80033fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a2d      	ldr	r2, [pc, #180]	@ (8003400 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d108      	bne.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003354:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1e      	ldr	r2, [pc, #120]	@ (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d01d      	beq.n	80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338c:	d018      	beq.n	80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1c      	ldr	r2, [pc, #112]	@ (8003404 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d013      	beq.n	80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1a      	ldr	r2, [pc, #104]	@ (8003408 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00e      	beq.n	80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a15      	ldr	r2, [pc, #84]	@ (80033fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d009      	beq.n	80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a16      	ldr	r2, [pc, #88]	@ (800340c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a11      	ldr	r2, [pc, #68]	@ (8003400 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10c      	bne.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40013400 	.word	0x40013400
 8003400:	40015000 	.word	0x40015000
 8003404:	40000400 	.word	0x40000400
 8003408:	40000800 	.word	0x40000800
 800340c:	40014000 	.word	0x40014000

08003410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e040      	b.n	80034a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd f8b0 	bl	8000598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	@ 0x24
 800343c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f9fc 	bl	8003854 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f825 	bl	80034ac <UART_SetConfig>
 8003462:	4603      	mov	r3, r0
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e01b      	b.n	80034a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800347a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800348a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fa7b 	bl	8003998 <UART_CheckIdleState>
 80034a2:	4603      	mov	r3, r0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	4b92      	ldr	r3, [pc, #584]	@ (8003720 <UART_SetConfig+0x274>)
 80034d8:	4013      	ands	r3, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6812      	ldr	r2, [r2, #0]
 80034de:	6979      	ldr	r1, [r7, #20]
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	430a      	orrs	r2, r1
 800351c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a80      	ldr	r2, [pc, #512]	@ (8003724 <UART_SetConfig+0x278>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d120      	bne.n	800356a <UART_SetConfig+0xbe>
 8003528:	4b7f      	ldr	r3, [pc, #508]	@ (8003728 <UART_SetConfig+0x27c>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	2b03      	cmp	r3, #3
 8003532:	d817      	bhi.n	8003564 <UART_SetConfig+0xb8>
 8003534:	a201      	add	r2, pc, #4	@ (adr r2, 800353c <UART_SetConfig+0x90>)
 8003536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353a:	bf00      	nop
 800353c:	0800354d 	.word	0x0800354d
 8003540:	08003559 	.word	0x08003559
 8003544:	0800355f 	.word	0x0800355f
 8003548:	08003553 	.word	0x08003553
 800354c:	2301      	movs	r3, #1
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e0b5      	b.n	80036be <UART_SetConfig+0x212>
 8003552:	2302      	movs	r3, #2
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e0b2      	b.n	80036be <UART_SetConfig+0x212>
 8003558:	2304      	movs	r3, #4
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e0af      	b.n	80036be <UART_SetConfig+0x212>
 800355e:	2308      	movs	r3, #8
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e0ac      	b.n	80036be <UART_SetConfig+0x212>
 8003564:	2310      	movs	r3, #16
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e0a9      	b.n	80036be <UART_SetConfig+0x212>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6f      	ldr	r2, [pc, #444]	@ (800372c <UART_SetConfig+0x280>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d124      	bne.n	80035be <UART_SetConfig+0x112>
 8003574:	4b6c      	ldr	r3, [pc, #432]	@ (8003728 <UART_SetConfig+0x27c>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003578:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800357c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003580:	d011      	beq.n	80035a6 <UART_SetConfig+0xfa>
 8003582:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003586:	d817      	bhi.n	80035b8 <UART_SetConfig+0x10c>
 8003588:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800358c:	d011      	beq.n	80035b2 <UART_SetConfig+0x106>
 800358e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003592:	d811      	bhi.n	80035b8 <UART_SetConfig+0x10c>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <UART_SetConfig+0xf4>
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800359c:	d006      	beq.n	80035ac <UART_SetConfig+0x100>
 800359e:	e00b      	b.n	80035b8 <UART_SetConfig+0x10c>
 80035a0:	2300      	movs	r3, #0
 80035a2:	77fb      	strb	r3, [r7, #31]
 80035a4:	e08b      	b.n	80036be <UART_SetConfig+0x212>
 80035a6:	2302      	movs	r3, #2
 80035a8:	77fb      	strb	r3, [r7, #31]
 80035aa:	e088      	b.n	80036be <UART_SetConfig+0x212>
 80035ac:	2304      	movs	r3, #4
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e085      	b.n	80036be <UART_SetConfig+0x212>
 80035b2:	2308      	movs	r3, #8
 80035b4:	77fb      	strb	r3, [r7, #31]
 80035b6:	e082      	b.n	80036be <UART_SetConfig+0x212>
 80035b8:	2310      	movs	r3, #16
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e07f      	b.n	80036be <UART_SetConfig+0x212>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003730 <UART_SetConfig+0x284>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d124      	bne.n	8003612 <UART_SetConfig+0x166>
 80035c8:	4b57      	ldr	r3, [pc, #348]	@ (8003728 <UART_SetConfig+0x27c>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80035d0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80035d4:	d011      	beq.n	80035fa <UART_SetConfig+0x14e>
 80035d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80035da:	d817      	bhi.n	800360c <UART_SetConfig+0x160>
 80035dc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80035e0:	d011      	beq.n	8003606 <UART_SetConfig+0x15a>
 80035e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80035e6:	d811      	bhi.n	800360c <UART_SetConfig+0x160>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <UART_SetConfig+0x148>
 80035ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035f0:	d006      	beq.n	8003600 <UART_SetConfig+0x154>
 80035f2:	e00b      	b.n	800360c <UART_SetConfig+0x160>
 80035f4:	2300      	movs	r3, #0
 80035f6:	77fb      	strb	r3, [r7, #31]
 80035f8:	e061      	b.n	80036be <UART_SetConfig+0x212>
 80035fa:	2302      	movs	r3, #2
 80035fc:	77fb      	strb	r3, [r7, #31]
 80035fe:	e05e      	b.n	80036be <UART_SetConfig+0x212>
 8003600:	2304      	movs	r3, #4
 8003602:	77fb      	strb	r3, [r7, #31]
 8003604:	e05b      	b.n	80036be <UART_SetConfig+0x212>
 8003606:	2308      	movs	r3, #8
 8003608:	77fb      	strb	r3, [r7, #31]
 800360a:	e058      	b.n	80036be <UART_SetConfig+0x212>
 800360c:	2310      	movs	r3, #16
 800360e:	77fb      	strb	r3, [r7, #31]
 8003610:	e055      	b.n	80036be <UART_SetConfig+0x212>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a47      	ldr	r2, [pc, #284]	@ (8003734 <UART_SetConfig+0x288>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d124      	bne.n	8003666 <UART_SetConfig+0x1ba>
 800361c:	4b42      	ldr	r3, [pc, #264]	@ (8003728 <UART_SetConfig+0x27c>)
 800361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003620:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003624:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003628:	d011      	beq.n	800364e <UART_SetConfig+0x1a2>
 800362a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800362e:	d817      	bhi.n	8003660 <UART_SetConfig+0x1b4>
 8003630:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003634:	d011      	beq.n	800365a <UART_SetConfig+0x1ae>
 8003636:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800363a:	d811      	bhi.n	8003660 <UART_SetConfig+0x1b4>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <UART_SetConfig+0x19c>
 8003640:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003644:	d006      	beq.n	8003654 <UART_SetConfig+0x1a8>
 8003646:	e00b      	b.n	8003660 <UART_SetConfig+0x1b4>
 8003648:	2300      	movs	r3, #0
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e037      	b.n	80036be <UART_SetConfig+0x212>
 800364e:	2302      	movs	r3, #2
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e034      	b.n	80036be <UART_SetConfig+0x212>
 8003654:	2304      	movs	r3, #4
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e031      	b.n	80036be <UART_SetConfig+0x212>
 800365a:	2308      	movs	r3, #8
 800365c:	77fb      	strb	r3, [r7, #31]
 800365e:	e02e      	b.n	80036be <UART_SetConfig+0x212>
 8003660:	2310      	movs	r3, #16
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	e02b      	b.n	80036be <UART_SetConfig+0x212>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a33      	ldr	r2, [pc, #204]	@ (8003738 <UART_SetConfig+0x28c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d124      	bne.n	80036ba <UART_SetConfig+0x20e>
 8003670:	4b2d      	ldr	r3, [pc, #180]	@ (8003728 <UART_SetConfig+0x27c>)
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003678:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800367c:	d011      	beq.n	80036a2 <UART_SetConfig+0x1f6>
 800367e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003682:	d817      	bhi.n	80036b4 <UART_SetConfig+0x208>
 8003684:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003688:	d011      	beq.n	80036ae <UART_SetConfig+0x202>
 800368a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800368e:	d811      	bhi.n	80036b4 <UART_SetConfig+0x208>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <UART_SetConfig+0x1f0>
 8003694:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003698:	d006      	beq.n	80036a8 <UART_SetConfig+0x1fc>
 800369a:	e00b      	b.n	80036b4 <UART_SetConfig+0x208>
 800369c:	2300      	movs	r3, #0
 800369e:	77fb      	strb	r3, [r7, #31]
 80036a0:	e00d      	b.n	80036be <UART_SetConfig+0x212>
 80036a2:	2302      	movs	r3, #2
 80036a4:	77fb      	strb	r3, [r7, #31]
 80036a6:	e00a      	b.n	80036be <UART_SetConfig+0x212>
 80036a8:	2304      	movs	r3, #4
 80036aa:	77fb      	strb	r3, [r7, #31]
 80036ac:	e007      	b.n	80036be <UART_SetConfig+0x212>
 80036ae:	2308      	movs	r3, #8
 80036b0:	77fb      	strb	r3, [r7, #31]
 80036b2:	e004      	b.n	80036be <UART_SetConfig+0x212>
 80036b4:	2310      	movs	r3, #16
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e001      	b.n	80036be <UART_SetConfig+0x212>
 80036ba:	2310      	movs	r3, #16
 80036bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036c6:	d16b      	bne.n	80037a0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80036c8:	7ffb      	ldrb	r3, [r7, #31]
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d838      	bhi.n	8003740 <UART_SetConfig+0x294>
 80036ce:	a201      	add	r2, pc, #4	@ (adr r2, 80036d4 <UART_SetConfig+0x228>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	080036f9 	.word	0x080036f9
 80036d8:	08003701 	.word	0x08003701
 80036dc:	08003709 	.word	0x08003709
 80036e0:	08003741 	.word	0x08003741
 80036e4:	0800370f 	.word	0x0800370f
 80036e8:	08003741 	.word	0x08003741
 80036ec:	08003741 	.word	0x08003741
 80036f0:	08003741 	.word	0x08003741
 80036f4:	08003717 	.word	0x08003717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f8:	f7fe fce8 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 80036fc:	61b8      	str	r0, [r7, #24]
        break;
 80036fe:	e024      	b.n	800374a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003700:	f7fe fd06 	bl	8002110 <HAL_RCC_GetPCLK2Freq>
 8003704:	61b8      	str	r0, [r7, #24]
        break;
 8003706:	e020      	b.n	800374a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003708:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <UART_SetConfig+0x290>)
 800370a:	61bb      	str	r3, [r7, #24]
        break;
 800370c:	e01d      	b.n	800374a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370e:	f7fe fc7d 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8003712:	61b8      	str	r0, [r7, #24]
        break;
 8003714:	e019      	b.n	800374a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800371a:	61bb      	str	r3, [r7, #24]
        break;
 800371c:	e015      	b.n	800374a <UART_SetConfig+0x29e>
 800371e:	bf00      	nop
 8003720:	efff69f3 	.word	0xefff69f3
 8003724:	40013800 	.word	0x40013800
 8003728:	40021000 	.word	0x40021000
 800372c:	40004400 	.word	0x40004400
 8003730:	40004800 	.word	0x40004800
 8003734:	40004c00 	.word	0x40004c00
 8003738:	40005000 	.word	0x40005000
 800373c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	77bb      	strb	r3, [r7, #30]
        break;
 8003748:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d073      	beq.n	8003838 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	005a      	lsls	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	441a      	add	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	fbb2 f3f3 	udiv	r3, r2, r3
 8003764:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b0f      	cmp	r3, #15
 800376a:	d916      	bls.n	800379a <UART_SetConfig+0x2ee>
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003772:	d212      	bcs.n	800379a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	b29b      	uxth	r3, r3
 8003778:	f023 030f 	bic.w	r3, r3, #15
 800377c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	b29b      	uxth	r3, r3
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	b29a      	uxth	r2, r3
 800378a:	89fb      	ldrh	r3, [r7, #14]
 800378c:	4313      	orrs	r3, r2
 800378e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	89fa      	ldrh	r2, [r7, #14]
 8003796:	60da      	str	r2, [r3, #12]
 8003798:	e04e      	b.n	8003838 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	77bb      	strb	r3, [r7, #30]
 800379e:	e04b      	b.n	8003838 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037a0:	7ffb      	ldrb	r3, [r7, #31]
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d827      	bhi.n	80037f6 <UART_SetConfig+0x34a>
 80037a6:	a201      	add	r2, pc, #4	@ (adr r2, 80037ac <UART_SetConfig+0x300>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	080037d1 	.word	0x080037d1
 80037b0:	080037d9 	.word	0x080037d9
 80037b4:	080037e1 	.word	0x080037e1
 80037b8:	080037f7 	.word	0x080037f7
 80037bc:	080037e7 	.word	0x080037e7
 80037c0:	080037f7 	.word	0x080037f7
 80037c4:	080037f7 	.word	0x080037f7
 80037c8:	080037f7 	.word	0x080037f7
 80037cc:	080037ef 	.word	0x080037ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d0:	f7fe fc7c 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 80037d4:	61b8      	str	r0, [r7, #24]
        break;
 80037d6:	e013      	b.n	8003800 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037d8:	f7fe fc9a 	bl	8002110 <HAL_RCC_GetPCLK2Freq>
 80037dc:	61b8      	str	r0, [r7, #24]
        break;
 80037de:	e00f      	b.n	8003800 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003850 <UART_SetConfig+0x3a4>)
 80037e2:	61bb      	str	r3, [r7, #24]
        break;
 80037e4:	e00c      	b.n	8003800 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037e6:	f7fe fc11 	bl	800200c <HAL_RCC_GetSysClockFreq>
 80037ea:	61b8      	str	r0, [r7, #24]
        break;
 80037ec:	e008      	b.n	8003800 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037f2:	61bb      	str	r3, [r7, #24]
        break;
 80037f4:	e004      	b.n	8003800 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	77bb      	strb	r3, [r7, #30]
        break;
 80037fe:	bf00      	nop
    }

    if (pclk != 0U)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d018      	beq.n	8003838 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	085a      	lsrs	r2, r3, #1
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	441a      	add	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b0f      	cmp	r3, #15
 800381e:	d909      	bls.n	8003834 <UART_SetConfig+0x388>
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003826:	d205      	bcs.n	8003834 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	e001      	b.n	8003838 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003844:	7fbb      	ldrb	r3, [r7, #30]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3720      	adds	r7, #32
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	007a1200 	.word	0x007a1200

08003854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01a      	beq.n	800396a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003952:	d10a      	bne.n	800396a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  }
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b098      	sub	sp, #96	@ 0x60
 800399c:	af02      	add	r7, sp, #8
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039a8:	f7fc fefe 	bl	80007a8 <HAL_GetTick>
 80039ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d12e      	bne.n	8003a1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c4:	2200      	movs	r2, #0
 80039c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f88c 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d021      	beq.n	8003a1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039de:	e853 3f00 	ldrex	r3, [r3]
 80039e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e6      	bne.n	80039d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e062      	b.n	8003ae0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d149      	bne.n	8003abc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a30:	2200      	movs	r2, #0
 8003a32:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f856 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d03c      	beq.n	8003abc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	623b      	str	r3, [r7, #32]
   return(result);
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a60:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e6      	bne.n	8003a42 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3308      	adds	r3, #8
 8003a92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a94:	61fa      	str	r2, [r7, #28]
 8003a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	69b9      	ldr	r1, [r7, #24]
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e5      	bne.n	8003a74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e011      	b.n	8003ae0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3758      	adds	r7, #88	@ 0x58
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af8:	e04f      	b.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d04b      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fc fe51 	bl	80007a8 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e04e      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d037      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b80      	cmp	r3, #128	@ 0x80
 8003b2e:	d034      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b40      	cmp	r3, #64	@ 0x40
 8003b34:	d031      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d110      	bne.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f838 	bl	8003bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2208      	movs	r2, #8
 8003b56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e029      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b74:	d111      	bne.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f81e 	bl	8003bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e00f      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d0a0      	beq.n	8003afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b095      	sub	sp, #84	@ 0x54
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e6      	bne.n	8003bca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3308      	adds	r3, #8
 8003c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	e853 3f00 	ldrex	r3, [r3]
 8003c0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c24:	e841 2300 	strex	r3, r2, [r1]
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e5      	bne.n	8003bfc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d118      	bne.n	8003c6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f023 0310 	bic.w	r3, r3, #16
 8003c4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6979      	ldr	r1, [r7, #20]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	613b      	str	r3, [r7, #16]
   return(result);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e6      	bne.n	8003c38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c7e:	bf00      	nop
 8003c80:	3754      	adds	r7, #84	@ 0x54
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <memset>:
 8003c8a:	4402      	add	r2, r0
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d100      	bne.n	8003c94 <memset+0xa>
 8003c92:	4770      	bx	lr
 8003c94:	f803 1b01 	strb.w	r1, [r3], #1
 8003c98:	e7f9      	b.n	8003c8e <memset+0x4>
	...

08003c9c <__libc_init_array>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8003cd4 <__libc_init_array+0x38>)
 8003ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8003cd8 <__libc_init_array+0x3c>)
 8003ca2:	1b64      	subs	r4, r4, r5
 8003ca4:	10a4      	asrs	r4, r4, #2
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	42a6      	cmp	r6, r4
 8003caa:	d109      	bne.n	8003cc0 <__libc_init_array+0x24>
 8003cac:	4d0b      	ldr	r5, [pc, #44]	@ (8003cdc <__libc_init_array+0x40>)
 8003cae:	4c0c      	ldr	r4, [pc, #48]	@ (8003ce0 <__libc_init_array+0x44>)
 8003cb0:	f000 f818 	bl	8003ce4 <_init>
 8003cb4:	1b64      	subs	r4, r4, r5
 8003cb6:	10a4      	asrs	r4, r4, #2
 8003cb8:	2600      	movs	r6, #0
 8003cba:	42a6      	cmp	r6, r4
 8003cbc:	d105      	bne.n	8003cca <__libc_init_array+0x2e>
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc4:	4798      	blx	r3
 8003cc6:	3601      	adds	r6, #1
 8003cc8:	e7ee      	b.n	8003ca8 <__libc_init_array+0xc>
 8003cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cce:	4798      	blx	r3
 8003cd0:	3601      	adds	r6, #1
 8003cd2:	e7f2      	b.n	8003cba <__libc_init_array+0x1e>
 8003cd4:	08003d34 	.word	0x08003d34
 8003cd8:	08003d34 	.word	0x08003d34
 8003cdc:	08003d34 	.word	0x08003d34
 8003ce0:	08003d38 	.word	0x08003d38

08003ce4 <_init>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	bf00      	nop
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr

08003cf0 <_fini>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	bf00      	nop
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr
