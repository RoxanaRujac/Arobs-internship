
led_intensity_with_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d88  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003f1c  08003f1c  00004f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f4c  08003f4c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003f4c  08003f4c  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003f4c  08003f4c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f4c  08003f4c  00004f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f50  08003f50  00004f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003f54  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000bc  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afe5  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019a5  00000000  00000000  00010021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  000119c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a5  00000000  00000000  000124e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020159  00000000  00000000  00012d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e955  00000000  00000000  00032ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca8b3  00000000  00000000  0004183b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c0ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e84  00000000  00000000  0010c134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0010efb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003f04 	.word	0x08003f04

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003f04 	.word	0x08003f04

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa7a 	bl	80006d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f80e 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f93a 	bl	8000458 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001e4:	f000 f86e 	bl	80002c4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80001e8:	f000 f8dc 	bl	80003a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001ec:	2100      	movs	r1, #0
 80001ee:	4802      	ldr	r0, [pc, #8]	@ (80001f8 <main+0x24>)
 80001f0:	f002 ffda 	bl	80031a8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f4:	bf00      	nop
 80001f6:	e7fd      	b.n	80001f4 <main+0x20>
 80001f8:	20000078 	.word	0x20000078

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b0a6      	sub	sp, #152	@ 0x98
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000206:	2228      	movs	r2, #40	@ 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f003 fe4e 	bl	8003eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	605a      	str	r2, [r3, #4]
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	60da      	str	r2, [r3, #12]
 800021e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2258      	movs	r2, #88	@ 0x58
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f003 fe40 	bl	8003eac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022c:	2302      	movs	r3, #2
 800022e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000230:	2301      	movs	r3, #1
 8000232:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000234:	2310      	movs	r3, #16
 8000236:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000240:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000244:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000248:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800024c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fb4a 	bl	80018f4 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000266:	f000 f90f 	bl	8000488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800027a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000280:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000284:	2102      	movs	r1, #2
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fb58 	bl	800293c <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000292:	f000 f8f9 	bl	8000488 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2;
 8000296:	4b0a      	ldr	r3, [pc, #40]	@ (80002c0 <SystemClock_Config+0xc4>)
 8000298:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800029a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800029e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80002a0:	2300      	movs	r3, #0
 80002a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 fd0a 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002b2:	f000 f8e9 	bl	8000488 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3798      	adds	r7, #152	@ 0x98
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	00100080 	.word	0x00100080

080002c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b08a      	sub	sp, #40	@ 0x28
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002ca:	f107 031c 	add.w	r3, r7, #28
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
 80002e0:	60da      	str	r2, [r3, #12]
 80002e2:	611a      	str	r2, [r3, #16]
 80002e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002e6:	4b2e      	ldr	r3, [pc, #184]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 80002e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002ee:	4b2c      	ldr	r3, [pc, #176]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002f4:	4b2a      	ldr	r3, [pc, #168]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fa:	4b29      	ldr	r3, [pc, #164]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000300:	4b27      	ldr	r3, [pc, #156]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 8000302:	2200      	movs	r2, #0
 8000304:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000306:	4b26      	ldr	r3, [pc, #152]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 8000308:	2200      	movs	r2, #0
 800030a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800030e:	4b24      	ldr	r3, [pc, #144]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 8000310:	2200      	movs	r2, #0
 8000312:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000314:	4b22      	ldr	r3, [pc, #136]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 8000316:	2201      	movs	r2, #1
 8000318:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031a:	4b21      	ldr	r3, [pc, #132]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000320:	4b1f      	ldr	r3, [pc, #124]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 8000322:	2201      	movs	r2, #1
 8000324:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000326:	4b1e      	ldr	r3, [pc, #120]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 8000328:	2200      	movs	r2, #0
 800032a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800032e:	4b1c      	ldr	r3, [pc, #112]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 8000330:	2204      	movs	r2, #4
 8000332:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000334:	4b1a      	ldr	r3, [pc, #104]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 8000336:	2200      	movs	r2, #0
 8000338:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800033a:	4b19      	ldr	r3, [pc, #100]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 800033c:	2200      	movs	r2, #0
 800033e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000340:	4817      	ldr	r0, [pc, #92]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 8000342:	f000 fa2b 	bl	800079c <HAL_ADC_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800034c:	f000 f89c 	bl	8000488 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000350:	2300      	movs	r3, #0
 8000352:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000354:	f107 031c 	add.w	r3, r7, #28
 8000358:	4619      	mov	r1, r3
 800035a:	4811      	ldr	r0, [pc, #68]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 800035c:	f000 ff02 	bl	8001164 <HAL_ADCEx_MultiModeConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000366:	f000 f88f 	bl	8000488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800036a:	2301      	movs	r3, #1
 800036c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800036e:	2301      	movs	r3, #1
 8000370:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000372:	2301      	movs	r3, #1
 8000374:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4619      	mov	r1, r3
 8000386:	4806      	ldr	r0, [pc, #24]	@ (80003a0 <MX_ADC1_Init+0xdc>)
 8000388:	f000 fc02 	bl	8000b90 <HAL_ADC_ConfigChannel>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000392:	f000 f879 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	3728      	adds	r7, #40	@ 0x28
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000028 	.word	0x20000028

080003a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08a      	sub	sp, #40	@ 0x28
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003aa:	f107 031c 	add.w	r3, r7, #28
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b6:	463b      	mov	r3, r7
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]
 80003c4:	615a      	str	r2, [r3, #20]
 80003c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003c8:	4b22      	ldr	r3, [pc, #136]	@ (8000454 <MX_TIM2_Init+0xb0>)
 80003ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80003d0:	4b20      	ldr	r3, [pc, #128]	@ (8000454 <MX_TIM2_Init+0xb0>)
 80003d2:	2247      	movs	r2, #71	@ 0x47
 80003d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000454 <MX_TIM2_Init+0xb0>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80003dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000454 <MX_TIM2_Init+0xb0>)
 80003de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <MX_TIM2_Init+0xb0>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000454 <MX_TIM2_Init+0xb0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003f0:	4818      	ldr	r0, [pc, #96]	@ (8000454 <MX_TIM2_Init+0xb0>)
 80003f2:	f002 fe81 	bl	80030f8 <HAL_TIM_PWM_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80003fc:	f000 f844 	bl	8000488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000400:	2300      	movs	r3, #0
 8000402:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000404:	2300      	movs	r3, #0
 8000406:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000408:	f107 031c 	add.w	r3, r7, #28
 800040c:	4619      	mov	r1, r3
 800040e:	4811      	ldr	r0, [pc, #68]	@ (8000454 <MX_TIM2_Init+0xb0>)
 8000410:	f003 fcc0 	bl	8003d94 <HAL_TIMEx_MasterConfigSynchronization>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800041a:	f000 f835 	bl	8000488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800041e:	2360      	movs	r3, #96	@ 0x60
 8000420:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800042a:	2300      	movs	r3, #0
 800042c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800042e:	463b      	mov	r3, r7
 8000430:	2200      	movs	r2, #0
 8000432:	4619      	mov	r1, r3
 8000434:	4807      	ldr	r0, [pc, #28]	@ (8000454 <MX_TIM2_Init+0xb0>)
 8000436:	f002 ffc3 	bl	80033c0 <HAL_TIM_PWM_ConfigChannel>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000440:	f000 f822 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000444:	4803      	ldr	r0, [pc, #12]	@ (8000454 <MX_TIM2_Init+0xb0>)
 8000446:	f000 f8a3 	bl	8000590 <HAL_TIM_MspPostInit>

}
 800044a:	bf00      	nop
 800044c:	3728      	adds	r7, #40	@ 0x28
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000078 	.word	0x20000078

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045e:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <MX_GPIO_Init+0x2c>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a08      	ldr	r2, [pc, #32]	@ (8000484 <MX_GPIO_Init+0x2c>)
 8000464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <MX_GPIO_Init+0x2c>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <Error_Handler+0x8>

08000494 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <HAL_MspInit+0x44>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a0e      	ldr	r2, [pc, #56]	@ (80004d8 <HAL_MspInit+0x44>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <HAL_MspInit+0x44>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <HAL_MspInit+0x44>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a08      	ldr	r2, [pc, #32]	@ (80004d8 <HAL_MspInit+0x44>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <HAL_MspInit+0x44>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004ca:	2007      	movs	r0, #7
 80004cc:	f001 f854 	bl	8001578 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40021000 	.word	0x40021000

080004dc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	@ 0x28
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80004fc:	d124      	bne.n	8000548 <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004fe:	4b14      	ldr	r3, [pc, #80]	@ (8000550 <HAL_ADC_MspInit+0x74>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a13      	ldr	r2, [pc, #76]	@ (8000550 <HAL_ADC_MspInit+0x74>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <HAL_ADC_MspInit+0x74>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000512:	613b      	str	r3, [r7, #16]
 8000514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <HAL_ADC_MspInit+0x74>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a0d      	ldr	r2, [pc, #52]	@ (8000550 <HAL_ADC_MspInit+0x74>)
 800051c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <HAL_ADC_MspInit+0x74>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800052e:	2303      	movs	r3, #3
 8000530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000532:	2303      	movs	r3, #3
 8000534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	4619      	mov	r1, r3
 8000540:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000544:	f001 f84c 	bl	80015e0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000548:	bf00      	nop
 800054a:	3728      	adds	r7, #40	@ 0x28
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40021000 	.word	0x40021000

08000554 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000564:	d10b      	bne.n	800057e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000566:	4b09      	ldr	r3, [pc, #36]	@ (800058c <HAL_TIM_PWM_MspInit+0x38>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	4a08      	ldr	r2, [pc, #32]	@ (800058c <HAL_TIM_PWM_MspInit+0x38>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	61d3      	str	r3, [r2, #28]
 8000572:	4b06      	ldr	r3, [pc, #24]	@ (800058c <HAL_TIM_PWM_MspInit+0x38>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000

08000590 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005b0:	d11c      	bne.n	80005ec <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b10      	ldr	r3, [pc, #64]	@ (80005f4 <HAL_TIM_MspPostInit+0x64>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a0f      	ldr	r2, [pc, #60]	@ (80005f4 <HAL_TIM_MspPostInit+0x64>)
 80005b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b0d      	ldr	r3, [pc, #52]	@ (80005f4 <HAL_TIM_MspPostInit+0x64>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005ca:	2320      	movs	r3, #32
 80005cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005da:	2301      	movs	r3, #1
 80005dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4619      	mov	r1, r3
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e8:	f000 fffa 	bl	80015e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40021000 	.word	0x40021000

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <NMI_Handler+0x4>

08000600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <HardFault_Handler+0x4>

08000608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <MemManage_Handler+0x4>

08000610 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <BusFault_Handler+0x4>

08000618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <UsageFault_Handler+0x4>

08000620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064e:	f000 f885 	bl	800075c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <SystemInit+0x20>)
 800065e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000662:	4a05      	ldr	r2, [pc, #20]	@ (8000678 <SystemInit+0x20>)
 8000664:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000668:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800067c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000680:	f7ff ffea 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000684:	480c      	ldr	r0, [pc, #48]	@ (80006b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000686:	490d      	ldr	r1, [pc, #52]	@ (80006bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000688:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <LoopForever+0xe>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a0a      	ldr	r2, [pc, #40]	@ (80006c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800069c:	4c0a      	ldr	r4, [pc, #40]	@ (80006c8 <LoopForever+0x16>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006aa:	f003 fc07 	bl	8003ebc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ae:	f7ff fd91 	bl	80001d4 <main>

080006b2 <LoopForever>:

LoopForever:
    b LoopForever
 80006b2:	e7fe      	b.n	80006b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006c0:	08003f54 	.word	0x08003f54
  ldr r2, =_sbss
 80006c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c8:	200000c8 	.word	0x200000c8

080006cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC1_2_IRQHandler>
	...

080006d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d4:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <HAL_Init+0x28>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a07      	ldr	r2, [pc, #28]	@ (80006f8 <HAL_Init+0x28>)
 80006da:	f043 0310 	orr.w	r3, r3, #16
 80006de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e0:	2003      	movs	r0, #3
 80006e2:	f000 ff49 	bl	8001578 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 f808 	bl	80006fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ec:	f7ff fed2 	bl	8000494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40022000 	.word	0x40022000

080006fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <HAL_InitTick+0x54>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <HAL_InitTick+0x58>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000712:	fbb3 f3f1 	udiv	r3, r3, r1
 8000716:	fbb2 f3f3 	udiv	r3, r2, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f000 ff53 	bl	80015c6 <HAL_SYSTICK_Config>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e00e      	b.n	8000748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b0f      	cmp	r3, #15
 800072e:	d80a      	bhi.n	8000746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000730:	2200      	movs	r2, #0
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f000 ff29 	bl	800158e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800073c:	4a06      	ldr	r2, [pc, #24]	@ (8000758 <HAL_InitTick+0x5c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000742:	2300      	movs	r3, #0
 8000744:	e000      	b.n	8000748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000000 	.word	0x20000000
 8000754:	20000008 	.word	0x20000008
 8000758:	20000004 	.word	0x20000004

0800075c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_IncTick+0x20>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <HAL_IncTick+0x24>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4413      	add	r3, r2
 800076c:	4a04      	ldr	r2, [pc, #16]	@ (8000780 <HAL_IncTick+0x24>)
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000008 	.word	0x20000008
 8000780:	200000c4 	.word	0x200000c4

08000784 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return uwTick;  
 8000788:	4b03      	ldr	r3, [pc, #12]	@ (8000798 <HAL_GetTick+0x14>)
 800078a:	681b      	ldr	r3, [r3, #0]
}
 800078c:	4618      	mov	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	200000c4 	.word	0x200000c4

0800079c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b09a      	sub	sp, #104	@ 0x68
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80007aa:	2300      	movs	r3, #0
 80007ac:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d101      	bne.n	80007bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80007b8:	2301      	movs	r3, #1
 80007ba:	e1e3      	b.n	8000b84 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	691b      	ldr	r3, [r3, #16]
 80007c0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d176      	bne.n	80008bc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d152      	bne.n	800087c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff fe73 	bl	80004dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000800:	2b00      	cmp	r3, #0
 8000802:	d13b      	bne.n	800087c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f000 fd9f 	bl	8001348 <ADC_Disable>
 800080a:	4603      	mov	r3, r0
 800080c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000814:	f003 0310 	and.w	r3, r3, #16
 8000818:	2b00      	cmp	r3, #0
 800081a:	d12f      	bne.n	800087c <HAL_ADC_Init+0xe0>
 800081c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000820:	2b00      	cmp	r3, #0
 8000822:	d12b      	bne.n	800087c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000828:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800082c:	f023 0302 	bic.w	r3, r3, #2
 8000830:	f043 0202 	orr.w	r2, r3, #2
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000846:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000856:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000858:	4b92      	ldr	r3, [pc, #584]	@ (8000aa4 <HAL_ADC_Init+0x308>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a92      	ldr	r2, [pc, #584]	@ (8000aa8 <HAL_ADC_Init+0x30c>)
 800085e:	fba2 2303 	umull	r2, r3, r2, r3
 8000862:	0c9a      	lsrs	r2, r3, #18
 8000864:	4613      	mov	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800086e:	e002      	b.n	8000876 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	3b01      	subs	r3, #1
 8000874:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1f9      	bne.n	8000870 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000886:	2b00      	cmp	r3, #0
 8000888:	d007      	beq.n	800089a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000898:	d110      	bne.n	80008bc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	f023 0312 	bic.w	r3, r3, #18
 80008a2:	f043 0210 	orr.w	r2, r3, #16
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ae:	f043 0201 	orr.w	r2, r3, #1
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c0:	f003 0310 	and.w	r3, r3, #16
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	f040 8150 	bne.w	8000b6a <HAL_ADC_Init+0x3ce>
 80008ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f040 814b 	bne.w	8000b6a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f040 8143 	bne.w	8000b6a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80008ec:	f043 0202 	orr.w	r2, r3, #2
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80008fc:	d004      	beq.n	8000908 <HAL_ADC_Init+0x16c>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a6a      	ldr	r2, [pc, #424]	@ (8000aac <HAL_ADC_Init+0x310>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d101      	bne.n	800090c <HAL_ADC_Init+0x170>
 8000908:	4b69      	ldr	r3, [pc, #420]	@ (8000ab0 <HAL_ADC_Init+0x314>)
 800090a:	e000      	b.n	800090e <HAL_ADC_Init+0x172>
 800090c:	4b69      	ldr	r3, [pc, #420]	@ (8000ab4 <HAL_ADC_Init+0x318>)
 800090e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000918:	d102      	bne.n	8000920 <HAL_ADC_Init+0x184>
 800091a:	4b64      	ldr	r3, [pc, #400]	@ (8000aac <HAL_ADC_Init+0x310>)
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	e01a      	b.n	8000956 <HAL_ADC_Init+0x1ba>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a61      	ldr	r2, [pc, #388]	@ (8000aac <HAL_ADC_Init+0x310>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d103      	bne.n	8000932 <HAL_ADC_Init+0x196>
 800092a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	e011      	b.n	8000956 <HAL_ADC_Init+0x1ba>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a60      	ldr	r2, [pc, #384]	@ (8000ab8 <HAL_ADC_Init+0x31c>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d102      	bne.n	8000942 <HAL_ADC_Init+0x1a6>
 800093c:	4b5f      	ldr	r3, [pc, #380]	@ (8000abc <HAL_ADC_Init+0x320>)
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	e009      	b.n	8000956 <HAL_ADC_Init+0x1ba>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a5d      	ldr	r2, [pc, #372]	@ (8000abc <HAL_ADC_Init+0x320>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d102      	bne.n	8000952 <HAL_ADC_Init+0x1b6>
 800094c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ab8 <HAL_ADC_Init+0x31c>)
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	e001      	b.n	8000956 <HAL_ADC_Init+0x1ba>
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	f003 0303 	and.w	r3, r3, #3
 8000960:	2b01      	cmp	r3, #1
 8000962:	d108      	bne.n	8000976 <HAL_ADC_Init+0x1da>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	2b01      	cmp	r3, #1
 8000970:	d101      	bne.n	8000976 <HAL_ADC_Init+0x1da>
 8000972:	2301      	movs	r3, #1
 8000974:	e000      	b.n	8000978 <HAL_ADC_Init+0x1dc>
 8000976:	2300      	movs	r3, #0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d11c      	bne.n	80009b6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800097c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800097e:	2b00      	cmp	r3, #0
 8000980:	d010      	beq.n	80009a4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	f003 0303 	and.w	r3, r3, #3
 800098a:	2b01      	cmp	r3, #1
 800098c:	d107      	bne.n	800099e <HAL_ADC_Init+0x202>
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	2b01      	cmp	r3, #1
 8000998:	d101      	bne.n	800099e <HAL_ADC_Init+0x202>
 800099a:	2301      	movs	r3, #1
 800099c:	e000      	b.n	80009a0 <HAL_ADC_Init+0x204>
 800099e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d108      	bne.n	80009b6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80009a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	431a      	orrs	r2, r3
 80009b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009b4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	7e5b      	ldrb	r3, [r3, #25]
 80009ba:	035b      	lsls	r3, r3, #13
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80009c0:	2a01      	cmp	r2, #1
 80009c2:	d002      	beq.n	80009ca <HAL_ADC_Init+0x22e>
 80009c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009c8:	e000      	b.n	80009cc <HAL_ADC_Init+0x230>
 80009ca:	2200      	movs	r2, #0
 80009cc:	431a      	orrs	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	431a      	orrs	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	4313      	orrs	r3, r2
 80009da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80009dc:	4313      	orrs	r3, r2
 80009de:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d11b      	bne.n	8000a22 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	7e5b      	ldrb	r3, [r3, #25]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d109      	bne.n	8000a06 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f6:	3b01      	subs	r3, #1
 80009f8:	045a      	lsls	r2, r3, #17
 80009fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80009fc:	4313      	orrs	r3, r2
 80009fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a02:	663b      	str	r3, [r7, #96]	@ 0x60
 8000a04:	e00d      	b.n	8000a22 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000a0e:	f043 0220 	orr.w	r2, r3, #32
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	f043 0201 	orr.w	r2, r3, #1
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d054      	beq.n	8000ad4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a22      	ldr	r2, [pc, #136]	@ (8000ab8 <HAL_ADC_Init+0x31c>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d004      	beq.n	8000a3e <HAL_ADC_Init+0x2a2>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a20      	ldr	r2, [pc, #128]	@ (8000abc <HAL_ADC_Init+0x320>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d140      	bne.n	8000ac0 <HAL_ADC_Init+0x324>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a42:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000a46:	d02a      	beq.n	8000a9e <HAL_ADC_Init+0x302>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a50:	d022      	beq.n	8000a98 <HAL_ADC_Init+0x2fc>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a56:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000a5a:	d01a      	beq.n	8000a92 <HAL_ADC_Init+0x2f6>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a60:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000a64:	d012      	beq.n	8000a8c <HAL_ADC_Init+0x2f0>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a6a:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000a6e:	d00a      	beq.n	8000a86 <HAL_ADC_Init+0x2ea>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a74:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000a78:	d002      	beq.n	8000a80 <HAL_ADC_Init+0x2e4>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a7e:	e023      	b.n	8000ac8 <HAL_ADC_Init+0x32c>
 8000a80:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000a84:	e020      	b.n	8000ac8 <HAL_ADC_Init+0x32c>
 8000a86:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a8a:	e01d      	b.n	8000ac8 <HAL_ADC_Init+0x32c>
 8000a8c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000a90:	e01a      	b.n	8000ac8 <HAL_ADC_Init+0x32c>
 8000a92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a96:	e017      	b.n	8000ac8 <HAL_ADC_Init+0x32c>
 8000a98:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000a9c:	e014      	b.n	8000ac8 <HAL_ADC_Init+0x32c>
 8000a9e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000aa2:	e011      	b.n	8000ac8 <HAL_ADC_Init+0x32c>
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	431bde83 	.word	0x431bde83
 8000aac:	50000100 	.word	0x50000100
 8000ab0:	50000300 	.word	0x50000300
 8000ab4:	50000700 	.word	0x50000700
 8000ab8:	50000400 	.word	0x50000400
 8000abc:	50000500 	.word	0x50000500
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ac4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000acc:	4313      	orrs	r3, r2
 8000ace:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	f003 030c 	and.w	r3, r3, #12
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d114      	bne.n	8000b0c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	6812      	ldr	r2, [r2, #0]
 8000aec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000af0:	f023 0302 	bic.w	r3, r3, #2
 8000af4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7e1b      	ldrb	r3, [r3, #24]
 8000afa:	039a      	lsls	r2, r3, #14
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	4313      	orrs	r3, r2
 8000b06:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	68da      	ldr	r2, [r3, #12]
 8000b12:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <HAL_ADC_Init+0x3f0>)
 8000b14:	4013      	ands	r3, r2
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	6812      	ldr	r2, [r2, #0]
 8000b1a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000b1c:	430b      	orrs	r3, r1
 8000b1e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	691b      	ldr	r3, [r3, #16]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d10c      	bne.n	8000b42 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f023 010f 	bic.w	r1, r3, #15
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	1e5a      	subs	r2, r3, #1
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b40:	e007      	b.n	8000b52 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f022 020f 	bic.w	r2, r2, #15
 8000b50:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5c:	f023 0303 	bic.w	r3, r3, #3
 8000b60:	f043 0201 	orr.w	r2, r3, #1
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b68:	e00a      	b.n	8000b80 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	f023 0312 	bic.w	r3, r3, #18
 8000b72:	f043 0210 	orr.w	r2, r3, #16
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000b80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3768      	adds	r7, #104	@ 0x68
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	fff0c007 	.word	0xfff0c007

08000b90 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b09b      	sub	sp, #108	@ 0x6c
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d101      	bne.n	8000bb2 <HAL_ADC_ConfigChannel+0x22>
 8000bae:	2302      	movs	r3, #2
 8000bb0:	e2c8      	b.n	8001144 <HAL_ADC_ConfigChannel+0x5b4>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f040 82ac 	bne.w	8001122 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d81c      	bhi.n	8000c0c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	461a      	mov	r2, r3
 8000be6:	231f      	movs	r3, #31
 8000be8:	4093      	lsls	r3, r2
 8000bea:	43db      	mvns	r3, r3
 8000bec:	4019      	ands	r1, r3
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	fa00 f203 	lsl.w	r2, r0, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	430a      	orrs	r2, r1
 8000c08:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c0a:	e063      	b.n	8000cd4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b09      	cmp	r3, #9
 8000c12:	d81e      	bhi.n	8000c52 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	4413      	add	r3, r2
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	3b1e      	subs	r3, #30
 8000c28:	221f      	movs	r2, #31
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	4019      	ands	r1, r3
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	6818      	ldr	r0, [r3, #0]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	3b1e      	subs	r3, #30
 8000c44:	fa00 f203 	lsl.w	r2, r0, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c50:	e040      	b.n	8000cd4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b0e      	cmp	r3, #14
 8000c58:	d81e      	bhi.n	8000c98 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	3b3c      	subs	r3, #60	@ 0x3c
 8000c6e:	221f      	movs	r2, #31
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	4019      	ands	r1, r3
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	6818      	ldr	r0, [r3, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	3b3c      	subs	r3, #60	@ 0x3c
 8000c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c96:	e01d      	b.n	8000cd4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	4413      	add	r3, r2
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	3b5a      	subs	r3, #90	@ 0x5a
 8000cac:	221f      	movs	r2, #31
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	4019      	ands	r1, r3
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	6818      	ldr	r0, [r3, #0]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	3b5a      	subs	r3, #90	@ 0x5a
 8000cc8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f003 030c 	and.w	r3, r3, #12
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f040 80e5 	bne.w	8000eae <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b09      	cmp	r3, #9
 8000cea:	d91c      	bls.n	8000d26 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6999      	ldr	r1, [r3, #24]
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	3b1e      	subs	r3, #30
 8000cfe:	2207      	movs	r2, #7
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	4019      	ands	r1, r3
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	6898      	ldr	r0, [r3, #8]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	3b1e      	subs	r3, #30
 8000d18:	fa00 f203 	lsl.w	r2, r0, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	430a      	orrs	r2, r1
 8000d22:	619a      	str	r2, [r3, #24]
 8000d24:	e019      	b.n	8000d5a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6959      	ldr	r1, [r3, #20]
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4613      	mov	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	2207      	movs	r2, #7
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	4019      	ands	r1, r3
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	6898      	ldr	r0, [r3, #8]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4413      	add	r3, r2
 8000d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	695a      	ldr	r2, [r3, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	08db      	lsrs	r3, r3, #3
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d84f      	bhi.n	8000e1c <HAL_ADC_ConfigChannel+0x28c>
 8000d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8000d84 <HAL_ADC_ConfigChannel+0x1f4>)
 8000d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d82:	bf00      	nop
 8000d84:	08000d95 	.word	0x08000d95
 8000d88:	08000db7 	.word	0x08000db7
 8000d8c:	08000dd9 	.word	0x08000dd9
 8000d90:	08000dfb 	.word	0x08000dfb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d9a:	4b99      	ldr	r3, [pc, #612]	@ (8001000 <HAL_ADC_ConfigChannel+0x470>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	6812      	ldr	r2, [r2, #0]
 8000da2:	0691      	lsls	r1, r2, #26
 8000da4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000da6:	430a      	orrs	r2, r1
 8000da8:	431a      	orrs	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000db2:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000db4:	e07b      	b.n	8000eae <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000dbc:	4b90      	ldr	r3, [pc, #576]	@ (8001000 <HAL_ADC_ConfigChannel+0x470>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	6812      	ldr	r2, [r2, #0]
 8000dc4:	0691      	lsls	r1, r2, #26
 8000dc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000dd4:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000dd6:	e06a      	b.n	8000eae <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000dde:	4b88      	ldr	r3, [pc, #544]	@ (8001000 <HAL_ADC_ConfigChannel+0x470>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	683a      	ldr	r2, [r7, #0]
 8000de4:	6812      	ldr	r2, [r2, #0]
 8000de6:	0691      	lsls	r1, r2, #26
 8000de8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000dea:	430a      	orrs	r2, r1
 8000dec:	431a      	orrs	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000df6:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000df8:	e059      	b.n	8000eae <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000e00:	4b7f      	ldr	r3, [pc, #508]	@ (8001000 <HAL_ADC_ConfigChannel+0x470>)
 8000e02:	4013      	ands	r3, r2
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	6812      	ldr	r2, [r2, #0]
 8000e08:	0691      	lsls	r1, r2, #26
 8000e0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000e18:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e1a:	e048      	b.n	8000eae <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	069b      	lsls	r3, r3, #26
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d107      	bne.n	8000e40 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000e3e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000e46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	069b      	lsls	r3, r3, #26
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d107      	bne.n	8000e64 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000e62:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	069b      	lsls	r3, r3, #26
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d107      	bne.n	8000e88 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000e86:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000e8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	069b      	lsls	r3, r3, #26
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d107      	bne.n	8000eac <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000eaa:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8000eac:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d108      	bne.n	8000ece <HAL_ADC_ConfigChannel+0x33e>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d101      	bne.n	8000ece <HAL_ADC_ConfigChannel+0x33e>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e000      	b.n	8000ed0 <HAL_ADC_ConfigChannel+0x340>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f040 8131 	bne.w	8001138 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d00f      	beq.n	8000efe <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2201      	movs	r2, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43da      	mvns	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	400a      	ands	r2, r1
 8000ef8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8000efc:	e049      	b.n	8000f92 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b09      	cmp	r3, #9
 8000f1e:	d91c      	bls.n	8000f5a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6999      	ldr	r1, [r3, #24]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	3b1b      	subs	r3, #27
 8000f32:	2207      	movs	r2, #7
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4019      	ands	r1, r3
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	6898      	ldr	r0, [r3, #8]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4613      	mov	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4413      	add	r3, r2
 8000f4a:	3b1b      	subs	r3, #27
 8000f4c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	619a      	str	r2, [r3, #24]
 8000f58:	e01b      	b.n	8000f92 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6959      	ldr	r1, [r3, #20]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	4613      	mov	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	4019      	ands	r1, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	6898      	ldr	r0, [r3, #8]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	fa00 f203 	lsl.w	r2, r0, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f9a:	d004      	beq.n	8000fa6 <HAL_ADC_ConfigChannel+0x416>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a18      	ldr	r2, [pc, #96]	@ (8001004 <HAL_ADC_ConfigChannel+0x474>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_ADC_ConfigChannel+0x41a>
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <HAL_ADC_ConfigChannel+0x478>)
 8000fa8:	e000      	b.n	8000fac <HAL_ADC_ConfigChannel+0x41c>
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <HAL_ADC_ConfigChannel+0x47c>)
 8000fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b10      	cmp	r3, #16
 8000fb4:	d105      	bne.n	8000fc2 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000fb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d015      	beq.n	8000fee <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000fc6:	2b11      	cmp	r3, #17
 8000fc8:	d105      	bne.n	8000fd6 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000fca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00b      	beq.n	8000fee <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000fda:	2b12      	cmp	r3, #18
 8000fdc:	f040 80ac 	bne.w	8001138 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000fe0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f040 80a5 	bne.w	8001138 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ff6:	d10b      	bne.n	8001010 <HAL_ADC_ConfigChannel+0x480>
 8000ff8:	4b02      	ldr	r3, [pc, #8]	@ (8001004 <HAL_ADC_ConfigChannel+0x474>)
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e023      	b.n	8001046 <HAL_ADC_ConfigChannel+0x4b6>
 8000ffe:	bf00      	nop
 8001000:	83fff000 	.word	0x83fff000
 8001004:	50000100 	.word	0x50000100
 8001008:	50000300 	.word	0x50000300
 800100c:	50000700 	.word	0x50000700
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a4e      	ldr	r2, [pc, #312]	@ (8001150 <HAL_ADC_ConfigChannel+0x5c0>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d103      	bne.n	8001022 <HAL_ADC_ConfigChannel+0x492>
 800101a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	e011      	b.n	8001046 <HAL_ADC_ConfigChannel+0x4b6>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a4b      	ldr	r2, [pc, #300]	@ (8001154 <HAL_ADC_ConfigChannel+0x5c4>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d102      	bne.n	8001032 <HAL_ADC_ConfigChannel+0x4a2>
 800102c:	4b4a      	ldr	r3, [pc, #296]	@ (8001158 <HAL_ADC_ConfigChannel+0x5c8>)
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e009      	b.n	8001046 <HAL_ADC_ConfigChannel+0x4b6>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a48      	ldr	r2, [pc, #288]	@ (8001158 <HAL_ADC_ConfigChannel+0x5c8>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d102      	bne.n	8001042 <HAL_ADC_ConfigChannel+0x4b2>
 800103c:	4b45      	ldr	r3, [pc, #276]	@ (8001154 <HAL_ADC_ConfigChannel+0x5c4>)
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e001      	b.n	8001046 <HAL_ADC_ConfigChannel+0x4b6>
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d108      	bne.n	8001066 <HAL_ADC_ConfigChannel+0x4d6>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b01      	cmp	r3, #1
 8001060:	d101      	bne.n	8001066 <HAL_ADC_ConfigChannel+0x4d6>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <HAL_ADC_ConfigChannel+0x4d8>
 8001066:	2300      	movs	r3, #0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d150      	bne.n	800110e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800106c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800106e:	2b00      	cmp	r3, #0
 8001070:	d010      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b01      	cmp	r3, #1
 800107c:	d107      	bne.n	800108e <HAL_ADC_ConfigChannel+0x4fe>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b01      	cmp	r3, #1
 8001088:	d101      	bne.n	800108e <HAL_ADC_ConfigChannel+0x4fe>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <HAL_ADC_ConfigChannel+0x500>
 800108e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001090:	2b00      	cmp	r3, #0
 8001092:	d13c      	bne.n	800110e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b10      	cmp	r3, #16
 800109a:	d11d      	bne.n	80010d8 <HAL_ADC_ConfigChannel+0x548>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010a4:	d118      	bne.n	80010d8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80010a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80010ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010b0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010b2:	4b2a      	ldr	r3, [pc, #168]	@ (800115c <HAL_ADC_ConfigChannel+0x5cc>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001160 <HAL_ADC_ConfigChannel+0x5d0>)
 80010b8:	fba2 2303 	umull	r2, r3, r2, r3
 80010bc:	0c9a      	lsrs	r2, r3, #18
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010c8:	e002      	b.n	80010d0 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f9      	bne.n	80010ca <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80010d6:	e02e      	b.n	8001136 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b11      	cmp	r3, #17
 80010de:	d10b      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x568>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010e8:	d106      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80010ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80010f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010f4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80010f6:	e01e      	b.n	8001136 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b12      	cmp	r3, #18
 80010fe:	d11a      	bne.n	8001136 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001100:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001108:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800110a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800110c:	e013      	b.n	8001136 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f043 0220 	orr.w	r2, r3, #32
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001120:	e00a      	b.n	8001138 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	f043 0220 	orr.w	r2, r3, #32
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001134:	e000      	b.n	8001138 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001136:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001140:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001144:	4618      	mov	r0, r3
 8001146:	376c      	adds	r7, #108	@ 0x6c
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	50000100 	.word	0x50000100
 8001154:	50000400 	.word	0x50000400
 8001158:	50000500 	.word	0x50000500
 800115c:	20000000 	.word	0x20000000
 8001160:	431bde83 	.word	0x431bde83

08001164 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001164:	b480      	push	{r7}
 8001166:	b099      	sub	sp, #100	@ 0x64
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800117c:	d102      	bne.n	8001184 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800117e:	4b6d      	ldr	r3, [pc, #436]	@ (8001334 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	e01a      	b.n	80011ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a6a      	ldr	r2, [pc, #424]	@ (8001334 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d103      	bne.n	8001196 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800118e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	e011      	b.n	80011ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a67      	ldr	r2, [pc, #412]	@ (8001338 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d102      	bne.n	80011a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80011a0:	4b66      	ldr	r3, [pc, #408]	@ (800133c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	e009      	b.n	80011ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a64      	ldr	r2, [pc, #400]	@ (800133c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d102      	bne.n	80011b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80011b0:	4b61      	ldr	r3, [pc, #388]	@ (8001338 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	e001      	b.n	80011ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e0b0      	b.n	8001326 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e0a9      	b.n	8001326 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f040 808d 	bne.w	8001304 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f040 8086 	bne.w	8001304 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001200:	d004      	beq.n	800120c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a4b      	ldr	r2, [pc, #300]	@ (8001334 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d101      	bne.n	8001210 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800120c:	4b4c      	ldr	r3, [pc, #304]	@ (8001340 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800120e:	e000      	b.n	8001212 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001210:	4b4c      	ldr	r3, [pc, #304]	@ (8001344 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001212:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d040      	beq.n	800129e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800121c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	6859      	ldr	r1, [r3, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800122e:	035b      	lsls	r3, r3, #13
 8001230:	430b      	orrs	r3, r1
 8001232:	431a      	orrs	r2, r3
 8001234:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001236:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b01      	cmp	r3, #1
 8001244:	d108      	bne.n	8001258 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001258:	2300      	movs	r3, #0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d15c      	bne.n	8001318 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b01      	cmp	r3, #1
 8001268:	d107      	bne.n	800127a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800127a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800127c:	2b00      	cmp	r3, #0
 800127e:	d14b      	bne.n	8001318 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001280:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001288:	f023 030f 	bic.w	r3, r3, #15
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	6811      	ldr	r1, [r2, #0]
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	6892      	ldr	r2, [r2, #8]
 8001294:	430a      	orrs	r2, r1
 8001296:	431a      	orrs	r2, r3
 8001298:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800129a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800129c:	e03c      	b.n	8001318 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800129e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80012a8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d108      	bne.n	80012ca <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80012ca:	2300      	movs	r3, #0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d123      	bne.n	8001318 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d107      	bne.n	80012ec <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80012ec:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d112      	bne.n	8001318 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80012f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80012fa:	f023 030f 	bic.w	r3, r3, #15
 80012fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001300:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001302:	e009      	b.n	8001318 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	f043 0220 	orr.w	r2, r3, #32
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001316:	e000      	b.n	800131a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001318:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001322:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001326:	4618      	mov	r0, r3
 8001328:	3764      	adds	r7, #100	@ 0x64
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	50000100 	.word	0x50000100
 8001338:	50000400 	.word	0x50000400
 800133c:	50000500 	.word	0x50000500
 8001340:	50000300 	.word	0x50000300
 8001344:	50000700 	.word	0x50000700

08001348 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	2b01      	cmp	r3, #1
 8001360:	d108      	bne.n	8001374 <ADC_Disable+0x2c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <ADC_Disable+0x2c>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <ADC_Disable+0x2e>
 8001374:	2300      	movs	r3, #0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d047      	beq.n	800140a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 030d 	and.w	r3, r3, #13
 8001384:	2b01      	cmp	r3, #1
 8001386:	d10f      	bne.n	80013a8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0202 	orr.w	r2, r2, #2
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2203      	movs	r2, #3
 800139e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80013a0:	f7ff f9f0 	bl	8000784 <HAL_GetTick>
 80013a4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80013a6:	e029      	b.n	80013fc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	f043 0210 	orr.w	r2, r3, #16
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b8:	f043 0201 	orr.w	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e023      	b.n	800140c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013c4:	f7ff f9de 	bl	8000784 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d914      	bls.n	80013fc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d10d      	bne.n	80013fc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	f043 0210 	orr.w	r2, r3, #16
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f0:	f043 0201 	orr.w	r2, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e007      	b.n	800140c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b01      	cmp	r3, #1
 8001408:	d0dc      	beq.n	80013c4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	2b00      	cmp	r3, #0
 800148a:	db0a      	blt.n	80014a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	490c      	ldr	r1, [pc, #48]	@ (80014c4 <__NVIC_SetPriority+0x4c>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	0112      	lsls	r2, r2, #4
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	440b      	add	r3, r1
 800149c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a0:	e00a      	b.n	80014b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4908      	ldr	r1, [pc, #32]	@ (80014c8 <__NVIC_SetPriority+0x50>)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	3b04      	subs	r3, #4
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	440b      	add	r3, r1
 80014b6:	761a      	strb	r2, [r3, #24]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	@ 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f1c3 0307 	rsb	r3, r3, #7
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	bf28      	it	cs
 80014ea:	2304      	movcs	r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3304      	adds	r3, #4
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d902      	bls.n	80014fc <NVIC_EncodePriority+0x30>
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3b03      	subs	r3, #3
 80014fa:	e000      	b.n	80014fe <NVIC_EncodePriority+0x32>
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	f04f 32ff 	mov.w	r2, #4294967295
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	43d9      	mvns	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	4313      	orrs	r3, r2
         );
}
 8001526:	4618      	mov	r0, r3
 8001528:	3724      	adds	r7, #36	@ 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001544:	d301      	bcc.n	800154a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001546:	2301      	movs	r3, #1
 8001548:	e00f      	b.n	800156a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154a:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <SysTick_Config+0x40>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001552:	210f      	movs	r1, #15
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f7ff ff8e 	bl	8001478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155c:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <SysTick_Config+0x40>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001562:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <SysTick_Config+0x40>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	e000e010 	.word	0xe000e010

08001578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff47 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a0:	f7ff ff5c 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f7ff ff8e 	bl	80014cc <NVIC_EncodePriority>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff5d 	bl	8001478 <__NVIC_SetPriority>
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ffb0 	bl	8001534 <SysTick_Config>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ee:	e160      	b.n	80018b2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2101      	movs	r1, #1
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	4013      	ands	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 8152 	beq.w	80018ac <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b01      	cmp	r3, #1
 8001612:	d005      	beq.n	8001620 <HAL_GPIO_Init+0x40>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d130      	bne.n	8001682 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	2203      	movs	r2, #3
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001656:	2201      	movs	r2, #1
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	f003 0201 	and.w	r2, r3, #1
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b03      	cmp	r3, #3
 800168c:	d017      	beq.n	80016be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	2203      	movs	r2, #3
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d123      	bne.n	8001712 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	08da      	lsrs	r2, r3, #3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3208      	adds	r2, #8
 80016d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	220f      	movs	r2, #15
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	691a      	ldr	r2, [r3, #16]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	08da      	lsrs	r2, r3, #3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3208      	adds	r2, #8
 800170c:	6939      	ldr	r1, [r7, #16]
 800170e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	2203      	movs	r2, #3
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0203 	and.w	r2, r3, #3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 80ac 	beq.w	80018ac <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001754:	4b5e      	ldr	r3, [pc, #376]	@ (80018d0 <HAL_GPIO_Init+0x2f0>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a5d      	ldr	r2, [pc, #372]	@ (80018d0 <HAL_GPIO_Init+0x2f0>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b5b      	ldr	r3, [pc, #364]	@ (80018d0 <HAL_GPIO_Init+0x2f0>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800176c:	4a59      	ldr	r2, [pc, #356]	@ (80018d4 <HAL_GPIO_Init+0x2f4>)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	3302      	adds	r3, #2
 8001774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	220f      	movs	r2, #15
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001796:	d025      	beq.n	80017e4 <HAL_GPIO_Init+0x204>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a4f      	ldr	r2, [pc, #316]	@ (80018d8 <HAL_GPIO_Init+0x2f8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d01f      	beq.n	80017e0 <HAL_GPIO_Init+0x200>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a4e      	ldr	r2, [pc, #312]	@ (80018dc <HAL_GPIO_Init+0x2fc>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d019      	beq.n	80017dc <HAL_GPIO_Init+0x1fc>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a4d      	ldr	r2, [pc, #308]	@ (80018e0 <HAL_GPIO_Init+0x300>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d013      	beq.n	80017d8 <HAL_GPIO_Init+0x1f8>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a4c      	ldr	r2, [pc, #304]	@ (80018e4 <HAL_GPIO_Init+0x304>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d00d      	beq.n	80017d4 <HAL_GPIO_Init+0x1f4>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a4b      	ldr	r2, [pc, #300]	@ (80018e8 <HAL_GPIO_Init+0x308>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d007      	beq.n	80017d0 <HAL_GPIO_Init+0x1f0>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a4a      	ldr	r2, [pc, #296]	@ (80018ec <HAL_GPIO_Init+0x30c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d101      	bne.n	80017cc <HAL_GPIO_Init+0x1ec>
 80017c8:	2306      	movs	r3, #6
 80017ca:	e00c      	b.n	80017e6 <HAL_GPIO_Init+0x206>
 80017cc:	2307      	movs	r3, #7
 80017ce:	e00a      	b.n	80017e6 <HAL_GPIO_Init+0x206>
 80017d0:	2305      	movs	r3, #5
 80017d2:	e008      	b.n	80017e6 <HAL_GPIO_Init+0x206>
 80017d4:	2304      	movs	r3, #4
 80017d6:	e006      	b.n	80017e6 <HAL_GPIO_Init+0x206>
 80017d8:	2303      	movs	r3, #3
 80017da:	e004      	b.n	80017e6 <HAL_GPIO_Init+0x206>
 80017dc:	2302      	movs	r3, #2
 80017de:	e002      	b.n	80017e6 <HAL_GPIO_Init+0x206>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <HAL_GPIO_Init+0x206>
 80017e4:	2300      	movs	r3, #0
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	f002 0203 	and.w	r2, r2, #3
 80017ec:	0092      	lsls	r2, r2, #2
 80017ee:	4093      	lsls	r3, r2
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017f6:	4937      	ldr	r1, [pc, #220]	@ (80018d4 <HAL_GPIO_Init+0x2f4>)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001804:	4b3a      	ldr	r3, [pc, #232]	@ (80018f0 <HAL_GPIO_Init+0x310>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001828:	4a31      	ldr	r2, [pc, #196]	@ (80018f0 <HAL_GPIO_Init+0x310>)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800182e:	4b30      	ldr	r3, [pc, #192]	@ (80018f0 <HAL_GPIO_Init+0x310>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001852:	4a27      	ldr	r2, [pc, #156]	@ (80018f0 <HAL_GPIO_Init+0x310>)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001858:	4b25      	ldr	r3, [pc, #148]	@ (80018f0 <HAL_GPIO_Init+0x310>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800187c:	4a1c      	ldr	r2, [pc, #112]	@ (80018f0 <HAL_GPIO_Init+0x310>)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001882:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <HAL_GPIO_Init+0x310>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018a6:	4a12      	ldr	r2, [pc, #72]	@ (80018f0 <HAL_GPIO_Init+0x310>)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	3301      	adds	r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f47f ae97 	bne.w	80015f0 <HAL_GPIO_Init+0x10>
  }
}
 80018c2:	bf00      	nop
 80018c4:	bf00      	nop
 80018c6:	371c      	adds	r7, #28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010000 	.word	0x40010000
 80018d8:	48000400 	.word	0x48000400
 80018dc:	48000800 	.word	0x48000800
 80018e0:	48000c00 	.word	0x48000c00
 80018e4:	48001000 	.word	0x48001000
 80018e8:	48001400 	.word	0x48001400
 80018ec:	48001800 	.word	0x48001800
 80018f0:	40010400 	.word	0x40010400

080018f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001900:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001904:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001906:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800190a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	f001 b80a 	b.w	800292e <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800191e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8161 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001930:	4bae      	ldr	r3, [pc, #696]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b04      	cmp	r3, #4
 800193a:	d00c      	beq.n	8001956 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800193c:	4bab      	ldr	r3, [pc, #684]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b08      	cmp	r3, #8
 8001946:	d157      	bne.n	80019f8 <HAL_RCC_OscConfig+0x104>
 8001948:	4ba8      	ldr	r3, [pc, #672]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001954:	d150      	bne.n	80019f8 <HAL_RCC_OscConfig+0x104>
 8001956:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800195a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800196a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b3f      	cmp	r3, #63	@ 0x3f
 8001976:	d802      	bhi.n	800197e <HAL_RCC_OscConfig+0x8a>
 8001978:	4b9c      	ldr	r3, [pc, #624]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	e015      	b.n	80019aa <HAL_RCC_OscConfig+0xb6>
 800197e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001982:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001992:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001996:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800199a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80019a6:	4b91      	ldr	r3, [pc, #580]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 80019a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019ae:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80019b2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80019b6:	fa92 f2a2 	rbit	r2, r2
 80019ba:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80019be:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80019c2:	fab2 f282 	clz	r2, r2
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f042 0220 	orr.w	r2, r2, #32
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	f002 021f 	and.w	r2, r2, #31
 80019d2:	2101      	movs	r1, #1
 80019d4:	fa01 f202 	lsl.w	r2, r1, r2
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8108 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x2fc>
 80019e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f040 80ff 	bne.w	8001bf0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	f000 bf9b 	b.w	800292e <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a08:	d106      	bne.n	8001a18 <HAL_RCC_OscConfig+0x124>
 8001a0a:	4b78      	ldr	r3, [pc, #480]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a77      	ldr	r2, [pc, #476]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e036      	b.n	8001a86 <HAL_RCC_OscConfig+0x192>
 8001a18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10c      	bne.n	8001a42 <HAL_RCC_OscConfig+0x14e>
 8001a28:	4b70      	ldr	r3, [pc, #448]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a6f      	ldr	r2, [pc, #444]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b6d      	ldr	r3, [pc, #436]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a6c      	ldr	r2, [pc, #432]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	e021      	b.n	8001a86 <HAL_RCC_OscConfig+0x192>
 8001a42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a52:	d10c      	bne.n	8001a6e <HAL_RCC_OscConfig+0x17a>
 8001a54:	4b65      	ldr	r3, [pc, #404]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a64      	ldr	r2, [pc, #400]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001a5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b62      	ldr	r3, [pc, #392]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a61      	ldr	r2, [pc, #388]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001a66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	e00b      	b.n	8001a86 <HAL_RCC_OscConfig+0x192>
 8001a6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a5e      	ldr	r2, [pc, #376]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001a80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a84:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d054      	beq.n	8001b40 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7fe fe75 	bl	8000784 <HAL_GetTick>
 8001a9a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7fe fe70 	bl	8000784 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b64      	cmp	r3, #100	@ 0x64
 8001aae:	d902      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	f000 bf3c 	b.w	800292e <HAL_RCC_OscConfig+0x103a>
 8001ab6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aba:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001aca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ad6:	d802      	bhi.n	8001ade <HAL_RCC_OscConfig+0x1ea>
 8001ad8:	4b44      	ldr	r3, [pc, #272]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	e015      	b.n	8001b0a <HAL_RCC_OscConfig+0x216>
 8001ade:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ae2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001af2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001af6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001afa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001b06:	4b39      	ldr	r3, [pc, #228]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b0e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001b12:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001b16:	fa92 f2a2 	rbit	r2, r2
 8001b1a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001b1e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001b22:	fab2 f282 	clz	r2, r2
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	f042 0220 	orr.w	r2, r2, #32
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	f002 021f 	and.w	r2, r2, #31
 8001b32:	2101      	movs	r1, #1
 8001b34:	fa01 f202 	lsl.w	r2, r1, r2
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0b0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x1ac>
 8001b3e:	e058      	b.n	8001bf2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7fe fe20 	bl	8000784 <HAL_GetTick>
 8001b44:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b4a:	f7fe fe1b 	bl	8000784 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	@ 0x64
 8001b58:	d902      	bls.n	8001b60 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	f000 bee7 	b.w	800292e <HAL_RCC_OscConfig+0x103a>
 8001b60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b64:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001b74:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b78:	fab3 f383 	clz	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b80:	d802      	bhi.n	8001b88 <HAL_RCC_OscConfig+0x294>
 8001b82:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	e015      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2c0>
 8001b88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b8c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001b94:	fa93 f3a3 	rbit	r3, r3
 8001b98:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001b9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ba0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001ba4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <HAL_RCC_OscConfig+0x2f8>)
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bb8:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001bbc:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001bc0:	fa92 f2a2 	rbit	r2, r2
 8001bc4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001bc8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001bcc:	fab2 f282 	clz	r2, r2
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	f042 0220 	orr.w	r2, r2, #32
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	f002 021f 	and.w	r2, r2, #31
 8001bdc:	2101      	movs	r1, #1
 8001bde:	fa01 f202 	lsl.w	r2, r1, r2
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1b0      	bne.n	8001b4a <HAL_RCC_OscConfig+0x256>
 8001be8:	e003      	b.n	8001bf2 <HAL_RCC_OscConfig+0x2fe>
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 816d 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c08:	4bcd      	ldr	r3, [pc, #820]	@ (8001f40 <HAL_RCC_OscConfig+0x64c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c14:	4bca      	ldr	r3, [pc, #808]	@ (8001f40 <HAL_RCC_OscConfig+0x64c>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d16e      	bne.n	8001cfe <HAL_RCC_OscConfig+0x40a>
 8001c20:	4bc7      	ldr	r3, [pc, #796]	@ (8001f40 <HAL_RCC_OscConfig+0x64c>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c2c:	d167      	bne.n	8001cfe <HAL_RCC_OscConfig+0x40a>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001c40:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c4c:	d802      	bhi.n	8001c54 <HAL_RCC_OscConfig+0x360>
 8001c4e:	4bbc      	ldr	r3, [pc, #752]	@ (8001f40 <HAL_RCC_OscConfig+0x64c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	e013      	b.n	8001c7c <HAL_RCC_OscConfig+0x388>
 8001c54:	2302      	movs	r3, #2
 8001c56:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001c66:	2302      	movs	r3, #2
 8001c68:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c6c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001c78:	4bb1      	ldr	r3, [pc, #708]	@ (8001f40 <HAL_RCC_OscConfig+0x64c>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001c82:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001c86:	fa92 f2a2 	rbit	r2, r2
 8001c8a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001c8e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001c92:	fab2 f282 	clz	r2, r2
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f042 0220 	orr.w	r2, r2, #32
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	f002 021f 	and.w	r2, r2, #31
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x3d0>
 8001cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f000 be35 	b.w	800292e <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b9e      	ldr	r3, [pc, #632]	@ (8001f40 <HAL_RCC_OscConfig+0x64c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ccc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	21f8      	movs	r1, #248	@ 0xf8
 8001cda:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001ce2:	fa91 f1a1 	rbit	r1, r1
 8001ce6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001cea:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001cee:	fab1 f181 	clz	r1, r1
 8001cf2:	b2c9      	uxtb	r1, r1
 8001cf4:	408b      	lsls	r3, r1
 8001cf6:	4992      	ldr	r1, [pc, #584]	@ (8001f40 <HAL_RCC_OscConfig+0x64c>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfc:	e0f1      	b.n	8001ee2 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8083 	beq.w	8001e16 <HAL_RCC_OscConfig+0x522>
 8001d10:	2301      	movs	r3, #1
 8001d12:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001d22:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d30:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	461a      	mov	r2, r3
 8001d38:	2301      	movs	r3, #1
 8001d3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7fe fd22 	bl	8000784 <HAL_GetTick>
 8001d40:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d46:	f7fe fd1d 	bl	8000784 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d902      	bls.n	8001d5c <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	f000 bde9 	b.w	800292e <HAL_RCC_OscConfig+0x103a>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001d6e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d7a:	d802      	bhi.n	8001d82 <HAL_RCC_OscConfig+0x48e>
 8001d7c:	4b70      	ldr	r3, [pc, #448]	@ (8001f40 <HAL_RCC_OscConfig+0x64c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	e013      	b.n	8001daa <HAL_RCC_OscConfig+0x4b6>
 8001d82:	2302      	movs	r3, #2
 8001d84:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001d94:	2302      	movs	r3, #2
 8001d96:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001d9a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001da6:	4b66      	ldr	r3, [pc, #408]	@ (8001f40 <HAL_RCC_OscConfig+0x64c>)
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001daa:	2202      	movs	r2, #2
 8001dac:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001db0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001db4:	fa92 f2a2 	rbit	r2, r2
 8001db8:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001dbc:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001dc0:	fab2 f282 	clz	r2, r2
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	f042 0220 	orr.w	r2, r2, #32
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	f002 021f 	and.w	r2, r2, #31
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0b4      	beq.n	8001d46 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b58      	ldr	r3, [pc, #352]	@ (8001f40 <HAL_RCC_OscConfig+0x64c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	21f8      	movs	r1, #248	@ 0xf8
 8001df2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001dfa:	fa91 f1a1 	rbit	r1, r1
 8001dfe:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001e02:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001e06:	fab1 f181 	clz	r1, r1
 8001e0a:	b2c9      	uxtb	r1, r1
 8001e0c:	408b      	lsls	r3, r1
 8001e0e:	494c      	ldr	r1, [pc, #304]	@ (8001f40 <HAL_RCC_OscConfig+0x64c>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	e065      	b.n	8001ee2 <HAL_RCC_OscConfig+0x5ee>
 8001e16:	2301      	movs	r3, #1
 8001e18:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001e28:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e36:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2300      	movs	r3, #0
 8001e40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7fe fc9f 	bl	8000784 <HAL_GetTick>
 8001e46:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7fe fc9a 	bl	8000784 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d902      	bls.n	8001e62 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	f000 bd66 	b.w	800292e <HAL_RCC_OscConfig+0x103a>
 8001e62:	2302      	movs	r3, #2
 8001e64:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001e74:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e80:	d802      	bhi.n	8001e88 <HAL_RCC_OscConfig+0x594>
 8001e82:	4b2f      	ldr	r3, [pc, #188]	@ (8001f40 <HAL_RCC_OscConfig+0x64c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	e013      	b.n	8001eb0 <HAL_RCC_OscConfig+0x5bc>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001ea0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001eac:	4b24      	ldr	r3, [pc, #144]	@ (8001f40 <HAL_RCC_OscConfig+0x64c>)
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001eb6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001eba:	fa92 f2a2 	rbit	r2, r2
 8001ebe:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001ec2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001ec6:	fab2 f282 	clz	r2, r2
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f042 0220 	orr.w	r2, r2, #32
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f002 021f 	and.w	r2, r2, #31
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1b4      	bne.n	8001e4c <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8119 	beq.w	800212a <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001efc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 8082 	beq.w	800200e <HAL_RCC_OscConfig+0x71a>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001f1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <HAL_RCC_OscConfig+0x650>)
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2301      	movs	r3, #1
 8001f32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7fe fc26 	bl	8000784 <HAL_GetTick>
 8001f38:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3c:	e00f      	b.n	8001f5e <HAL_RCC_OscConfig+0x66a>
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f48:	f7fe fc1c 	bl	8000784 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d902      	bls.n	8001f5e <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	f000 bce8 	b.w	800292e <HAL_RCC_OscConfig+0x103a>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f68:	fa93 f2a3 	rbit	r2, r3
 8001f6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f70:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f7e:	2202      	movs	r2, #2
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	fa93 f2a3 	rbit	r2, r3
 8001f90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001faa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f2a3 	rbit	r2, r3
 8001fb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001fbc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	4bb0      	ldr	r3, [pc, #704]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 8001fc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fca:	2102      	movs	r1, #2
 8001fcc:	6019      	str	r1, [r3, #0]
 8001fce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	fa93 f1a3 	rbit	r1, r3
 8001fdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001fe4:	6019      	str	r1, [r3, #0]
  return result;
 8001fe6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fea:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	2101      	movs	r1, #1
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d09d      	beq.n	8001f48 <HAL_RCC_OscConfig+0x654>
 800200c:	e08d      	b.n	800212a <HAL_RCC_OscConfig+0x836>
 800200e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002012:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800201e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	fa93 f2a3 	rbit	r2, r3
 8002028:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800202c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002030:	601a      	str	r2, [r3, #0]
  return result;
 8002032:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002036:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800203a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	4b8f      	ldr	r3, [pc, #572]	@ (8002284 <HAL_RCC_OscConfig+0x990>)
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	461a      	mov	r2, r3
 800204c:	2300      	movs	r3, #0
 800204e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7fe fb98 	bl	8000784 <HAL_GetTick>
 8002054:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205a:	f7fe fb93 	bl	8000784 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d902      	bls.n	8002070 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	f000 bc5f 	b.w	800292e <HAL_RCC_OscConfig+0x103a>
 8002070:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002074:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002078:	2202      	movs	r2, #2
 800207a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002080:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	fa93 f2a3 	rbit	r2, r3
 800208a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800208e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002098:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800209c:	2202      	movs	r2, #2
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	fa93 f2a3 	rbit	r2, r3
 80020ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020bc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020c0:	2202      	movs	r2, #2
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	fa93 f2a3 	rbit	r2, r3
 80020d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	4b68      	ldr	r3, [pc, #416]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 80020de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020e8:	2102      	movs	r1, #2
 80020ea:	6019      	str	r1, [r3, #0]
 80020ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	fa93 f1a3 	rbit	r1, r3
 80020fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020fe:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002102:	6019      	str	r1, [r3, #0]
  return result;
 8002104:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002108:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	2101      	movs	r1, #1
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d197      	bne.n	800205a <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800212e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 819c 	beq.w	8002478 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002146:	4b4e      	ldr	r3, [pc, #312]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d116      	bne.n	8002180 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	4b4b      	ldr	r3, [pc, #300]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	4a4a      	ldr	r2, [pc, #296]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800215c:	61d3      	str	r3, [r2, #28]
 800215e:	4b48      	ldr	r3, [pc, #288]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002166:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002174:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002178:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800217a:	2301      	movs	r3, #1
 800217c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <HAL_RCC_OscConfig+0x994>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11a      	bne.n	80021c2 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218c:	4b3e      	ldr	r3, [pc, #248]	@ (8002288 <HAL_RCC_OscConfig+0x994>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a3d      	ldr	r2, [pc, #244]	@ (8002288 <HAL_RCC_OscConfig+0x994>)
 8002192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002196:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002198:	f7fe faf4 	bl	8000784 <HAL_GetTick>
 800219c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	e009      	b.n	80021b6 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a2:	f7fe faef 	bl	8000784 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	@ 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e3bb      	b.n	800292e <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	4b34      	ldr	r3, [pc, #208]	@ (8002288 <HAL_RCC_OscConfig+0x994>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0ef      	beq.n	80021a2 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d106      	bne.n	80021e0 <HAL_RCC_OscConfig+0x8ec>
 80021d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6213      	str	r3, [r2, #32]
 80021de:	e035      	b.n	800224c <HAL_RCC_OscConfig+0x958>
 80021e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10c      	bne.n	800220a <HAL_RCC_OscConfig+0x916>
 80021f0:	4b23      	ldr	r3, [pc, #140]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4a22      	ldr	r2, [pc, #136]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	6213      	str	r3, [r2, #32]
 80021fc:	4b20      	ldr	r3, [pc, #128]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4a1f      	ldr	r2, [pc, #124]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 8002202:	f023 0304 	bic.w	r3, r3, #4
 8002206:	6213      	str	r3, [r2, #32]
 8002208:	e020      	b.n	800224c <HAL_RCC_OscConfig+0x958>
 800220a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b05      	cmp	r3, #5
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0x940>
 800221a:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a18      	ldr	r2, [pc, #96]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6213      	str	r3, [r2, #32]
 8002226:	4b16      	ldr	r3, [pc, #88]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4a15      	ldr	r2, [pc, #84]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6213      	str	r3, [r2, #32]
 8002232:	e00b      	b.n	800224c <HAL_RCC_OscConfig+0x958>
 8002234:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a11      	ldr	r2, [pc, #68]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 800223a:	f023 0301 	bic.w	r3, r3, #1
 800223e:	6213      	str	r3, [r2, #32]
 8002240:	4b0f      	ldr	r3, [pc, #60]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a0e      	ldr	r2, [pc, #56]	@ (8002280 <HAL_RCC_OscConfig+0x98c>)
 8002246:	f023 0304 	bic.w	r3, r3, #4
 800224a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800224c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002250:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 8085 	beq.w	8002368 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7fe fa91 	bl	8000784 <HAL_GetTick>
 8002262:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002266:	e011      	b.n	800228c <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002268:	f7fe fa8c 	bl	8000784 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d907      	bls.n	800228c <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e356      	b.n	800292e <HAL_RCC_OscConfig+0x103a>
 8002280:	40021000 	.word	0x40021000
 8002284:	10908120 	.word	0x10908120
 8002288:	40007000 	.word	0x40007000
 800228c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002290:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002294:	2202      	movs	r2, #2
 8002296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800229c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	fa93 f2a3 	rbit	r2, r3
 80022a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022aa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022b8:	2202      	movs	r2, #2
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	fa93 f2a3 	rbit	r2, r3
 80022ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ce:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80022d2:	601a      	str	r2, [r3, #0]
  return result;
 80022d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80022dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <HAL_RCC_OscConfig+0xa00>
 80022ee:	4b98      	ldr	r3, [pc, #608]	@ (8002550 <HAL_RCC_OscConfig+0xc5c>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	e013      	b.n	800231c <HAL_RCC_OscConfig+0xa28>
 80022f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80022fc:	2202      	movs	r2, #2
 80022fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002304:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fa93 f2a3 	rbit	r2, r3
 800230e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002312:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	4b8d      	ldr	r3, [pc, #564]	@ (8002550 <HAL_RCC_OscConfig+0xc5c>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002320:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002324:	2102      	movs	r1, #2
 8002326:	6011      	str	r1, [r2, #0]
 8002328:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800232c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	fa92 f1a2 	rbit	r1, r2
 8002336:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800233a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800233e:	6011      	str	r1, [r2, #0]
  return result;
 8002340:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002344:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	fab2 f282 	clz	r2, r2
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f002 021f 	and.w	r2, r2, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f202 	lsl.w	r2, r1, r2
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d080      	beq.n	8002268 <HAL_RCC_OscConfig+0x974>
 8002366:	e07d      	b.n	8002464 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002368:	f7fe fa0c 	bl	8000784 <HAL_GetTick>
 800236c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002370:	e00b      	b.n	800238a <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7fe fa07 	bl	8000784 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e2d1      	b.n	800292e <HAL_RCC_OscConfig+0x103a>
 800238a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800238e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002392:	2202      	movs	r2, #2
 8002394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800239a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023b6:	2202      	movs	r2, #2
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023be:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	fa93 f2a3 	rbit	r2, r3
 80023c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023cc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023d0:	601a      	str	r2, [r3, #0]
  return result;
 80023d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <HAL_RCC_OscConfig+0xafe>
 80023ec:	4b58      	ldr	r3, [pc, #352]	@ (8002550 <HAL_RCC_OscConfig+0xc5c>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	e013      	b.n	800241a <HAL_RCC_OscConfig+0xb26>
 80023f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80023fa:	2202      	movs	r2, #2
 80023fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002402:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	fa93 f2a3 	rbit	r2, r3
 800240c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002410:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	4b4e      	ldr	r3, [pc, #312]	@ (8002550 <HAL_RCC_OscConfig+0xc5c>)
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800241e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002422:	2102      	movs	r1, #2
 8002424:	6011      	str	r1, [r2, #0]
 8002426:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800242a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	fa92 f1a2 	rbit	r1, r2
 8002434:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002438:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800243c:	6011      	str	r1, [r2, #0]
  return result;
 800243e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002442:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	fab2 f282 	clz	r2, r2
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	f002 021f 	and.w	r2, r2, #31
 8002458:	2101      	movs	r1, #1
 800245a:	fa01 f202 	lsl.w	r2, r1, r2
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d186      	bne.n	8002372 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002464:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002468:	2b01      	cmp	r3, #1
 800246a:	d105      	bne.n	8002478 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246c:	4b38      	ldr	r3, [pc, #224]	@ (8002550 <HAL_RCC_OscConfig+0xc5c>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	4a37      	ldr	r2, [pc, #220]	@ (8002550 <HAL_RCC_OscConfig+0xc5c>)
 8002472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002476:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002478:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800247c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8251 	beq.w	800292c <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800248a:	4b31      	ldr	r3, [pc, #196]	@ (8002550 <HAL_RCC_OscConfig+0xc5c>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b08      	cmp	r3, #8
 8002494:	f000 820f 	beq.w	80028b6 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002498:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800249c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	f040 8165 	bne.w	8002774 <HAL_RCC_OscConfig+0xe80>
 80024aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024bc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	fa93 f2a3 	rbit	r2, r3
 80024c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ca:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80024ce:	601a      	str	r2, [r3, #0]
  return result;
 80024d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80024d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	461a      	mov	r2, r3
 80024ec:	2300      	movs	r3, #0
 80024ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe f948 	bl	8000784 <HAL_GetTick>
 80024f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f8:	e009      	b.n	800250e <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fa:	f7fe f943 	bl	8000784 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e20f      	b.n	800292e <HAL_RCC_OscConfig+0x103a>
 800250e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002512:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002516:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800251a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002520:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	fa93 f2a3 	rbit	r2, r3
 800252a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002532:	601a      	str	r2, [r3, #0]
  return result;
 8002534:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002538:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800253c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b3f      	cmp	r3, #63	@ 0x3f
 8002546:	d805      	bhi.n	8002554 <HAL_RCC_OscConfig+0xc60>
 8002548:	4b01      	ldr	r3, [pc, #4]	@ (8002550 <HAL_RCC_OscConfig+0xc5c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	e02a      	b.n	80025a4 <HAL_RCC_OscConfig+0xcb0>
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002558:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800255c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002566:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	fa93 f2a3 	rbit	r2, r3
 8002570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002574:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800257e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002582:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800258c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	fa93 f2a3 	rbit	r2, r3
 8002596:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800259a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	4bca      	ldr	r3, [pc, #808]	@ (80028cc <HAL_RCC_OscConfig+0xfd8>)
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025a8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025ac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025b0:	6011      	str	r1, [r2, #0]
 80025b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025b6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	fa92 f1a2 	rbit	r1, r2
 80025c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025c4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80025c8:	6011      	str	r1, [r2, #0]
  return result;
 80025ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025ce:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	fab2 f282 	clz	r2, r2
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	f042 0220 	orr.w	r2, r2, #32
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f002 021f 	and.w	r2, r2, #31
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d184      	bne.n	80024fa <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f0:	4bb6      	ldr	r3, [pc, #728]	@ (80028cc <HAL_RCC_OscConfig+0xfd8>)
 80025f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f4:	f023 020f 	bic.w	r2, r3, #15
 80025f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002604:	49b1      	ldr	r1, [pc, #708]	@ (80028cc <HAL_RCC_OscConfig+0xfd8>)
 8002606:	4313      	orrs	r3, r2
 8002608:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800260a:	4bb0      	ldr	r3, [pc, #704]	@ (80028cc <HAL_RCC_OscConfig+0xfd8>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002612:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002616:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6a19      	ldr	r1, [r3, #32]
 800261e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002622:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	430b      	orrs	r3, r1
 800262c:	49a7      	ldr	r1, [pc, #668]	@ (80028cc <HAL_RCC_OscConfig+0xfd8>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
 8002632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002636:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800263a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800263e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002644:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	fa93 f2a3 	rbit	r2, r3
 800264e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002652:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002656:	601a      	str	r2, [r3, #0]
  return result;
 8002658:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800265c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002660:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800266c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	461a      	mov	r2, r3
 8002674:	2301      	movs	r3, #1
 8002676:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe f884 	bl	8000784 <HAL_GetTick>
 800267c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002680:	e009      	b.n	8002696 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002682:	f7fe f87f 	bl	8000784 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e14b      	b.n	800292e <HAL_RCC_OscConfig+0x103a>
 8002696:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800269a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800269e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	fa93 f2a3 	rbit	r2, r3
 80026b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80026ba:	601a      	str	r2, [r3, #0]
  return result;
 80026bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80026c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80026ce:	d802      	bhi.n	80026d6 <HAL_RCC_OscConfig+0xde2>
 80026d0:	4b7e      	ldr	r3, [pc, #504]	@ (80028cc <HAL_RCC_OscConfig+0xfd8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	e027      	b.n	8002726 <HAL_RCC_OscConfig+0xe32>
 80026d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026da:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	fa93 f2a3 	rbit	r2, r3
 80026f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026f6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002700:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002704:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800270e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	fa93 f2a3 	rbit	r2, r3
 8002718:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800271c:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	4b6a      	ldr	r3, [pc, #424]	@ (80028cc <HAL_RCC_OscConfig+0xfd8>)
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800272a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800272e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002732:	6011      	str	r1, [r2, #0]
 8002734:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002738:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	fa92 f1a2 	rbit	r1, r2
 8002742:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002746:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800274a:	6011      	str	r1, [r2, #0]
  return result;
 800274c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002750:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	fab2 f282 	clz	r2, r2
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	f042 0220 	orr.w	r2, r2, #32
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	f002 021f 	and.w	r2, r2, #31
 8002766:	2101      	movs	r1, #1
 8002768:	fa01 f202 	lsl.w	r2, r1, r2
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d087      	beq.n	8002682 <HAL_RCC_OscConfig+0xd8e>
 8002772:	e0db      	b.n	800292c <HAL_RCC_OscConfig+0x1038>
 8002774:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002778:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800277c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002786:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	fa93 f2a3 	rbit	r2, r3
 8002790:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002794:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002798:	601a      	str	r2, [r3, #0]
  return result;
 800279a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800279e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80027a2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027ae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	461a      	mov	r2, r3
 80027b6:	2300      	movs	r3, #0
 80027b8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ba:	f7fd ffe3 	bl	8000784 <HAL_GetTick>
 80027be:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c2:	e009      	b.n	80027d8 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c4:	f7fd ffde 	bl	8000784 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e0aa      	b.n	800292e <HAL_RCC_OscConfig+0x103a>
 80027d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027dc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80027e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ea:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	fa93 f2a3 	rbit	r2, r3
 80027f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027f8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80027fc:	601a      	str	r2, [r3, #0]
  return result;
 80027fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002802:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002806:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002810:	d802      	bhi.n	8002818 <HAL_RCC_OscConfig+0xf24>
 8002812:	4b2e      	ldr	r3, [pc, #184]	@ (80028cc <HAL_RCC_OscConfig+0xfd8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	e027      	b.n	8002868 <HAL_RCC_OscConfig+0xf74>
 8002818:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800281c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002820:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800282a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	fa93 f2a3 	rbit	r2, r3
 8002834:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002838:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002842:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002846:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002850:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800285e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	4b19      	ldr	r3, [pc, #100]	@ (80028cc <HAL_RCC_OscConfig+0xfd8>)
 8002866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002868:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800286c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002870:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002874:	6011      	str	r1, [r2, #0]
 8002876:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800287a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	fa92 f1a2 	rbit	r1, r2
 8002884:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002888:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800288c:	6011      	str	r1, [r2, #0]
  return result;
 800288e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002892:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	fab2 f282 	clz	r2, r2
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	f042 0220 	orr.w	r2, r2, #32
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	f002 021f 	and.w	r2, r2, #31
 80028a8:	2101      	movs	r1, #1
 80028aa:	fa01 f202 	lsl.w	r2, r1, r2
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d187      	bne.n	80027c4 <HAL_RCC_OscConfig+0xed0>
 80028b4:	e03a      	b.n	800292c <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d104      	bne.n	80028d0 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e031      	b.n	800292e <HAL_RCC_OscConfig+0x103a>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028d0:	4b19      	ldr	r3, [pc, #100]	@ (8002938 <HAL_RCC_OscConfig+0x1044>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80028d8:	4b17      	ldr	r3, [pc, #92]	@ (8002938 <HAL_RCC_OscConfig+0x1044>)
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80028e4:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80028e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d117      	bne.n	8002928 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80028f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80028fc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002904:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800290c:	429a      	cmp	r2, r3
 800290e:	d10b      	bne.n	8002928 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002914:	f003 020f 	and.w	r2, r3, #15
 8002918:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800291c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000

0800293c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b09e      	sub	sp, #120	@ 0x78
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e154      	b.n	8002bfe <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b89      	ldr	r3, [pc, #548]	@ (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d910      	bls.n	8002984 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b86      	ldr	r3, [pc, #536]	@ (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 0207 	bic.w	r2, r3, #7
 800296a:	4984      	ldr	r1, [pc, #528]	@ (8002b7c <HAL_RCC_ClockConfig+0x240>)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b82      	ldr	r3, [pc, #520]	@ (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e13c      	b.n	8002bfe <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002990:	4b7b      	ldr	r3, [pc, #492]	@ (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4978      	ldr	r1, [pc, #480]	@ (8002b80 <HAL_RCC_ClockConfig+0x244>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80cd 	beq.w	8002b4a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d137      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xec>
 80029b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80029c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80029d0:	d802      	bhi.n	80029d8 <HAL_RCC_ClockConfig+0x9c>
 80029d2:	4b6b      	ldr	r3, [pc, #428]	@ (8002b80 <HAL_RCC_ClockConfig+0x244>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	e00f      	b.n	80029f8 <HAL_RCC_ClockConfig+0xbc>
 80029d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80029e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80029ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029f4:	4b62      	ldr	r3, [pc, #392]	@ (8002b80 <HAL_RCC_ClockConfig+0x244>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80029fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a00:	fa92 f2a2 	rbit	r2, r2
 8002a04:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002a06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a08:	fab2 f282 	clz	r2, r2
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	f042 0220 	orr.w	r2, r2, #32
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	f002 021f 	and.w	r2, r2, #31
 8002a18:	2101      	movs	r1, #1
 8002a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d171      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0ea      	b.n	8002bfe <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d137      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x164>
 8002a30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a34:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a48:	d802      	bhi.n	8002a50 <HAL_RCC_ClockConfig+0x114>
 8002a4a:	4b4d      	ldr	r3, [pc, #308]	@ (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	e00f      	b.n	8002a70 <HAL_RCC_ClockConfig+0x134>
 8002a50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a54:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a62:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a6c:	4b44      	ldr	r3, [pc, #272]	@ (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a74:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002a76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a78:	fa92 f2a2 	rbit	r2, r2
 8002a7c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002a7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a80:	fab2 f282 	clz	r2, r2
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	f042 0220 	orr.w	r2, r2, #32
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	f002 021f 	and.w	r2, r2, #31
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f202 	lsl.w	r2, r1, r2
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d135      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0ae      	b.n	8002bfe <HAL_RCC_ClockConfig+0x2c2>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ab6:	d802      	bhi.n	8002abe <HAL_RCC_ClockConfig+0x182>
 8002ab8:	4b31      	ldr	r3, [pc, #196]	@ (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	e00d      	b.n	8002ada <HAL_RCC_ClockConfig+0x19e>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aca:	2302      	movs	r3, #2
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	2202      	movs	r2, #2
 8002adc:	61ba      	str	r2, [r7, #24]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	fa92 f2a2 	rbit	r2, r2
 8002ae4:	617a      	str	r2, [r7, #20]
  return result;
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	fab2 f282 	clz	r2, r2
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f042 0220 	orr.w	r2, r2, #32
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	f002 021f 	and.w	r2, r2, #31
 8002af8:	2101      	movs	r1, #1
 8002afa:	fa01 f202 	lsl.w	r2, r1, r2
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e07a      	b.n	8002bfe <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b08:	4b1d      	ldr	r3, [pc, #116]	@ (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f023 0203 	bic.w	r2, r3, #3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	491a      	ldr	r1, [pc, #104]	@ (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b1a:	f7fd fe33 	bl	8000784 <HAL_GetTick>
 8002b1e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b22:	f7fd fe2f 	bl	8000784 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e062      	b.n	8002bfe <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b38:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 020c 	and.w	r2, r3, #12
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d1eb      	bne.n	8002b22 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d215      	bcs.n	8002b84 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b58:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 0207 	bic.w	r2, r3, #7
 8002b60:	4906      	ldr	r1, [pc, #24]	@ (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b68:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d006      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e041      	b.n	8002bfe <HAL_RCC_ClockConfig+0x2c2>
 8002b7a:	bf00      	nop
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b90:	4b1d      	ldr	r3, [pc, #116]	@ (8002c08 <HAL_RCC_ClockConfig+0x2cc>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	491a      	ldr	r1, [pc, #104]	@ (8002c08 <HAL_RCC_ClockConfig+0x2cc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bae:	4b16      	ldr	r3, [pc, #88]	@ (8002c08 <HAL_RCC_ClockConfig+0x2cc>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4912      	ldr	r1, [pc, #72]	@ (8002c08 <HAL_RCC_ClockConfig+0x2cc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bc2:	f000 f829 	bl	8002c18 <HAL_RCC_GetSysClockFreq>
 8002bc6:	4601      	mov	r1, r0
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c08 <HAL_RCC_ClockConfig+0x2cc>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bd0:	22f0      	movs	r2, #240	@ 0xf0
 8002bd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	fa92 f2a2 	rbit	r2, r2
 8002bda:	60fa      	str	r2, [r7, #12]
  return result;
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	fab2 f282 	clz	r2, r2
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	40d3      	lsrs	r3, r2
 8002be6:	4a09      	ldr	r2, [pc, #36]	@ (8002c0c <HAL_RCC_ClockConfig+0x2d0>)
 8002be8:	5cd3      	ldrb	r3, [r2, r3]
 8002bea:	fa21 f303 	lsr.w	r3, r1, r3
 8002bee:	4a08      	ldr	r2, [pc, #32]	@ (8002c10 <HAL_RCC_ClockConfig+0x2d4>)
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002bf2:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <HAL_RCC_ClockConfig+0x2d8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fd fd80 	bl	80006fc <HAL_InitTick>
  
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3778      	adds	r7, #120	@ 0x78
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	08003f1c 	.word	0x08003f1c
 8002c10:	20000000 	.word	0x20000000
 8002c14:	20000004 	.word	0x20000004

08002c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c32:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d002      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x30>
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x36>
 8002c46:	e029      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c48:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c4a:	613b      	str	r3, [r7, #16]
      break;
 8002c4c:	e029      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	0c9b      	lsrs	r3, r3, #18
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	4a18      	ldr	r2, [pc, #96]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c58:	5cd3      	ldrb	r3, [r2, r3]
 8002c5a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002c5c:	4b14      	ldr	r3, [pc, #80]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	4a15      	ldr	r2, [pc, #84]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c66:	5cd3      	ldrb	r3, [r2, r3]
 8002c68:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c74:	4a0f      	ldr	r2, [pc, #60]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	e007      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c86:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	fb02 f303 	mul.w	r3, r2, r3
 8002c94:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	613b      	str	r3, [r7, #16]
      break;
 8002c9a:	e002      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c9c:	4b05      	ldr	r3, [pc, #20]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c9e:	613b      	str	r3, [r7, #16]
      break;
 8002ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca2:	693b      	ldr	r3, [r7, #16]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	371c      	adds	r7, #28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	007a1200 	.word	0x007a1200
 8002cb8:	08003f2c 	.word	0x08003f2c
 8002cbc:	08003f3c 	.word	0x08003f3c

08002cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b092      	sub	sp, #72	@ 0x48
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80d2 	beq.w	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10e      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	4a49      	ldr	r2, [pc, #292]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	61d3      	str	r3, [r2, #28]
 8002cfc:	4b47      	ldr	r3, [pc, #284]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0e:	4b44      	ldr	r3, [pc, #272]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d118      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d1a:	4b41      	ldr	r3, [pc, #260]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a40      	ldr	r2, [pc, #256]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d26:	f7fd fd2d 	bl	8000784 <HAL_GetTick>
 8002d2a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2c:	e008      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2e:	f7fd fd29 	bl	8000784 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b64      	cmp	r3, #100	@ 0x64
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e1d4      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d40:	4b37      	ldr	r3, [pc, #220]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d4c:	4b33      	ldr	r3, [pc, #204]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8082 	beq.w	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d07a      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b25      	ldr	r3, [pc, #148]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	461a      	mov	r2, r3
 8002d96:	2301      	movs	r3, #1
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	461a      	mov	r2, r3
 8002dba:	2300      	movs	r3, #0
 8002dbc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dbe:	4a17      	ldr	r2, [pc, #92]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d049      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fd fcd9 	bl	8000784 <HAL_GetTick>
 8002dd2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fd fcd5 	bl	8000784 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e17e      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002dec:	2302      	movs	r3, #2
 8002dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df8:	2302      	movs	r3, #2
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	61fb      	str	r3, [r7, #28]
  return result;
 8002e04:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d108      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002e16:	4b01      	ldr	r3, [pc, #4]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	e00d      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40007000 	.word	0x40007000
 8002e24:	10908100 	.word	0x10908100
 8002e28:	2302      	movs	r3, #2
 8002e2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	4b9a      	ldr	r3, [pc, #616]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	2202      	movs	r2, #2
 8002e3a:	613a      	str	r2, [r7, #16]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	fa92 f2a2 	rbit	r2, r2
 8002e42:	60fa      	str	r2, [r7, #12]
  return result;
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	fab2 f282 	clz	r2, r2
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f002 021f 	and.w	r2, r2, #31
 8002e56:	2101      	movs	r1, #1
 8002e58:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0b9      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e62:	4b8f      	ldr	r3, [pc, #572]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	498c      	ldr	r1, [pc, #560]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e74:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7c:	4b88      	ldr	r3, [pc, #544]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	4a87      	ldr	r2, [pc, #540]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e94:	4b82      	ldr	r3, [pc, #520]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e98:	f023 0203 	bic.w	r2, r3, #3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	497f      	ldr	r1, [pc, #508]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eb2:	4b7b      	ldr	r3, [pc, #492]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4978      	ldr	r1, [pc, #480]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ed0:	4b73      	ldr	r3, [pc, #460]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	4970      	ldr	r1, [pc, #448]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eee:	4b6c      	ldr	r3, [pc, #432]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	f023 0210 	bic.w	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4969      	ldr	r1, [pc, #420]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f0c:	4b64      	ldr	r3, [pc, #400]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f18:	4961      	ldr	r1, [pc, #388]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2e:	f023 0220 	bic.w	r2, r3, #32
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	495a      	ldr	r1, [pc, #360]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f48:	4b55      	ldr	r3, [pc, #340]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	4952      	ldr	r1, [pc, #328]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f66:	4b4e      	ldr	r3, [pc, #312]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	494b      	ldr	r1, [pc, #300]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f84:	4b46      	ldr	r3, [pc, #280]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f88:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	4943      	ldr	r1, [pc, #268]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	493c      	ldr	r1, [pc, #240]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fc0:	4b37      	ldr	r3, [pc, #220]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fcc:	4934      	ldr	r1, [pc, #208]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002fde:	4b30      	ldr	r3, [pc, #192]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe2:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fea:	492d      	ldr	r1, [pc, #180]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ffc:	4b28      	ldr	r3, [pc, #160]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003000:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003008:	4925      	ldr	r1, [pc, #148]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800300a:	4313      	orrs	r3, r2
 800300c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800301a:	4b21      	ldr	r3, [pc, #132]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	491e      	ldr	r1, [pc, #120]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003028:	4313      	orrs	r3, r2
 800302a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003038:	4b19      	ldr	r3, [pc, #100]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800303a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003044:	4916      	ldr	r1, [pc, #88]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003046:	4313      	orrs	r3, r2
 8003048:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003056:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003062:	490f      	ldr	r1, [pc, #60]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003064:	4313      	orrs	r3, r2
 8003066:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003074:	4b0a      	ldr	r3, [pc, #40]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003080:	4907      	ldr	r1, [pc, #28]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003082:	4313      	orrs	r3, r2
 8003084:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00c      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003092:	4b03      	ldr	r3, [pc, #12]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	e002      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000
 80030a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030a6:	4913      	ldr	r1, [pc, #76]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80030b8:	4b0e      	ldr	r3, [pc, #56]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80030ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c4:	490b      	ldr	r1, [pc, #44]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80030d6:	4b07      	ldr	r3, [pc, #28]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e2:	4904      	ldr	r1, [pc, #16]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3748      	adds	r7, #72	@ 0x48
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000

080030f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e049      	b.n	800319e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fd fa18 	bl	8000554 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3304      	adds	r3, #4
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f000 fa56 	bl	80035e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d109      	bne.n	80031cc <HAL_TIM_PWM_Start+0x24>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	bf14      	ite	ne
 80031c4:	2301      	movne	r3, #1
 80031c6:	2300      	moveq	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	e03c      	b.n	8003246 <HAL_TIM_PWM_Start+0x9e>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d109      	bne.n	80031e6 <HAL_TIM_PWM_Start+0x3e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	bf14      	ite	ne
 80031de:	2301      	movne	r3, #1
 80031e0:	2300      	moveq	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	e02f      	b.n	8003246 <HAL_TIM_PWM_Start+0x9e>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d109      	bne.n	8003200 <HAL_TIM_PWM_Start+0x58>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e022      	b.n	8003246 <HAL_TIM_PWM_Start+0x9e>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b0c      	cmp	r3, #12
 8003204:	d109      	bne.n	800321a <HAL_TIM_PWM_Start+0x72>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	bf14      	ite	ne
 8003212:	2301      	movne	r3, #1
 8003214:	2300      	moveq	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	e015      	b.n	8003246 <HAL_TIM_PWM_Start+0x9e>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b10      	cmp	r3, #16
 800321e:	d109      	bne.n	8003234 <HAL_TIM_PWM_Start+0x8c>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e008      	b.n	8003246 <HAL_TIM_PWM_Start+0x9e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0a1      	b.n	8003392 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <HAL_TIM_PWM_Start+0xb6>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800325c:	e023      	b.n	80032a6 <HAL_TIM_PWM_Start+0xfe>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b04      	cmp	r3, #4
 8003262:	d104      	bne.n	800326e <HAL_TIM_PWM_Start+0xc6>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800326c:	e01b      	b.n	80032a6 <HAL_TIM_PWM_Start+0xfe>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b08      	cmp	r3, #8
 8003272:	d104      	bne.n	800327e <HAL_TIM_PWM_Start+0xd6>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800327c:	e013      	b.n	80032a6 <HAL_TIM_PWM_Start+0xfe>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b0c      	cmp	r3, #12
 8003282:	d104      	bne.n	800328e <HAL_TIM_PWM_Start+0xe6>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800328c:	e00b      	b.n	80032a6 <HAL_TIM_PWM_Start+0xfe>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b10      	cmp	r3, #16
 8003292:	d104      	bne.n	800329e <HAL_TIM_PWM_Start+0xf6>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800329c:	e003      	b.n	80032a6 <HAL_TIM_PWM_Start+0xfe>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2201      	movs	r2, #1
 80032ac:	6839      	ldr	r1, [r7, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fd4a 	bl	8003d48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a38      	ldr	r2, [pc, #224]	@ (800339c <HAL_TIM_PWM_Start+0x1f4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d018      	beq.n	80032f0 <HAL_TIM_PWM_Start+0x148>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a37      	ldr	r2, [pc, #220]	@ (80033a0 <HAL_TIM_PWM_Start+0x1f8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d013      	beq.n	80032f0 <HAL_TIM_PWM_Start+0x148>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a35      	ldr	r2, [pc, #212]	@ (80033a4 <HAL_TIM_PWM_Start+0x1fc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00e      	beq.n	80032f0 <HAL_TIM_PWM_Start+0x148>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a34      	ldr	r2, [pc, #208]	@ (80033a8 <HAL_TIM_PWM_Start+0x200>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d009      	beq.n	80032f0 <HAL_TIM_PWM_Start+0x148>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a32      	ldr	r2, [pc, #200]	@ (80033ac <HAL_TIM_PWM_Start+0x204>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <HAL_TIM_PWM_Start+0x148>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a31      	ldr	r2, [pc, #196]	@ (80033b0 <HAL_TIM_PWM_Start+0x208>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d101      	bne.n	80032f4 <HAL_TIM_PWM_Start+0x14c>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <HAL_TIM_PWM_Start+0x14e>
 80032f4:	2300      	movs	r3, #0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003308:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a23      	ldr	r2, [pc, #140]	@ (800339c <HAL_TIM_PWM_Start+0x1f4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d01d      	beq.n	8003350 <HAL_TIM_PWM_Start+0x1a8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800331c:	d018      	beq.n	8003350 <HAL_TIM_PWM_Start+0x1a8>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a24      	ldr	r2, [pc, #144]	@ (80033b4 <HAL_TIM_PWM_Start+0x20c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d013      	beq.n	8003350 <HAL_TIM_PWM_Start+0x1a8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a22      	ldr	r2, [pc, #136]	@ (80033b8 <HAL_TIM_PWM_Start+0x210>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00e      	beq.n	8003350 <HAL_TIM_PWM_Start+0x1a8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1a      	ldr	r2, [pc, #104]	@ (80033a0 <HAL_TIM_PWM_Start+0x1f8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d009      	beq.n	8003350 <HAL_TIM_PWM_Start+0x1a8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a18      	ldr	r2, [pc, #96]	@ (80033a4 <HAL_TIM_PWM_Start+0x1fc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d004      	beq.n	8003350 <HAL_TIM_PWM_Start+0x1a8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a19      	ldr	r2, [pc, #100]	@ (80033b0 <HAL_TIM_PWM_Start+0x208>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d115      	bne.n	800337c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	4b19      	ldr	r3, [pc, #100]	@ (80033bc <HAL_TIM_PWM_Start+0x214>)
 8003358:	4013      	ands	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d015      	beq.n	800338e <HAL_TIM_PWM_Start+0x1e6>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003368:	d011      	beq.n	800338e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0201 	orr.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337a:	e008      	b.n	800338e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e000      	b.n	8003390 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40013400 	.word	0x40013400
 80033a4:	40014000 	.word	0x40014000
 80033a8:	40014400 	.word	0x40014400
 80033ac:	40014800 	.word	0x40014800
 80033b0:	40015000 	.word	0x40015000
 80033b4:	40000400 	.word	0x40000400
 80033b8:	40000800 	.word	0x40000800
 80033bc:	00010007 	.word	0x00010007

080033c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033da:	2302      	movs	r3, #2
 80033dc:	e0ff      	b.n	80035de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b14      	cmp	r3, #20
 80033ea:	f200 80f0 	bhi.w	80035ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80033ee:	a201      	add	r2, pc, #4	@ (adr r2, 80033f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	08003449 	.word	0x08003449
 80033f8:	080035cf 	.word	0x080035cf
 80033fc:	080035cf 	.word	0x080035cf
 8003400:	080035cf 	.word	0x080035cf
 8003404:	08003489 	.word	0x08003489
 8003408:	080035cf 	.word	0x080035cf
 800340c:	080035cf 	.word	0x080035cf
 8003410:	080035cf 	.word	0x080035cf
 8003414:	080034cb 	.word	0x080034cb
 8003418:	080035cf 	.word	0x080035cf
 800341c:	080035cf 	.word	0x080035cf
 8003420:	080035cf 	.word	0x080035cf
 8003424:	0800350b 	.word	0x0800350b
 8003428:	080035cf 	.word	0x080035cf
 800342c:	080035cf 	.word	0x080035cf
 8003430:	080035cf 	.word	0x080035cf
 8003434:	0800354d 	.word	0x0800354d
 8003438:	080035cf 	.word	0x080035cf
 800343c:	080035cf 	.word	0x080035cf
 8003440:	080035cf 	.word	0x080035cf
 8003444:	0800358d 	.word	0x0800358d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f974 	bl	800373c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0208 	orr.w	r2, r2, #8
 8003462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0204 	bic.w	r2, r2, #4
 8003472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6999      	ldr	r1, [r3, #24]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	619a      	str	r2, [r3, #24]
      break;
 8003486:	e0a5      	b.n	80035d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f9ee 	bl	8003870 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699a      	ldr	r2, [r3, #24]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6999      	ldr	r1, [r3, #24]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	021a      	lsls	r2, r3, #8
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	619a      	str	r2, [r3, #24]
      break;
 80034c8:	e084      	b.n	80035d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fa61 	bl	8003998 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69da      	ldr	r2, [r3, #28]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0208 	orr.w	r2, r2, #8
 80034e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0204 	bic.w	r2, r2, #4
 80034f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69d9      	ldr	r1, [r3, #28]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	61da      	str	r2, [r3, #28]
      break;
 8003508:	e064      	b.n	80035d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fad3 	bl	8003abc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69d9      	ldr	r1, [r3, #28]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	021a      	lsls	r2, r3, #8
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	61da      	str	r2, [r3, #28]
      break;
 800354a:	e043      	b.n	80035d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fb22 	bl	8003b9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0208 	orr.w	r2, r2, #8
 8003566:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0204 	bic.w	r2, r2, #4
 8003576:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800358a:	e023      	b.n	80035d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fb6c 	bl	8003c70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	021a      	lsls	r2, r3, #8
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80035cc:	e002      	b.n	80035d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	75fb      	strb	r3, [r7, #23]
      break;
 80035d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop

080035e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a48      	ldr	r2, [pc, #288]	@ (800371c <TIM_Base_SetConfig+0x134>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d013      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003606:	d00f      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a45      	ldr	r2, [pc, #276]	@ (8003720 <TIM_Base_SetConfig+0x138>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00b      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a44      	ldr	r2, [pc, #272]	@ (8003724 <TIM_Base_SetConfig+0x13c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d007      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a43      	ldr	r2, [pc, #268]	@ (8003728 <TIM_Base_SetConfig+0x140>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a42      	ldr	r2, [pc, #264]	@ (800372c <TIM_Base_SetConfig+0x144>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d108      	bne.n	800363a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800362e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a37      	ldr	r2, [pc, #220]	@ (800371c <TIM_Base_SetConfig+0x134>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d01f      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003648:	d01b      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a34      	ldr	r2, [pc, #208]	@ (8003720 <TIM_Base_SetConfig+0x138>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d017      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a33      	ldr	r2, [pc, #204]	@ (8003724 <TIM_Base_SetConfig+0x13c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a32      	ldr	r2, [pc, #200]	@ (8003728 <TIM_Base_SetConfig+0x140>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00f      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a32      	ldr	r2, [pc, #200]	@ (8003730 <TIM_Base_SetConfig+0x148>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00b      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a31      	ldr	r2, [pc, #196]	@ (8003734 <TIM_Base_SetConfig+0x14c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d007      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a30      	ldr	r2, [pc, #192]	@ (8003738 <TIM_Base_SetConfig+0x150>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d003      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a2b      	ldr	r2, [pc, #172]	@ (800372c <TIM_Base_SetConfig+0x144>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d108      	bne.n	8003694 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a18      	ldr	r2, [pc, #96]	@ (800371c <TIM_Base_SetConfig+0x134>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <TIM_Base_SetConfig+0x100>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a19      	ldr	r2, [pc, #100]	@ (8003728 <TIM_Base_SetConfig+0x140>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00f      	beq.n	80036e8 <TIM_Base_SetConfig+0x100>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a19      	ldr	r2, [pc, #100]	@ (8003730 <TIM_Base_SetConfig+0x148>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00b      	beq.n	80036e8 <TIM_Base_SetConfig+0x100>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a18      	ldr	r2, [pc, #96]	@ (8003734 <TIM_Base_SetConfig+0x14c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d007      	beq.n	80036e8 <TIM_Base_SetConfig+0x100>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a17      	ldr	r2, [pc, #92]	@ (8003738 <TIM_Base_SetConfig+0x150>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d003      	beq.n	80036e8 <TIM_Base_SetConfig+0x100>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a12      	ldr	r2, [pc, #72]	@ (800372c <TIM_Base_SetConfig+0x144>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d103      	bne.n	80036f0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f023 0201 	bic.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	611a      	str	r2, [r3, #16]
  }
}
 800370e:	bf00      	nop
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40012c00 	.word	0x40012c00
 8003720:	40000400 	.word	0x40000400
 8003724:	40000800 	.word	0x40000800
 8003728:	40013400 	.word	0x40013400
 800372c:	40015000 	.word	0x40015000
 8003730:	40014000 	.word	0x40014000
 8003734:	40014400 	.word	0x40014400
 8003738:	40014800 	.word	0x40014800

0800373c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f023 0201 	bic.w	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800376a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800376e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0303 	bic.w	r3, r3, #3
 8003776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f023 0302 	bic.w	r3, r3, #2
 8003788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a30      	ldr	r2, [pc, #192]	@ (8003858 <TIM_OC1_SetConfig+0x11c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <TIM_OC1_SetConfig+0x88>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a2f      	ldr	r2, [pc, #188]	@ (800385c <TIM_OC1_SetConfig+0x120>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00f      	beq.n	80037c4 <TIM_OC1_SetConfig+0x88>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003860 <TIM_OC1_SetConfig+0x124>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00b      	beq.n	80037c4 <TIM_OC1_SetConfig+0x88>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003864 <TIM_OC1_SetConfig+0x128>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d007      	beq.n	80037c4 <TIM_OC1_SetConfig+0x88>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003868 <TIM_OC1_SetConfig+0x12c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d003      	beq.n	80037c4 <TIM_OC1_SetConfig+0x88>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a2b      	ldr	r2, [pc, #172]	@ (800386c <TIM_OC1_SetConfig+0x130>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d10c      	bne.n	80037de <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f023 0308 	bic.w	r3, r3, #8
 80037ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f023 0304 	bic.w	r3, r3, #4
 80037dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003858 <TIM_OC1_SetConfig+0x11c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <TIM_OC1_SetConfig+0xd2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a1c      	ldr	r2, [pc, #112]	@ (800385c <TIM_OC1_SetConfig+0x120>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00f      	beq.n	800380e <TIM_OC1_SetConfig+0xd2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003860 <TIM_OC1_SetConfig+0x124>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00b      	beq.n	800380e <TIM_OC1_SetConfig+0xd2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003864 <TIM_OC1_SetConfig+0x128>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d007      	beq.n	800380e <TIM_OC1_SetConfig+0xd2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a19      	ldr	r2, [pc, #100]	@ (8003868 <TIM_OC1_SetConfig+0x12c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d003      	beq.n	800380e <TIM_OC1_SetConfig+0xd2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a18      	ldr	r2, [pc, #96]	@ (800386c <TIM_OC1_SetConfig+0x130>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d111      	bne.n	8003832 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800381c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	621a      	str	r2, [r3, #32]
}
 800384c:	bf00      	nop
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40013400 	.word	0x40013400
 8003860:	40014000 	.word	0x40014000
 8003864:	40014400 	.word	0x40014400
 8003868:	40014800 	.word	0x40014800
 800386c:	40015000 	.word	0x40015000

08003870 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	f023 0210 	bic.w	r2, r3, #16
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800389e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f023 0320 	bic.w	r3, r3, #32
 80038be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003980 <TIM_OC2_SetConfig+0x110>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <TIM_OC2_SetConfig+0x74>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003984 <TIM_OC2_SetConfig+0x114>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_OC2_SetConfig+0x74>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a2a      	ldr	r2, [pc, #168]	@ (8003988 <TIM_OC2_SetConfig+0x118>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d10d      	bne.n	8003900 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a1f      	ldr	r2, [pc, #124]	@ (8003980 <TIM_OC2_SetConfig+0x110>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d013      	beq.n	8003930 <TIM_OC2_SetConfig+0xc0>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a1e      	ldr	r2, [pc, #120]	@ (8003984 <TIM_OC2_SetConfig+0x114>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00f      	beq.n	8003930 <TIM_OC2_SetConfig+0xc0>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a1e      	ldr	r2, [pc, #120]	@ (800398c <TIM_OC2_SetConfig+0x11c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00b      	beq.n	8003930 <TIM_OC2_SetConfig+0xc0>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a1d      	ldr	r2, [pc, #116]	@ (8003990 <TIM_OC2_SetConfig+0x120>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d007      	beq.n	8003930 <TIM_OC2_SetConfig+0xc0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a1c      	ldr	r2, [pc, #112]	@ (8003994 <TIM_OC2_SetConfig+0x124>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d003      	beq.n	8003930 <TIM_OC2_SetConfig+0xc0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a17      	ldr	r2, [pc, #92]	@ (8003988 <TIM_OC2_SetConfig+0x118>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d113      	bne.n	8003958 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003936:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800393e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	621a      	str	r2, [r3, #32]
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40012c00 	.word	0x40012c00
 8003984:	40013400 	.word	0x40013400
 8003988:	40015000 	.word	0x40015000
 800398c:	40014000 	.word	0x40014000
 8003990:	40014400 	.word	0x40014400
 8003994:	40014800 	.word	0x40014800

08003998 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0303 	bic.w	r3, r3, #3
 80039d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	021b      	lsls	r3, r3, #8
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa4 <TIM_OC3_SetConfig+0x10c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <TIM_OC3_SetConfig+0x72>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa8 <TIM_OC3_SetConfig+0x110>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d003      	beq.n	8003a0a <TIM_OC3_SetConfig+0x72>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a29      	ldr	r2, [pc, #164]	@ (8003aac <TIM_OC3_SetConfig+0x114>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d10d      	bne.n	8003a26 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a24:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa4 <TIM_OC3_SetConfig+0x10c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <TIM_OC3_SetConfig+0xbe>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa8 <TIM_OC3_SetConfig+0x110>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00f      	beq.n	8003a56 <TIM_OC3_SetConfig+0xbe>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab0 <TIM_OC3_SetConfig+0x118>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <TIM_OC3_SetConfig+0xbe>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab4 <TIM_OC3_SetConfig+0x11c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <TIM_OC3_SetConfig+0xbe>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab8 <TIM_OC3_SetConfig+0x120>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <TIM_OC3_SetConfig+0xbe>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a16      	ldr	r2, [pc, #88]	@ (8003aac <TIM_OC3_SetConfig+0x114>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d113      	bne.n	8003a7e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	621a      	str	r2, [r3, #32]
}
 8003a98:	bf00      	nop
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	40013400 	.word	0x40013400
 8003aac:	40015000 	.word	0x40015000
 8003ab0:	40014000 	.word	0x40014000
 8003ab4:	40014400 	.word	0x40014400
 8003ab8:	40014800 	.word	0x40014800

08003abc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	031b      	lsls	r3, r3, #12
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003b84 <TIM_OC4_SetConfig+0xc8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d013      	beq.n	8003b48 <TIM_OC4_SetConfig+0x8c>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a19      	ldr	r2, [pc, #100]	@ (8003b88 <TIM_OC4_SetConfig+0xcc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00f      	beq.n	8003b48 <TIM_OC4_SetConfig+0x8c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a18      	ldr	r2, [pc, #96]	@ (8003b8c <TIM_OC4_SetConfig+0xd0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00b      	beq.n	8003b48 <TIM_OC4_SetConfig+0x8c>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a17      	ldr	r2, [pc, #92]	@ (8003b90 <TIM_OC4_SetConfig+0xd4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d007      	beq.n	8003b48 <TIM_OC4_SetConfig+0x8c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a16      	ldr	r2, [pc, #88]	@ (8003b94 <TIM_OC4_SetConfig+0xd8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_OC4_SetConfig+0x8c>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a15      	ldr	r2, [pc, #84]	@ (8003b98 <TIM_OC4_SetConfig+0xdc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d109      	bne.n	8003b5c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	019b      	lsls	r3, r3, #6
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	40013400 	.word	0x40013400
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	40014400 	.word	0x40014400
 8003b94:	40014800 	.word	0x40014800
 8003b98:	40015000 	.word	0x40015000

08003b9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003be0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	041b      	lsls	r3, r3, #16
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <TIM_OC5_SetConfig+0xbc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <TIM_OC5_SetConfig+0x82>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a18      	ldr	r2, [pc, #96]	@ (8003c5c <TIM_OC5_SetConfig+0xc0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00f      	beq.n	8003c1e <TIM_OC5_SetConfig+0x82>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a17      	ldr	r2, [pc, #92]	@ (8003c60 <TIM_OC5_SetConfig+0xc4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00b      	beq.n	8003c1e <TIM_OC5_SetConfig+0x82>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a16      	ldr	r2, [pc, #88]	@ (8003c64 <TIM_OC5_SetConfig+0xc8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d007      	beq.n	8003c1e <TIM_OC5_SetConfig+0x82>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a15      	ldr	r2, [pc, #84]	@ (8003c68 <TIM_OC5_SetConfig+0xcc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_OC5_SetConfig+0x82>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a14      	ldr	r2, [pc, #80]	@ (8003c6c <TIM_OC5_SetConfig+0xd0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d109      	bne.n	8003c32 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	621a      	str	r2, [r3, #32]
}
 8003c4c:	bf00      	nop
 8003c4e:	371c      	adds	r7, #28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	40012c00 	.word	0x40012c00
 8003c5c:	40013400 	.word	0x40013400
 8003c60:	40014000 	.word	0x40014000
 8003c64:	40014400 	.word	0x40014400
 8003c68:	40014800 	.word	0x40014800
 8003c6c:	40015000 	.word	0x40015000

08003c70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	051b      	lsls	r3, r3, #20
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8003d30 <TIM_OC6_SetConfig+0xc0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d013      	beq.n	8003cf4 <TIM_OC6_SetConfig+0x84>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a19      	ldr	r2, [pc, #100]	@ (8003d34 <TIM_OC6_SetConfig+0xc4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00f      	beq.n	8003cf4 <TIM_OC6_SetConfig+0x84>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a18      	ldr	r2, [pc, #96]	@ (8003d38 <TIM_OC6_SetConfig+0xc8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <TIM_OC6_SetConfig+0x84>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a17      	ldr	r2, [pc, #92]	@ (8003d3c <TIM_OC6_SetConfig+0xcc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d007      	beq.n	8003cf4 <TIM_OC6_SetConfig+0x84>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a16      	ldr	r2, [pc, #88]	@ (8003d40 <TIM_OC6_SetConfig+0xd0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d003      	beq.n	8003cf4 <TIM_OC6_SetConfig+0x84>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a15      	ldr	r2, [pc, #84]	@ (8003d44 <TIM_OC6_SetConfig+0xd4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d109      	bne.n	8003d08 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	029b      	lsls	r3, r3, #10
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	40013400 	.word	0x40013400
 8003d38:	40014000 	.word	0x40014000
 8003d3c:	40014400 	.word	0x40014400
 8003d40:	40014800 	.word	0x40014800
 8003d44:	40015000 	.word	0x40015000

08003d48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a1a      	ldr	r2, [r3, #32]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a1a      	ldr	r2, [r3, #32]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	431a      	orrs	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]
}
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e06d      	b.n	8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a30      	ldr	r2, [pc, #192]	@ (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d009      	beq.n	8003dea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a2f      	ldr	r2, [pc, #188]	@ (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2d      	ldr	r2, [pc, #180]	@ (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d108      	bne.n	8003dfc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003df0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d01d      	beq.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e28:	d018      	beq.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d013      	beq.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00e      	beq.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a15      	ldr	r2, [pc, #84]	@ (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d009      	beq.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a16      	ldr	r2, [pc, #88]	@ (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d004      	beq.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a11      	ldr	r2, [pc, #68]	@ (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10c      	bne.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	40012c00 	.word	0x40012c00
 8003e98:	40013400 	.word	0x40013400
 8003e9c:	40015000 	.word	0x40015000
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40000800 	.word	0x40000800
 8003ea8:	40014000 	.word	0x40014000

08003eac <memset>:
 8003eac:	4402      	add	r2, r0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d100      	bne.n	8003eb6 <memset+0xa>
 8003eb4:	4770      	bx	lr
 8003eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eba:	e7f9      	b.n	8003eb0 <memset+0x4>

08003ebc <__libc_init_array>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	4d0d      	ldr	r5, [pc, #52]	@ (8003ef4 <__libc_init_array+0x38>)
 8003ec0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ef8 <__libc_init_array+0x3c>)
 8003ec2:	1b64      	subs	r4, r4, r5
 8003ec4:	10a4      	asrs	r4, r4, #2
 8003ec6:	2600      	movs	r6, #0
 8003ec8:	42a6      	cmp	r6, r4
 8003eca:	d109      	bne.n	8003ee0 <__libc_init_array+0x24>
 8003ecc:	4d0b      	ldr	r5, [pc, #44]	@ (8003efc <__libc_init_array+0x40>)
 8003ece:	4c0c      	ldr	r4, [pc, #48]	@ (8003f00 <__libc_init_array+0x44>)
 8003ed0:	f000 f818 	bl	8003f04 <_init>
 8003ed4:	1b64      	subs	r4, r4, r5
 8003ed6:	10a4      	asrs	r4, r4, #2
 8003ed8:	2600      	movs	r6, #0
 8003eda:	42a6      	cmp	r6, r4
 8003edc:	d105      	bne.n	8003eea <__libc_init_array+0x2e>
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee4:	4798      	blx	r3
 8003ee6:	3601      	adds	r6, #1
 8003ee8:	e7ee      	b.n	8003ec8 <__libc_init_array+0xc>
 8003eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eee:	4798      	blx	r3
 8003ef0:	3601      	adds	r6, #1
 8003ef2:	e7f2      	b.n	8003eda <__libc_init_array+0x1e>
 8003ef4:	08003f4c 	.word	0x08003f4c
 8003ef8:	08003f4c 	.word	0x08003f4c
 8003efc:	08003f4c 	.word	0x08003f4c
 8003f00:	08003f50 	.word	0x08003f50

08003f04 <_init>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	bf00      	nop
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr

08003f10 <_fini>:
 8003f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f12:	bf00      	nop
 8003f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f16:	bc08      	pop	{r3}
 8003f18:	469e      	mov	lr, r3
 8003f1a:	4770      	bx	lr
