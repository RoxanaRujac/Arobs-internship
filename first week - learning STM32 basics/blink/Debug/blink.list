
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003404  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003598  08003598  00004598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035d0  080035d0  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080035d0  080035d0  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080035d0  080035d0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035d0  080035d0  000045d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035d4  080035d4  000045d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080035d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000f8  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be4e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000173f  00000000  00000000  00010e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  000125d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000824  00000000  00000000  00013030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb29  00000000  00000000  00013854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d4cf  00000000  00000000  0003337d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6028  00000000  00000000  0004084c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00106874  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b68  00000000  00000000  001068b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00109420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003580 	.word	0x08003580

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003580 	.word	0x08003580

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa78 	bl	80006cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f818 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8f4 	bl	80003cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f8c2 	bl	800036c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80001e8:	f000 f874 	bl	80002d4 <MX_TIM16_Init>
  HAL_TIM_Base_Start(&htim16);
 80001ec:	4806      	ldr	r0, [pc, #24]	@ (8000208 <main+0x34>)
 80001ee:	f002 fa29 	bl	8002644 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    tim16_counter = __HAL_TIM_GET_COUNTER(&htim16);
 80001f2:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <main+0x34>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80001f8:	4a04      	ldr	r2, [pc, #16]	@ (800020c <main+0x38>)
 80001fa:	6013      	str	r3, [r2, #0]
    HAL_Delay(1000);
 80001fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000200:	f000 faca 	bl	8000798 <HAL_Delay>
    tim16_counter = __HAL_TIM_GET_COUNTER(&htim16);
 8000204:	bf00      	nop
 8000206:	e7f4      	b.n	80001f2 <main+0x1e>
 8000208:	20000028 	.word	0x20000028
 800020c:	200000fc 	.word	0x200000fc

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b0a6      	sub	sp, #152	@ 0x98
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800021a:	2228      	movs	r2, #40	@ 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f003 f981 	bl	8003526 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2258      	movs	r2, #88	@ 0x58
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f003 f973 	bl	8003526 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000240:	2302      	movs	r3, #2
 8000242:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000248:	2310      	movs	r3, #16
 800024a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000254:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000258:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000260:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800026e:	4618      	mov	r0, r3
 8000270:	f000 fd3e 	bl	8000cf0 <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800027a:	f000 f90d 	bl	8000498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800028e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000294:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f001 fd4c 	bl	8001d38 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002a6:	f000 f8f7 	bl	8000498 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM16;
 80002aa:	4b09      	ldr	r3, [pc, #36]	@ (80002d0 <SystemClock_Config+0xc0>)
 80002ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80002b2:	2300      	movs	r3, #0
 80002b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 ff4f 	bl	800215c <HAL_RCCEx_PeriphCLKConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80002c4:	f000 f8e8 	bl	8000498 <Error_Handler>
  }
}
 80002c8:	bf00      	nop
 80002ca:	3798      	adds	r7, #152	@ 0x98
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	00800002 	.word	0x00800002

080002d4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80002da:	463b      	mov	r3, r7
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80002e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000364 <MX_TIM16_Init+0x90>)
 80002e8:	4a1f      	ldr	r2, [pc, #124]	@ (8000368 <MX_TIM16_Init+0x94>)
 80002ea:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 80002ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000364 <MX_TIM16_Init+0x90>)
 80002ee:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80002f2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000364 <MX_TIM16_Init+0x90>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80002fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000364 <MX_TIM16_Init+0x90>)
 80002fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000300:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000302:	4b18      	ldr	r3, [pc, #96]	@ (8000364 <MX_TIM16_Init+0x90>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000308:	4b16      	ldr	r3, [pc, #88]	@ (8000364 <MX_TIM16_Init+0x90>)
 800030a:	2200      	movs	r2, #0
 800030c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030e:	4b15      	ldr	r3, [pc, #84]	@ (8000364 <MX_TIM16_Init+0x90>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000314:	4813      	ldr	r0, [pc, #76]	@ (8000364 <MX_TIM16_Init+0x90>)
 8000316:	f002 f93d 	bl	8002594 <HAL_TIM_Base_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_TIM16_Init+0x50>
  {
    Error_Handler();
 8000320:	f000 f8ba 	bl	8000498 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8000324:	480f      	ldr	r0, [pc, #60]	@ (8000364 <MX_TIM16_Init+0x90>)
 8000326:	f002 f9f5 	bl	8002714 <HAL_TIM_IC_Init>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000330:	f000 f8b2 	bl	8000498 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000334:	2300      	movs	r3, #0
 8000336:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000338:	2301      	movs	r3, #1
 800033a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000344:	463b      	mov	r3, r7
 8000346:	2200      	movs	r2, #0
 8000348:	4619      	mov	r1, r3
 800034a:	4806      	ldr	r0, [pc, #24]	@ (8000364 <MX_TIM16_Init+0x90>)
 800034c:	f002 fa43 	bl	80027d6 <HAL_TIM_IC_ConfigChannel>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_TIM16_Init+0x86>
  {
    Error_Handler();
 8000356:	f000 f89f 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000028 	.word	0x20000028
 8000368:	40014400 	.word	0x40014400

0800036c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000370:	4b14      	ldr	r3, [pc, #80]	@ (80003c4 <MX_USART2_UART_Init+0x58>)
 8000372:	4a15      	ldr	r2, [pc, #84]	@ (80003c8 <MX_USART2_UART_Init+0x5c>)
 8000374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000376:	4b13      	ldr	r3, [pc, #76]	@ (80003c4 <MX_USART2_UART_Init+0x58>)
 8000378:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800037c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800037e:	4b11      	ldr	r3, [pc, #68]	@ (80003c4 <MX_USART2_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000384:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <MX_USART2_UART_Init+0x58>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800038a:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <MX_USART2_UART_Init+0x58>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000390:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <MX_USART2_UART_Init+0x58>)
 8000392:	220c      	movs	r2, #12
 8000394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000396:	4b0b      	ldr	r3, [pc, #44]	@ (80003c4 <MX_USART2_UART_Init+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800039c:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <MX_USART2_UART_Init+0x58>)
 800039e:	2200      	movs	r2, #0
 80003a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003a2:	4b08      	ldr	r3, [pc, #32]	@ (80003c4 <MX_USART2_UART_Init+0x58>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003a8:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <MX_USART2_UART_Init+0x58>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ae:	4805      	ldr	r0, [pc, #20]	@ (80003c4 <MX_USART2_UART_Init+0x58>)
 80003b0:	f002 fc7c 	bl	8002cac <HAL_UART_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003ba:	f000 f86d 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000074 	.word	0x20000074
 80003c8:	40004400 	.word	0x40004400

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08a      	sub	sp, #40	@ 0x28
 80003d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d2:	f107 0314 	add.w	r3, r7, #20
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000490 <MX_GPIO_Init+0xc4>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000490 <MX_GPIO_Init+0xc4>)
 80003e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b28      	ldr	r3, [pc, #160]	@ (8000490 <MX_GPIO_Init+0xc4>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80003f6:	613b      	str	r3, [r7, #16]
 80003f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003fa:	4b25      	ldr	r3, [pc, #148]	@ (8000490 <MX_GPIO_Init+0xc4>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a24      	ldr	r2, [pc, #144]	@ (8000490 <MX_GPIO_Init+0xc4>)
 8000400:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000404:	6153      	str	r3, [r2, #20]
 8000406:	4b22      	ldr	r3, [pc, #136]	@ (8000490 <MX_GPIO_Init+0xc4>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000412:	4b1f      	ldr	r3, [pc, #124]	@ (8000490 <MX_GPIO_Init+0xc4>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a1e      	ldr	r2, [pc, #120]	@ (8000490 <MX_GPIO_Init+0xc4>)
 8000418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800041c:	6153      	str	r3, [r2, #20]
 800041e:	4b1c      	ldr	r3, [pc, #112]	@ (8000490 <MX_GPIO_Init+0xc4>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042a:	4b19      	ldr	r3, [pc, #100]	@ (8000490 <MX_GPIO_Init+0xc4>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a18      	ldr	r2, [pc, #96]	@ (8000490 <MX_GPIO_Init+0xc4>)
 8000430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000434:	6153      	str	r3, [r2, #20]
 8000436:	4b16      	ldr	r3, [pc, #88]	@ (8000490 <MX_GPIO_Init+0xc4>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2120      	movs	r1, #32
 8000446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800044a:	f000 fc39 	bl	8000cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800044e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000454:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800045e:	f107 0314 	add.w	r3, r7, #20
 8000462:	4619      	mov	r1, r3
 8000464:	480b      	ldr	r0, [pc, #44]	@ (8000494 <MX_GPIO_Init+0xc8>)
 8000466:	f000 faa1 	bl	80009ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800046a:	2320      	movs	r3, #32
 800046c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046e:	2301      	movs	r3, #1
 8000470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	2300      	movs	r3, #0
 8000478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	4619      	mov	r1, r3
 8000480:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000484:	f000 fa92 	bl	80009ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000488:	bf00      	nop
 800048a:	3728      	adds	r7, #40	@ 0x28
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000
 8000494:	48000800 	.word	0x48000800

08000498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049c:	b672      	cpsid	i
}
 800049e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <Error_Handler+0x8>

080004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004aa:	4b0f      	ldr	r3, [pc, #60]	@ (80004e8 <HAL_MspInit+0x44>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a0e      	ldr	r2, [pc, #56]	@ (80004e8 <HAL_MspInit+0x44>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <HAL_MspInit+0x44>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c2:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <HAL_MspInit+0x44>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	4a08      	ldr	r2, [pc, #32]	@ (80004e8 <HAL_MspInit+0x44>)
 80004c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004cc:	61d3      	str	r3, [r2, #28]
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <HAL_MspInit+0x44>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004da:	2007      	movs	r0, #7
 80004dc:	f000 fa32 	bl	8000944 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000

080004ec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b08a      	sub	sp, #40	@ 0x28
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM16)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a17      	ldr	r2, [pc, #92]	@ (8000568 <HAL_TIM_Base_MspInit+0x7c>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d128      	bne.n	8000560 <HAL_TIM_Base_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800050e:	4b17      	ldr	r3, [pc, #92]	@ (800056c <HAL_TIM_Base_MspInit+0x80>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4a16      	ldr	r2, [pc, #88]	@ (800056c <HAL_TIM_Base_MspInit+0x80>)
 8000514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000518:	6193      	str	r3, [r2, #24]
 800051a:	4b14      	ldr	r3, [pc, #80]	@ (800056c <HAL_TIM_Base_MspInit+0x80>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	4b11      	ldr	r3, [pc, #68]	@ (800056c <HAL_TIM_Base_MspInit+0x80>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a10      	ldr	r2, [pc, #64]	@ (800056c <HAL_TIM_Base_MspInit+0x80>)
 800052c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <HAL_TIM_Base_MspInit+0x80>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800053e:	2340      	movs	r3, #64	@ 0x40
 8000540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000542:	2302      	movs	r3, #2
 8000544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2300      	movs	r3, #0
 800054c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800054e:	2301      	movs	r3, #1
 8000550:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800055c:	f000 fa26 	bl	80009ac <HAL_GPIO_Init>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 8000560:	bf00      	nop
 8000562:	3728      	adds	r7, #40	@ 0x28
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40014400 	.word	0x40014400
 800056c:	40021000 	.word	0x40021000

08000570 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a17      	ldr	r2, [pc, #92]	@ (80005ec <HAL_UART_MspInit+0x7c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d128      	bne.n	80005e4 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000592:	4b17      	ldr	r3, [pc, #92]	@ (80005f0 <HAL_UART_MspInit+0x80>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	4a16      	ldr	r2, [pc, #88]	@ (80005f0 <HAL_UART_MspInit+0x80>)
 8000598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800059c:	61d3      	str	r3, [r2, #28]
 800059e:	4b14      	ldr	r3, [pc, #80]	@ (80005f0 <HAL_UART_MspInit+0x80>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <HAL_UART_MspInit+0x80>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a10      	ldr	r2, [pc, #64]	@ (80005f0 <HAL_UART_MspInit+0x80>)
 80005b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <HAL_UART_MspInit+0x80>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005c2:	230c      	movs	r3, #12
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c6:	2302      	movs	r3, #2
 80005c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2300      	movs	r3, #0
 80005d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005d2:	2307      	movs	r3, #7
 80005d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e0:	f000 f9e4 	bl	80009ac <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80005e4:	bf00      	nop
 80005e6:	3728      	adds	r7, #40	@ 0x28
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40004400 	.word	0x40004400
 80005f0:	40021000 	.word	0x40021000

080005f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <NMI_Handler+0x4>

080005fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <MemManage_Handler+0x4>

0800060c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <UsageFault_Handler+0x4>

0800061c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064a:	f000 f885 	bl	8000758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <SystemInit+0x20>)
 800065a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800065e:	4a05      	ldr	r2, [pc, #20]	@ (8000674 <SystemInit+0x20>)
 8000660:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000664:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000678:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006b0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800067c:	f7ff ffea 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000680:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000682:	490d      	ldr	r1, [pc, #52]	@ (80006b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000684:	4a0d      	ldr	r2, [pc, #52]	@ (80006bc <LoopForever+0xe>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000688:	e002      	b.n	8000690 <LoopCopyDataInit>

0800068a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800068c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068e:	3304      	adds	r3, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000694:	d3f9      	bcc.n	800068a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000696:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000698:	4c0a      	ldr	r4, [pc, #40]	@ (80006c4 <LoopForever+0x16>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800069c:	e001      	b.n	80006a2 <LoopFillZerobss>

0800069e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a0:	3204      	adds	r2, #4

080006a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a4:	d3fb      	bcc.n	800069e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006a6:	f002 ff47 	bl	8003538 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006aa:	f7ff fd93 	bl	80001d4 <main>

080006ae <LoopForever>:

LoopForever:
    b LoopForever
 80006ae:	e7fe      	b.n	80006ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006bc:	080035d8 	.word	0x080035d8
  ldr r2, =_sbss
 80006c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c4:	20000104 	.word	0x20000104

080006c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006c8:	e7fe      	b.n	80006c8 <ADC1_2_IRQHandler>
	...

080006cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d0:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <HAL_Init+0x28>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a07      	ldr	r2, [pc, #28]	@ (80006f4 <HAL_Init+0x28>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006dc:	2003      	movs	r0, #3
 80006de:	f000 f931 	bl	8000944 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f808 	bl	80006f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e8:	f7ff fedc 	bl	80004a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40022000 	.word	0x40022000

080006f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <HAL_InitTick+0x54>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <HAL_InitTick+0x58>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000712:	fbb2 f3f3 	udiv	r3, r2, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f93b 	bl	8000992 <HAL_SYSTICK_Config>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	e00e      	b.n	8000744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2b0f      	cmp	r3, #15
 800072a:	d80a      	bhi.n	8000742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800072c:	2200      	movs	r2, #0
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	f04f 30ff 	mov.w	r0, #4294967295
 8000734:	f000 f911 	bl	800095a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000738:	4a06      	ldr	r2, [pc, #24]	@ (8000754 <HAL_InitTick+0x5c>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
 8000740:	e000      	b.n	8000744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000000 	.word	0x20000000
 8000750:	20000008 	.word	0x20000008
 8000754:	20000004 	.word	0x20000004

08000758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <HAL_IncTick+0x20>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_IncTick+0x24>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4413      	add	r3, r2
 8000768:	4a04      	ldr	r2, [pc, #16]	@ (800077c <HAL_IncTick+0x24>)
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	20000008 	.word	0x20000008
 800077c:	20000100 	.word	0x20000100

08000780 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return uwTick;  
 8000784:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <HAL_GetTick+0x14>)
 8000786:	681b      	ldr	r3, [r3, #0]
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20000100 	.word	0x20000100

08000798 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007a0:	f7ff ffee 	bl	8000780 <HAL_GetTick>
 80007a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b0:	d005      	beq.n	80007be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <HAL_Delay+0x44>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	461a      	mov	r2, r3
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	4413      	add	r3, r2
 80007bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007be:	bf00      	nop
 80007c0:	f7ff ffde 	bl	8000780 <HAL_GetTick>
 80007c4:	4602      	mov	r2, r0
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d8f7      	bhi.n	80007c0 <HAL_Delay+0x28>
  {
  }
}
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000008 	.word	0x20000008

080007e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007fc:	4013      	ands	r3, r2
 80007fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000808:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800080c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000812:	4a04      	ldr	r2, [pc, #16]	@ (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	60d3      	str	r3, [r2, #12]
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800082c:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <__NVIC_GetPriorityGrouping+0x18>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	0a1b      	lsrs	r3, r3, #8
 8000832:	f003 0307 	and.w	r3, r3, #7
}
 8000836:	4618      	mov	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000854:	2b00      	cmp	r3, #0
 8000856:	db0a      	blt.n	800086e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	b2da      	uxtb	r2, r3
 800085c:	490c      	ldr	r1, [pc, #48]	@ (8000890 <__NVIC_SetPriority+0x4c>)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	0112      	lsls	r2, r2, #4
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	440b      	add	r3, r1
 8000868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800086c:	e00a      	b.n	8000884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4908      	ldr	r1, [pc, #32]	@ (8000894 <__NVIC_SetPriority+0x50>)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	f003 030f 	and.w	r3, r3, #15
 800087a:	3b04      	subs	r3, #4
 800087c:	0112      	lsls	r2, r2, #4
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	440b      	add	r3, r1
 8000882:	761a      	strb	r2, [r3, #24]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000e100 	.word	0xe000e100
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000898:	b480      	push	{r7}
 800089a:	b089      	sub	sp, #36	@ 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	f1c3 0307 	rsb	r3, r3, #7
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	bf28      	it	cs
 80008b6:	2304      	movcs	r3, #4
 80008b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3304      	adds	r3, #4
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d902      	bls.n	80008c8 <NVIC_EncodePriority+0x30>
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3b03      	subs	r3, #3
 80008c6:	e000      	b.n	80008ca <NVIC_EncodePriority+0x32>
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008cc:	f04f 32ff 	mov.w	r2, #4294967295
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43da      	mvns	r2, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	401a      	ands	r2, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e0:	f04f 31ff 	mov.w	r1, #4294967295
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ea:	43d9      	mvns	r1, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	4313      	orrs	r3, r2
         );
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3724      	adds	r7, #36	@ 0x24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000910:	d301      	bcc.n	8000916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000912:	2301      	movs	r3, #1
 8000914:	e00f      	b.n	8000936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000916:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <SysTick_Config+0x40>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800091e:	210f      	movs	r1, #15
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	f7ff ff8e 	bl	8000844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <SysTick_Config+0x40>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092e:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <SysTick_Config+0x40>)
 8000930:	2207      	movs	r2, #7
 8000932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	e000e010 	.word	0xe000e010

08000944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ff47 	bl	80007e0 <__NVIC_SetPriorityGrouping>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800096c:	f7ff ff5c 	bl	8000828 <__NVIC_GetPriorityGrouping>
 8000970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	68b9      	ldr	r1, [r7, #8]
 8000976:	6978      	ldr	r0, [r7, #20]
 8000978:	f7ff ff8e 	bl	8000898 <NVIC_EncodePriority>
 800097c:	4602      	mov	r2, r0
 800097e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff5d 	bl	8000844 <__NVIC_SetPriority>
}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ffb0 	bl	8000900 <SysTick_Config>
 80009a0:	4603      	mov	r3, r0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b087      	sub	sp, #28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ba:	e160      	b.n	8000c7e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	2101      	movs	r1, #1
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	4013      	ands	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f000 8152 	beq.w	8000c78 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f003 0303 	and.w	r3, r3, #3
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d005      	beq.n	80009ec <HAL_GPIO_Init+0x40>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f003 0303 	and.w	r3, r3, #3
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d130      	bne.n	8000a4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	2203      	movs	r2, #3
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	68da      	ldr	r2, [r3, #12]
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a22:	2201      	movs	r2, #1
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	091b      	lsrs	r3, r3, #4
 8000a38:	f003 0201 	and.w	r2, r3, #1
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 0303 	and.w	r3, r3, #3
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d017      	beq.n	8000a8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	2203      	movs	r2, #3
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	689a      	ldr	r2, [r3, #8]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f003 0303 	and.w	r3, r3, #3
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d123      	bne.n	8000ade <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	08da      	lsrs	r2, r3, #3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3208      	adds	r2, #8
 8000a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	220f      	movs	r2, #15
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	691a      	ldr	r2, [r3, #16]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	f003 0307 	and.w	r3, r3, #7
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	08da      	lsrs	r2, r3, #3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3208      	adds	r2, #8
 8000ad8:	6939      	ldr	r1, [r7, #16]
 8000ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	2203      	movs	r2, #3
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f003 0203 	and.w	r2, r3, #3
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 80ac 	beq.w	8000c78 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b20:	4b5e      	ldr	r3, [pc, #376]	@ (8000c9c <HAL_GPIO_Init+0x2f0>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a5d      	ldr	r2, [pc, #372]	@ (8000c9c <HAL_GPIO_Init+0x2f0>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b5b      	ldr	r3, [pc, #364]	@ (8000c9c <HAL_GPIO_Init+0x2f0>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b38:	4a59      	ldr	r2, [pc, #356]	@ (8000ca0 <HAL_GPIO_Init+0x2f4>)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	089b      	lsrs	r3, r3, #2
 8000b3e:	3302      	adds	r3, #2
 8000b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	f003 0303 	and.w	r3, r3, #3
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	220f      	movs	r2, #15
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b62:	d025      	beq.n	8000bb0 <HAL_GPIO_Init+0x204>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a4f      	ldr	r2, [pc, #316]	@ (8000ca4 <HAL_GPIO_Init+0x2f8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d01f      	beq.n	8000bac <HAL_GPIO_Init+0x200>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a4e      	ldr	r2, [pc, #312]	@ (8000ca8 <HAL_GPIO_Init+0x2fc>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d019      	beq.n	8000ba8 <HAL_GPIO_Init+0x1fc>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a4d      	ldr	r2, [pc, #308]	@ (8000cac <HAL_GPIO_Init+0x300>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d013      	beq.n	8000ba4 <HAL_GPIO_Init+0x1f8>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a4c      	ldr	r2, [pc, #304]	@ (8000cb0 <HAL_GPIO_Init+0x304>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d00d      	beq.n	8000ba0 <HAL_GPIO_Init+0x1f4>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a4b      	ldr	r2, [pc, #300]	@ (8000cb4 <HAL_GPIO_Init+0x308>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d007      	beq.n	8000b9c <HAL_GPIO_Init+0x1f0>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a4a      	ldr	r2, [pc, #296]	@ (8000cb8 <HAL_GPIO_Init+0x30c>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d101      	bne.n	8000b98 <HAL_GPIO_Init+0x1ec>
 8000b94:	2306      	movs	r3, #6
 8000b96:	e00c      	b.n	8000bb2 <HAL_GPIO_Init+0x206>
 8000b98:	2307      	movs	r3, #7
 8000b9a:	e00a      	b.n	8000bb2 <HAL_GPIO_Init+0x206>
 8000b9c:	2305      	movs	r3, #5
 8000b9e:	e008      	b.n	8000bb2 <HAL_GPIO_Init+0x206>
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	e006      	b.n	8000bb2 <HAL_GPIO_Init+0x206>
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	e004      	b.n	8000bb2 <HAL_GPIO_Init+0x206>
 8000ba8:	2302      	movs	r3, #2
 8000baa:	e002      	b.n	8000bb2 <HAL_GPIO_Init+0x206>
 8000bac:	2301      	movs	r3, #1
 8000bae:	e000      	b.n	8000bb2 <HAL_GPIO_Init+0x206>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	f002 0203 	and.w	r2, r2, #3
 8000bb8:	0092      	lsls	r2, r2, #2
 8000bba:	4093      	lsls	r3, r2
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bc2:	4937      	ldr	r1, [pc, #220]	@ (8000ca0 <HAL_GPIO_Init+0x2f4>)
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	089b      	lsrs	r3, r3, #2
 8000bc8:	3302      	adds	r3, #2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bd0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cbc <HAL_GPIO_Init+0x310>)
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bf4:	4a31      	ldr	r2, [pc, #196]	@ (8000cbc <HAL_GPIO_Init+0x310>)
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bfa:	4b30      	ldr	r3, [pc, #192]	@ (8000cbc <HAL_GPIO_Init+0x310>)
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c1e:	4a27      	ldr	r2, [pc, #156]	@ (8000cbc <HAL_GPIO_Init+0x310>)
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c24:	4b25      	ldr	r3, [pc, #148]	@ (8000cbc <HAL_GPIO_Init+0x310>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d003      	beq.n	8000c48 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c48:	4a1c      	ldr	r2, [pc, #112]	@ (8000cbc <HAL_GPIO_Init+0x310>)
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cbc <HAL_GPIO_Init+0x310>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	43db      	mvns	r3, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c72:	4a12      	ldr	r2, [pc, #72]	@ (8000cbc <HAL_GPIO_Init+0x310>)
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	fa22 f303 	lsr.w	r3, r2, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f47f ae97 	bne.w	80009bc <HAL_GPIO_Init+0x10>
  }
}
 8000c8e:	bf00      	nop
 8000c90:	bf00      	nop
 8000c92:	371c      	adds	r7, #28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010000 	.word	0x40010000
 8000ca4:	48000400 	.word	0x48000400
 8000ca8:	48000800 	.word	0x48000800
 8000cac:	48000c00 	.word	0x48000c00
 8000cb0:	48001000 	.word	0x48001000
 8000cb4:	48001400 	.word	0x48001400
 8000cb8:	48001800 	.word	0x48001800
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	807b      	strh	r3, [r7, #2]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cd0:	787b      	ldrb	r3, [r7, #1]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cd6:	887a      	ldrh	r2, [r7, #2]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cdc:	e002      	b.n	8000ce4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cde:	887a      	ldrh	r2, [r7, #2]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cfc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d00:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d06:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	f001 b80a 	b.w	8001d2a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 8161 	beq.w	8000fee <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d2c:	4bae      	ldr	r3, [pc, #696]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 030c 	and.w	r3, r3, #12
 8000d34:	2b04      	cmp	r3, #4
 8000d36:	d00c      	beq.n	8000d52 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d38:	4bab      	ldr	r3, [pc, #684]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 030c 	and.w	r3, r3, #12
 8000d40:	2b08      	cmp	r3, #8
 8000d42:	d157      	bne.n	8000df4 <HAL_RCC_OscConfig+0x104>
 8000d44:	4ba8      	ldr	r3, [pc, #672]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d50:	d150      	bne.n	8000df4 <HAL_RCC_OscConfig+0x104>
 8000d52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d56:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000d5e:	fa93 f3a3 	rbit	r3, r3
 8000d62:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6a:	fab3 f383 	clz	r3, r3
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d72:	d802      	bhi.n	8000d7a <HAL_RCC_OscConfig+0x8a>
 8000d74:	4b9c      	ldr	r3, [pc, #624]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	e015      	b.n	8000da6 <HAL_RCC_OscConfig+0xb6>
 8000d7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d7e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000d86:	fa93 f3a3 	rbit	r3, r3
 8000d8a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000d8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d92:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000d96:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000d9a:	fa93 f3a3 	rbit	r3, r3
 8000d9e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000da2:	4b91      	ldr	r3, [pc, #580]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000daa:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000dae:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000db2:	fa92 f2a2 	rbit	r2, r2
 8000db6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000dba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000dbe:	fab2 f282 	clz	r2, r2
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	f042 0220 	orr.w	r2, r2, #32
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	f002 021f 	and.w	r2, r2, #31
 8000dce:	2101      	movs	r1, #1
 8000dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 8108 	beq.w	8000fec <HAL_RCC_OscConfig+0x2fc>
 8000ddc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000de0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f040 80ff 	bne.w	8000fec <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f000 bf9b 	b.w	8001d2a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000df8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e04:	d106      	bne.n	8000e14 <HAL_RCC_OscConfig+0x124>
 8000e06:	4b78      	ldr	r3, [pc, #480]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a77      	ldr	r2, [pc, #476]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e036      	b.n	8000e82 <HAL_RCC_OscConfig+0x192>
 8000e14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10c      	bne.n	8000e3e <HAL_RCC_OscConfig+0x14e>
 8000e24:	4b70      	ldr	r3, [pc, #448]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a6f      	ldr	r2, [pc, #444]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b6d      	ldr	r3, [pc, #436]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a6c      	ldr	r2, [pc, #432]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000e36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	e021      	b.n	8000e82 <HAL_RCC_OscConfig+0x192>
 8000e3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e42:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e4e:	d10c      	bne.n	8000e6a <HAL_RCC_OscConfig+0x17a>
 8000e50:	4b65      	ldr	r3, [pc, #404]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a64      	ldr	r2, [pc, #400]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000e56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b62      	ldr	r3, [pc, #392]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a61      	ldr	r2, [pc, #388]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	e00b      	b.n	8000e82 <HAL_RCC_OscConfig+0x192>
 8000e6a:	4b5f      	ldr	r3, [pc, #380]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a5e      	ldr	r2, [pc, #376]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	4b5c      	ldr	r3, [pc, #368]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a5b      	ldr	r2, [pc, #364]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000e7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e80:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e86:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d054      	beq.n	8000f3c <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e92:	f7ff fc75 	bl	8000780 <HAL_GetTick>
 8000e96:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9a:	e00a      	b.n	8000eb2 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e9c:	f7ff fc70 	bl	8000780 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b64      	cmp	r3, #100	@ 0x64
 8000eaa:	d902      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	f000 bf3c 	b.w	8001d2a <HAL_RCC_OscConfig+0x103a>
 8000eb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eb6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eba:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000ebe:	fa93 f3a3 	rbit	r3, r3
 8000ec2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000ec6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eca:	fab3 f383 	clz	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ed2:	d802      	bhi.n	8000eda <HAL_RCC_OscConfig+0x1ea>
 8000ed4:	4b44      	ldr	r3, [pc, #272]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	e015      	b.n	8000f06 <HAL_RCC_OscConfig+0x216>
 8000eda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ede:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000ee6:	fa93 f3a3 	rbit	r3, r3
 8000eea:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000eee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ef2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000ef6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000efa:	fa93 f3a3 	rbit	r3, r3
 8000efe:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f02:	4b39      	ldr	r3, [pc, #228]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f06:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f0a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000f0e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000f12:	fa92 f2a2 	rbit	r2, r2
 8000f16:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000f1a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f1e:	fab2 f282 	clz	r2, r2
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	f042 0220 	orr.w	r2, r2, #32
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	f002 021f 	and.w	r2, r2, #31
 8000f2e:	2101      	movs	r1, #1
 8000f30:	fa01 f202 	lsl.w	r2, r1, r2
 8000f34:	4013      	ands	r3, r2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d0b0      	beq.n	8000e9c <HAL_RCC_OscConfig+0x1ac>
 8000f3a:	e058      	b.n	8000fee <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fc20 	bl	8000780 <HAL_GetTick>
 8000f40:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f44:	e00a      	b.n	8000f5c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f46:	f7ff fc1b 	bl	8000780 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b64      	cmp	r3, #100	@ 0x64
 8000f54:	d902      	bls.n	8000f5c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	f000 bee7 	b.w	8001d2a <HAL_RCC_OscConfig+0x103a>
 8000f5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f60:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000f68:	fa93 f3a3 	rbit	r3, r3
 8000f6c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000f70:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f74:	fab3 f383 	clz	r3, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f7c:	d802      	bhi.n	8000f84 <HAL_RCC_OscConfig+0x294>
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	e015      	b.n	8000fb0 <HAL_RCC_OscConfig+0x2c0>
 8000f84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f88:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000f90:	fa93 f3a3 	rbit	r3, r3
 8000f94:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000f98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f9c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000fa0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000fa4:	fa93 f3a3 	rbit	r3, r3
 8000fa8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000fac:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <HAL_RCC_OscConfig+0x2f8>)
 8000fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fb4:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000fb8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000fbc:	fa92 f2a2 	rbit	r2, r2
 8000fc0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000fc4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000fc8:	fab2 f282 	clz	r2, r2
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	f042 0220 	orr.w	r2, r2, #32
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	f002 021f 	and.w	r2, r2, #31
 8000fd8:	2101      	movs	r1, #1
 8000fda:	fa01 f202 	lsl.w	r2, r1, r2
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1b0      	bne.n	8000f46 <HAL_RCC_OscConfig+0x256>
 8000fe4:	e003      	b.n	8000fee <HAL_RCC_OscConfig+0x2fe>
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ff2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 816d 	beq.w	80012de <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001004:	4bcd      	ldr	r3, [pc, #820]	@ (800133c <HAL_RCC_OscConfig+0x64c>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 030c 	and.w	r3, r3, #12
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00c      	beq.n	800102a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001010:	4bca      	ldr	r3, [pc, #808]	@ (800133c <HAL_RCC_OscConfig+0x64c>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	2b08      	cmp	r3, #8
 800101a:	d16e      	bne.n	80010fa <HAL_RCC_OscConfig+0x40a>
 800101c:	4bc7      	ldr	r3, [pc, #796]	@ (800133c <HAL_RCC_OscConfig+0x64c>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001024:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001028:	d167      	bne.n	80010fa <HAL_RCC_OscConfig+0x40a>
 800102a:	2302      	movs	r3, #2
 800102c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001030:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001034:	fa93 f3a3 	rbit	r3, r3
 8001038:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800103c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001040:	fab3 f383 	clz	r3, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b3f      	cmp	r3, #63	@ 0x3f
 8001048:	d802      	bhi.n	8001050 <HAL_RCC_OscConfig+0x360>
 800104a:	4bbc      	ldr	r3, [pc, #752]	@ (800133c <HAL_RCC_OscConfig+0x64c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	e013      	b.n	8001078 <HAL_RCC_OscConfig+0x388>
 8001050:	2302      	movs	r3, #2
 8001052:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001056:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800105a:	fa93 f3a3 	rbit	r3, r3
 800105e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001068:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800106c:	fa93 f3a3 	rbit	r3, r3
 8001070:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001074:	4bb1      	ldr	r3, [pc, #708]	@ (800133c <HAL_RCC_OscConfig+0x64c>)
 8001076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001078:	2202      	movs	r2, #2
 800107a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800107e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001082:	fa92 f2a2 	rbit	r2, r2
 8001086:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800108a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800108e:	fab2 f282 	clz	r2, r2
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	f042 0220 	orr.w	r2, r2, #32
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	f002 021f 	and.w	r2, r2, #31
 800109e:	2101      	movs	r1, #1
 80010a0:	fa01 f202 	lsl.w	r2, r1, r2
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00a      	beq.n	80010c0 <HAL_RCC_OscConfig+0x3d0>
 80010aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d002      	beq.n	80010c0 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	f000 be35 	b.w	8001d2a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c0:	4b9e      	ldr	r3, [pc, #632]	@ (800133c <HAL_RCC_OscConfig+0x64c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	21f8      	movs	r1, #248	@ 0xf8
 80010d6:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80010de:	fa91 f1a1 	rbit	r1, r1
 80010e2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80010e6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80010ea:	fab1 f181 	clz	r1, r1
 80010ee:	b2c9      	uxtb	r1, r1
 80010f0:	408b      	lsls	r3, r1
 80010f2:	4992      	ldr	r1, [pc, #584]	@ (800133c <HAL_RCC_OscConfig+0x64c>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f8:	e0f1      	b.n	80012de <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 8083 	beq.w	8001212 <HAL_RCC_OscConfig+0x522>
 800110c:	2301      	movs	r3, #1
 800110e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001112:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001116:	fa93 f3a3 	rbit	r3, r3
 800111a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800111e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001122:	fab3 f383 	clz	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800112c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	461a      	mov	r2, r3
 8001134:	2301      	movs	r3, #1
 8001136:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001138:	f7ff fb22 	bl	8000780 <HAL_GetTick>
 800113c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001140:	e00a      	b.n	8001158 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001142:	f7ff fb1d 	bl	8000780 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d902      	bls.n	8001158 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	f000 bde9 	b.w	8001d2a <HAL_RCC_OscConfig+0x103a>
 8001158:	2302      	movs	r3, #2
 800115a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800116a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116e:	fab3 f383 	clz	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b3f      	cmp	r3, #63	@ 0x3f
 8001176:	d802      	bhi.n	800117e <HAL_RCC_OscConfig+0x48e>
 8001178:	4b70      	ldr	r3, [pc, #448]	@ (800133c <HAL_RCC_OscConfig+0x64c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	e013      	b.n	80011a6 <HAL_RCC_OscConfig+0x4b6>
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001190:	2302      	movs	r3, #2
 8001192:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001196:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800119a:	fa93 f3a3 	rbit	r3, r3
 800119e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80011a2:	4b66      	ldr	r3, [pc, #408]	@ (800133c <HAL_RCC_OscConfig+0x64c>)
 80011a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a6:	2202      	movs	r2, #2
 80011a8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80011ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80011b0:	fa92 f2a2 	rbit	r2, r2
 80011b4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80011b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80011bc:	fab2 f282 	clz	r2, r2
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	f042 0220 	orr.w	r2, r2, #32
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	f002 021f 	and.w	r2, r2, #31
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0b4      	beq.n	8001142 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d8:	4b58      	ldr	r3, [pc, #352]	@ (800133c <HAL_RCC_OscConfig+0x64c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	21f8      	movs	r1, #248	@ 0xf8
 80011ee:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80011f6:	fa91 f1a1 	rbit	r1, r1
 80011fa:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80011fe:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001202:	fab1 f181 	clz	r1, r1
 8001206:	b2c9      	uxtb	r1, r1
 8001208:	408b      	lsls	r3, r1
 800120a:	494c      	ldr	r1, [pc, #304]	@ (800133c <HAL_RCC_OscConfig+0x64c>)
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
 8001210:	e065      	b.n	80012de <HAL_RCC_OscConfig+0x5ee>
 8001212:	2301      	movs	r3, #1
 8001214:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001224:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001228:	fab3 f383 	clz	r3, r3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001232:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	461a      	mov	r2, r3
 800123a:	2300      	movs	r3, #0
 800123c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fa9f 	bl	8000780 <HAL_GetTick>
 8001242:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	e00a      	b.n	800125e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001248:	f7ff fa9a 	bl	8000780 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d902      	bls.n	800125e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	f000 bd66 	b.w	8001d2a <HAL_RCC_OscConfig+0x103a>
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001264:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001270:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001274:	fab3 f383 	clz	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b3f      	cmp	r3, #63	@ 0x3f
 800127c:	d802      	bhi.n	8001284 <HAL_RCC_OscConfig+0x594>
 800127e:	4b2f      	ldr	r3, [pc, #188]	@ (800133c <HAL_RCC_OscConfig+0x64c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	e013      	b.n	80012ac <HAL_RCC_OscConfig+0x5bc>
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800129c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80012a8:	4b24      	ldr	r3, [pc, #144]	@ (800133c <HAL_RCC_OscConfig+0x64c>)
 80012aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ac:	2202      	movs	r2, #2
 80012ae:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80012b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80012b6:	fa92 f2a2 	rbit	r2, r2
 80012ba:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80012be:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80012c2:	fab2 f282 	clz	r2, r2
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	f042 0220 	orr.w	r2, r2, #32
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	f002 021f 	and.w	r2, r2, #31
 80012d2:	2101      	movs	r1, #1
 80012d4:	fa01 f202 	lsl.w	r2, r1, r2
 80012d8:	4013      	ands	r3, r2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1b4      	bne.n	8001248 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8119 	beq.w	8001526 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 8082 	beq.w	800140a <HAL_RCC_OscConfig+0x71a>
 8001306:	2301      	movs	r3, #1
 8001308:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001310:	fa93 f3a3 	rbit	r3, r3
 8001314:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001318:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	461a      	mov	r2, r3
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_RCC_OscConfig+0x650>)
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	461a      	mov	r2, r3
 800132c:	2301      	movs	r3, #1
 800132e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001330:	f7ff fa26 	bl	8000780 <HAL_GetTick>
 8001334:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001338:	e00f      	b.n	800135a <HAL_RCC_OscConfig+0x66a>
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001344:	f7ff fa1c 	bl	8000780 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d902      	bls.n	800135a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	f000 bce8 	b.w	8001d2a <HAL_RCC_OscConfig+0x103a>
 800135a:	2302      	movs	r3, #2
 800135c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001364:	fa93 f2a3 	rbit	r2, r3
 8001368:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800136c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001376:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800137a:	2202      	movs	r2, #2
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001382:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	fa93 f2a3 	rbit	r2, r3
 800138c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800139a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800139e:	2202      	movs	r2, #2
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	fa93 f2a3 	rbit	r2, r3
 80013b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ba:	4bb0      	ldr	r3, [pc, #704]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 80013bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013c6:	2102      	movs	r1, #2
 80013c8:	6019      	str	r1, [r3, #0]
 80013ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	fa93 f1a3 	rbit	r1, r3
 80013d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013e0:	6019      	str	r1, [r3, #0]
  return result;
 80013e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	fab3 f383 	clz	r3, r3
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	f003 031f 	and.w	r3, r3, #31
 80013fc:	2101      	movs	r1, #1
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d09d      	beq.n	8001344 <HAL_RCC_OscConfig+0x654>
 8001408:	e08d      	b.n	8001526 <HAL_RCC_OscConfig+0x836>
 800140a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800140e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800141a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	fa93 f2a3 	rbit	r2, r3
 8001424:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001428:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800142c:	601a      	str	r2, [r3, #0]
  return result;
 800142e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001432:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001436:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001438:	fab3 f383 	clz	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	4b8f      	ldr	r3, [pc, #572]	@ (8001680 <HAL_RCC_OscConfig+0x990>)
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	461a      	mov	r2, r3
 8001448:	2300      	movs	r3, #0
 800144a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144c:	f7ff f998 	bl	8000780 <HAL_GetTick>
 8001450:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001456:	f7ff f993 	bl	8000780 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d902      	bls.n	800146c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	f000 bc5f 	b.w	8001d2a <HAL_RCC_OscConfig+0x103a>
 800146c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001470:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001474:	2202      	movs	r2, #2
 8001476:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800147c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	fa93 f2a3 	rbit	r2, r3
 8001486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800148a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001494:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001498:	2202      	movs	r2, #2
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	fa93 f2a3 	rbit	r2, r3
 80014aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014bc:	2202      	movs	r2, #2
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	fa93 f2a3 	rbit	r2, r3
 80014ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80014d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	4b68      	ldr	r3, [pc, #416]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 80014da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80014e4:	2102      	movs	r1, #2
 80014e6:	6019      	str	r1, [r3, #0]
 80014e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	fa93 f1a3 	rbit	r1, r3
 80014f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014fa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014fe:	6019      	str	r1, [r3, #0]
  return result;
 8001500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001504:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	fab3 f383 	clz	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	2101      	movs	r1, #1
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	4013      	ands	r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d197      	bne.n	8001456 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 819c 	beq.w	8001874 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153c:	2300      	movs	r3, #0
 800153e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001542:	4b4e      	ldr	r3, [pc, #312]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d116      	bne.n	800157c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	4b4b      	ldr	r3, [pc, #300]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4a4a      	ldr	r2, [pc, #296]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001558:	61d3      	str	r3, [r2, #28]
 800155a:	4b48      	ldr	r3, [pc, #288]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001562:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001566:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001570:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001574:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001576:	2301      	movs	r3, #1
 8001578:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	4b41      	ldr	r3, [pc, #260]	@ (8001684 <HAL_RCC_OscConfig+0x994>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d11a      	bne.n	80015be <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001588:	4b3e      	ldr	r3, [pc, #248]	@ (8001684 <HAL_RCC_OscConfig+0x994>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a3d      	ldr	r2, [pc, #244]	@ (8001684 <HAL_RCC_OscConfig+0x994>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001592:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001594:	f7ff f8f4 	bl	8000780 <HAL_GetTick>
 8001598:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	e009      	b.n	80015b2 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159e:	f7ff f8ef 	bl	8000780 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	@ 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e3bb      	b.n	8001d2a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b2:	4b34      	ldr	r3, [pc, #208]	@ (8001684 <HAL_RCC_OscConfig+0x994>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0ef      	beq.n	800159e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d106      	bne.n	80015dc <HAL_RCC_OscConfig+0x8ec>
 80015ce:	4b2b      	ldr	r3, [pc, #172]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4a2a      	ldr	r2, [pc, #168]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6213      	str	r3, [r2, #32]
 80015da:	e035      	b.n	8001648 <HAL_RCC_OscConfig+0x958>
 80015dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10c      	bne.n	8001606 <HAL_RCC_OscConfig+0x916>
 80015ec:	4b23      	ldr	r3, [pc, #140]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4a22      	ldr	r2, [pc, #136]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 80015f2:	f023 0301 	bic.w	r3, r3, #1
 80015f6:	6213      	str	r3, [r2, #32]
 80015f8:	4b20      	ldr	r3, [pc, #128]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4a1f      	ldr	r2, [pc, #124]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 80015fe:	f023 0304 	bic.w	r3, r3, #4
 8001602:	6213      	str	r3, [r2, #32]
 8001604:	e020      	b.n	8001648 <HAL_RCC_OscConfig+0x958>
 8001606:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800160a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b05      	cmp	r3, #5
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x940>
 8001616:	4b19      	ldr	r3, [pc, #100]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	4a18      	ldr	r2, [pc, #96]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6213      	str	r3, [r2, #32]
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	4a15      	ldr	r2, [pc, #84]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6213      	str	r3, [r2, #32]
 800162e:	e00b      	b.n	8001648 <HAL_RCC_OscConfig+0x958>
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4a11      	ldr	r2, [pc, #68]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	6213      	str	r3, [r2, #32]
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a0e      	ldr	r2, [pc, #56]	@ (800167c <HAL_RCC_OscConfig+0x98c>)
 8001642:	f023 0304 	bic.w	r3, r3, #4
 8001646:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001648:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800164c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 8085 	beq.w	8001764 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff f891 	bl	8000780 <HAL_GetTick>
 800165e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001662:	e011      	b.n	8001688 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001664:	f7ff f88c 	bl	8000780 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001674:	4293      	cmp	r3, r2
 8001676:	d907      	bls.n	8001688 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e356      	b.n	8001d2a <HAL_RCC_OscConfig+0x103a>
 800167c:	40021000 	.word	0x40021000
 8001680:	10908120 	.word	0x10908120
 8001684:	40007000 	.word	0x40007000
 8001688:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800168c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001690:	2202      	movs	r2, #2
 8001692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001694:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001698:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	fa93 f2a3 	rbit	r2, r3
 80016a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016b0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80016b4:	2202      	movs	r2, #2
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016bc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	fa93 f2a3 	rbit	r2, r3
 80016c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ca:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80016ce:	601a      	str	r2, [r3, #0]
  return result;
 80016d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016d4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80016d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <HAL_RCC_OscConfig+0xa00>
 80016ea:	4b98      	ldr	r3, [pc, #608]	@ (800194c <HAL_RCC_OscConfig+0xc5c>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	e013      	b.n	8001718 <HAL_RCC_OscConfig+0xa28>
 80016f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016f8:	2202      	movs	r2, #2
 80016fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001700:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	fa93 f2a3 	rbit	r2, r3
 800170a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800170e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	4b8d      	ldr	r3, [pc, #564]	@ (800194c <HAL_RCC_OscConfig+0xc5c>)
 8001716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001718:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800171c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001720:	2102      	movs	r1, #2
 8001722:	6011      	str	r1, [r2, #0]
 8001724:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001728:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	fa92 f1a2 	rbit	r1, r2
 8001732:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001736:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800173a:	6011      	str	r1, [r2, #0]
  return result;
 800173c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001740:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	fab2 f282 	clz	r2, r2
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	f002 021f 	and.w	r2, r2, #31
 8001756:	2101      	movs	r1, #1
 8001758:	fa01 f202 	lsl.w	r2, r1, r2
 800175c:	4013      	ands	r3, r2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d080      	beq.n	8001664 <HAL_RCC_OscConfig+0x974>
 8001762:	e07d      	b.n	8001860 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001764:	f7ff f80c 	bl	8000780 <HAL_GetTick>
 8001768:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176c:	e00b      	b.n	8001786 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176e:	f7ff f807 	bl	8000780 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e2d1      	b.n	8001d2a <HAL_RCC_OscConfig+0x103a>
 8001786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800178a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800178e:	2202      	movs	r2, #2
 8001790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001796:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	fa93 f2a3 	rbit	r2, r3
 80017a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ae:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017b2:	2202      	movs	r2, #2
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	fa93 f2a3 	rbit	r2, r3
 80017c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80017cc:	601a      	str	r2, [r3, #0]
  return result;
 80017ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80017d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d8:	fab3 f383 	clz	r3, r3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <HAL_RCC_OscConfig+0xafe>
 80017e8:	4b58      	ldr	r3, [pc, #352]	@ (800194c <HAL_RCC_OscConfig+0xc5c>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	e013      	b.n	8001816 <HAL_RCC_OscConfig+0xb26>
 80017ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80017f6:	2202      	movs	r2, #2
 80017f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017fe:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	fa93 f2a3 	rbit	r2, r3
 8001808:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800180c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	4b4e      	ldr	r3, [pc, #312]	@ (800194c <HAL_RCC_OscConfig+0xc5c>)
 8001814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001816:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800181a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800181e:	2102      	movs	r1, #2
 8001820:	6011      	str	r1, [r2, #0]
 8001822:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001826:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	fa92 f1a2 	rbit	r1, r2
 8001830:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001834:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001838:	6011      	str	r1, [r2, #0]
  return result;
 800183a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800183e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	fab2 f282 	clz	r2, r2
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	f002 021f 	and.w	r2, r2, #31
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d186      	bne.n	800176e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001860:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001864:	2b01      	cmp	r3, #1
 8001866:	d105      	bne.n	8001874 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001868:	4b38      	ldr	r3, [pc, #224]	@ (800194c <HAL_RCC_OscConfig+0xc5c>)
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	4a37      	ldr	r2, [pc, #220]	@ (800194c <HAL_RCC_OscConfig+0xc5c>)
 800186e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001872:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001874:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001878:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 8251 	beq.w	8001d28 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001886:	4b31      	ldr	r3, [pc, #196]	@ (800194c <HAL_RCC_OscConfig+0xc5c>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b08      	cmp	r3, #8
 8001890:	f000 820f 	beq.w	8001cb2 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001894:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001898:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	f040 8165 	bne.w	8001b70 <HAL_RCC_OscConfig+0xe80>
 80018a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018aa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80018ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	fa93 f2a3 	rbit	r2, r3
 80018c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80018ca:	601a      	str	r2, [r3, #0]
  return result;
 80018cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80018d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	461a      	mov	r2, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7fe ff48 	bl	8000780 <HAL_GetTick>
 80018f0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f4:	e009      	b.n	800190a <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f6:	f7fe ff43 	bl	8000780 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e20f      	b.n	8001d2a <HAL_RCC_OscConfig+0x103a>
 800190a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800190e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001912:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800191c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	fa93 f2a3 	rbit	r2, r3
 8001926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800192e:	601a      	str	r2, [r3, #0]
  return result;
 8001930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001934:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001938:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b3f      	cmp	r3, #63	@ 0x3f
 8001942:	d805      	bhi.n	8001950 <HAL_RCC_OscConfig+0xc60>
 8001944:	4b01      	ldr	r3, [pc, #4]	@ (800194c <HAL_RCC_OscConfig+0xc5c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	e02a      	b.n	80019a0 <HAL_RCC_OscConfig+0xcb0>
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001954:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001958:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800195c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001962:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	fa93 f2a3 	rbit	r2, r3
 800196c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001970:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800197a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800197e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001988:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	fa93 f2a3 	rbit	r2, r3
 8001992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001996:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	4bca      	ldr	r3, [pc, #808]	@ (8001cc8 <HAL_RCC_OscConfig+0xfd8>)
 800199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019a4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80019a8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80019ac:	6011      	str	r1, [r2, #0]
 80019ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019b2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	fa92 f1a2 	rbit	r1, r2
 80019bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019c0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80019c4:	6011      	str	r1, [r2, #0]
  return result;
 80019c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019ca:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	fab2 f282 	clz	r2, r2
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	f042 0220 	orr.w	r2, r2, #32
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	f002 021f 	and.w	r2, r2, #31
 80019e0:	2101      	movs	r1, #1
 80019e2:	fa01 f202 	lsl.w	r2, r1, r2
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d184      	bne.n	80018f6 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ec:	4bb6      	ldr	r3, [pc, #728]	@ (8001cc8 <HAL_RCC_OscConfig+0xfd8>)
 80019ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f0:	f023 020f 	bic.w	r2, r3, #15
 80019f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	49b1      	ldr	r1, [pc, #708]	@ (8001cc8 <HAL_RCC_OscConfig+0xfd8>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001a06:	4bb0      	ldr	r3, [pc, #704]	@ (8001cc8 <HAL_RCC_OscConfig+0xfd8>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001a0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6a19      	ldr	r1, [r3, #32]
 8001a1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	430b      	orrs	r3, r1
 8001a28:	49a7      	ldr	r1, [pc, #668]	@ (8001cc8 <HAL_RCC_OscConfig+0xfd8>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
 8001a2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a32:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a40:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	fa93 f2a3 	rbit	r2, r3
 8001a4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a4e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a52:	601a      	str	r2, [r3, #0]
  return result;
 8001a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a58:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a5c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2301      	movs	r3, #1
 8001a72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7fe fe84 	bl	8000780 <HAL_GetTick>
 8001a78:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7fe fe7f 	bl	8000780 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e14b      	b.n	8001d2a <HAL_RCC_OscConfig+0x103a>
 8001a92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a96:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	fa93 f2a3 	rbit	r2, r3
 8001aae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ab6:	601a      	str	r2, [r3, #0]
  return result;
 8001ab8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001abc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ac0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aca:	d802      	bhi.n	8001ad2 <HAL_RCC_OscConfig+0xde2>
 8001acc:	4b7e      	ldr	r3, [pc, #504]	@ (8001cc8 <HAL_RCC_OscConfig+0xfd8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	e027      	b.n	8001b22 <HAL_RCC_OscConfig+0xe32>
 8001ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ada:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	fa93 f2a3 	rbit	r2, r3
 8001aee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001afc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b0a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	fa93 f2a3 	rbit	r2, r3
 8001b14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b18:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc8 <HAL_RCC_OscConfig+0xfd8>)
 8001b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b22:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b26:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b2a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b2e:	6011      	str	r1, [r2, #0]
 8001b30:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b34:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	fa92 f1a2 	rbit	r1, r2
 8001b3e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b42:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001b46:	6011      	str	r1, [r2, #0]
  return result;
 8001b48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b4c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	fab2 f282 	clz	r2, r2
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	f042 0220 	orr.w	r2, r2, #32
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f002 021f 	and.w	r2, r2, #31
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d087      	beq.n	8001a7e <HAL_RCC_OscConfig+0xd8e>
 8001b6e:	e0db      	b.n	8001d28 <HAL_RCC_OscConfig+0x1038>
 8001b70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b74:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b82:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fa93 f2a3 	rbit	r2, r3
 8001b8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b90:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b94:	601a      	str	r2, [r3, #0]
  return result;
 8001b96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b9a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b9e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001baa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7fe fde3 	bl	8000780 <HAL_GetTick>
 8001bba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbe:	e009      	b.n	8001bd4 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7fe fdde 	bl	8000780 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0aa      	b.n	8001d2a <HAL_RCC_OscConfig+0x103a>
 8001bd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001bdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	fa93 f2a3 	rbit	r2, r3
 8001bf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001bf8:	601a      	str	r2, [r3, #0]
  return result;
 8001bfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bfe:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c0c:	d802      	bhi.n	8001c14 <HAL_RCC_OscConfig+0xf24>
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc8 <HAL_RCC_OscConfig+0xfd8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	e027      	b.n	8001c64 <HAL_RCC_OscConfig+0xf74>
 8001c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c18:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c26:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	fa93 f2a3 	rbit	r2, r3
 8001c30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c34:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c4c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	fa93 f2a3 	rbit	r2, r3
 8001c56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c5a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <HAL_RCC_OscConfig+0xfd8>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c64:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c68:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c6c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c70:	6011      	str	r1, [r2, #0]
 8001c72:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c76:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	fa92 f1a2 	rbit	r1, r2
 8001c80:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c84:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001c88:	6011      	str	r1, [r2, #0]
  return result;
 8001c8a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c8e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	fab2 f282 	clz	r2, r2
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	f042 0220 	orr.w	r2, r2, #32
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	f002 021f 	and.w	r2, r2, #31
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d187      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xed0>
 8001cb0:	e03a      	b.n	8001d28 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d104      	bne.n	8001ccc <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e031      	b.n	8001d2a <HAL_RCC_OscConfig+0x103a>
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ccc:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <HAL_RCC_OscConfig+0x1044>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <HAL_RCC_OscConfig+0x1044>)
 8001cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cdc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ce0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001ce4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d117      	bne.n	8001d24 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001cf4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001cf8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001cfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d00:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d10b      	bne.n	8001d24 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d10:	f003 020f 	and.w	r2, r3, #15
 8001d14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000

08001d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b09e      	sub	sp, #120	@ 0x78
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e154      	b.n	8001ffa <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d50:	4b89      	ldr	r3, [pc, #548]	@ (8001f78 <HAL_RCC_ClockConfig+0x240>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d910      	bls.n	8001d80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b86      	ldr	r3, [pc, #536]	@ (8001f78 <HAL_RCC_ClockConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 0207 	bic.w	r2, r3, #7
 8001d66:	4984      	ldr	r1, [pc, #528]	@ (8001f78 <HAL_RCC_ClockConfig+0x240>)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b82      	ldr	r3, [pc, #520]	@ (8001f78 <HAL_RCC_ClockConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e13c      	b.n	8001ffa <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8c:	4b7b      	ldr	r3, [pc, #492]	@ (8001f7c <HAL_RCC_ClockConfig+0x244>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4978      	ldr	r1, [pc, #480]	@ (8001f7c <HAL_RCC_ClockConfig+0x244>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80cd 	beq.w	8001f46 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d137      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xec>
 8001db4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001db8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001dc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dcc:	d802      	bhi.n	8001dd4 <HAL_RCC_ClockConfig+0x9c>
 8001dce:	4b6b      	ldr	r3, [pc, #428]	@ (8001f7c <HAL_RCC_ClockConfig+0x244>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	e00f      	b.n	8001df4 <HAL_RCC_ClockConfig+0xbc>
 8001dd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	667b      	str	r3, [r7, #100]	@ 0x64
 8001de2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001de6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001de8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001df0:	4b62      	ldr	r3, [pc, #392]	@ (8001f7c <HAL_RCC_ClockConfig+0x244>)
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001df8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001dfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001dfc:	fa92 f2a2 	rbit	r2, r2
 8001e00:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001e02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e04:	fab2 f282 	clz	r2, r2
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	f042 0220 	orr.w	r2, r2, #32
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	f002 021f 	and.w	r2, r2, #31
 8001e14:	2101      	movs	r1, #1
 8001e16:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d171      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0ea      	b.n	8001ffa <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d137      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x164>
 8001e2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e30:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e44:	d802      	bhi.n	8001e4c <HAL_RCC_ClockConfig+0x114>
 8001e46:	4b4d      	ldr	r3, [pc, #308]	@ (8001f7c <HAL_RCC_ClockConfig+0x244>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	e00f      	b.n	8001e6c <HAL_RCC_ClockConfig+0x134>
 8001e4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e50:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e68:	4b44      	ldr	r3, [pc, #272]	@ (8001f7c <HAL_RCC_ClockConfig+0x244>)
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e70:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001e72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e74:	fa92 f2a2 	rbit	r2, r2
 8001e78:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001e7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e7c:	fab2 f282 	clz	r2, r2
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	f042 0220 	orr.w	r2, r2, #32
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	f002 021f 	and.w	r2, r2, #31
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d135      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0ae      	b.n	8001ffa <HAL_RCC_ClockConfig+0x2c2>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eb2:	d802      	bhi.n	8001eba <HAL_RCC_ClockConfig+0x182>
 8001eb4:	4b31      	ldr	r3, [pc, #196]	@ (8001f7c <HAL_RCC_ClockConfig+0x244>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	e00d      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x19e>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	623b      	str	r3, [r7, #32]
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f7c <HAL_RCC_ClockConfig+0x244>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	61ba      	str	r2, [r7, #24]
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	fa92 f2a2 	rbit	r2, r2
 8001ee0:	617a      	str	r2, [r7, #20]
  return result;
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	fab2 f282 	clz	r2, r2
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f042 0220 	orr.w	r2, r2, #32
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	f002 021f 	and.w	r2, r2, #31
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e07a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f04:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <HAL_RCC_ClockConfig+0x244>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 0203 	bic.w	r2, r3, #3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	491a      	ldr	r1, [pc, #104]	@ (8001f7c <HAL_RCC_ClockConfig+0x244>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f16:	f7fe fc33 	bl	8000780 <HAL_GetTick>
 8001f1a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1e:	f7fe fc2f 	bl	8000780 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e062      	b.n	8001ffa <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f34:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <HAL_RCC_ClockConfig+0x244>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 020c 	and.w	r2, r3, #12
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d1eb      	bne.n	8001f1e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f46:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <HAL_RCC_ClockConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d215      	bcs.n	8001f80 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <HAL_RCC_ClockConfig+0x240>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 0207 	bic.w	r2, r3, #7
 8001f5c:	4906      	ldr	r1, [pc, #24]	@ (8001f78 <HAL_RCC_ClockConfig+0x240>)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <HAL_RCC_ClockConfig+0x240>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d006      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e041      	b.n	8001ffa <HAL_RCC_ClockConfig+0x2c2>
 8001f76:	bf00      	nop
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002004 <HAL_RCC_ClockConfig+0x2cc>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	491a      	ldr	r1, [pc, #104]	@ (8002004 <HAL_RCC_ClockConfig+0x2cc>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d009      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001faa:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <HAL_RCC_ClockConfig+0x2cc>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4912      	ldr	r1, [pc, #72]	@ (8002004 <HAL_RCC_ClockConfig+0x2cc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fbe:	f000 f829 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8001fc2:	4601      	mov	r1, r0
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <HAL_RCC_ClockConfig+0x2cc>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fcc:	22f0      	movs	r2, #240	@ 0xf0
 8001fce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	fa92 f2a2 	rbit	r2, r2
 8001fd6:	60fa      	str	r2, [r7, #12]
  return result;
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	fab2 f282 	clz	r2, r2
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	40d3      	lsrs	r3, r2
 8001fe2:	4a09      	ldr	r2, [pc, #36]	@ (8002008 <HAL_RCC_ClockConfig+0x2d0>)
 8001fe4:	5cd3      	ldrb	r3, [r2, r3]
 8001fe6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fea:	4a08      	ldr	r2, [pc, #32]	@ (800200c <HAL_RCC_ClockConfig+0x2d4>)
 8001fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fee:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <HAL_RCC_ClockConfig+0x2d8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fb80 	bl	80006f8 <HAL_InitTick>
  
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3778      	adds	r7, #120	@ 0x78
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	08003598 	.word	0x08003598
 800200c:	20000000 	.word	0x20000000
 8002010:	20000004 	.word	0x20000004

08002014 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800202e:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b04      	cmp	r3, #4
 800203c:	d002      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x30>
 800203e:	2b08      	cmp	r3, #8
 8002040:	d003      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0x36>
 8002042:	e029      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002044:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002046:	613b      	str	r3, [r7, #16]
      break;
 8002048:	e029      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	0c9b      	lsrs	r3, r3, #18
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	4a18      	ldr	r2, [pc, #96]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002054:	5cd3      	ldrb	r3, [r2, r3]
 8002056:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002058:	4b14      	ldr	r3, [pc, #80]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x98>)
 800205a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	4a15      	ldr	r2, [pc, #84]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002062:	5cd3      	ldrb	r3, [r2, r3]
 8002064:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002070:	4a0f      	ldr	r2, [pc, #60]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	fbb2 f2f3 	udiv	r2, r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	e007      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002082:	4a0b      	ldr	r2, [pc, #44]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	fbb2 f2f3 	udiv	r2, r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	fb02 f303 	mul.w	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	613b      	str	r3, [r7, #16]
      break;
 8002096:	e002      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800209a:	613b      	str	r3, [r7, #16]
      break;
 800209c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800209e:	693b      	ldr	r3, [r7, #16]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40021000 	.word	0x40021000
 80020b0:	007a1200 	.word	0x007a1200
 80020b4:	080035b0 	.word	0x080035b0
 80020b8:	080035c0 	.word	0x080035c0

080020bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c0:	4b03      	ldr	r3, [pc, #12]	@ (80020d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000000 	.word	0x20000000

080020d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020da:	f7ff ffef 	bl	80020bc <HAL_RCC_GetHCLKFreq>
 80020de:	4601      	mov	r1, r0
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020e8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80020ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	fa92 f2a2 	rbit	r2, r2
 80020f4:	603a      	str	r2, [r7, #0]
  return result;
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	fab2 f282 	clz	r2, r2
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	40d3      	lsrs	r3, r2
 8002100:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	080035a8 	.word	0x080035a8

08002118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800211e:	f7ff ffcd 	bl	80020bc <HAL_RCC_GetHCLKFreq>
 8002122:	4601      	mov	r1, r0
 8002124:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800212c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002130:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	fa92 f2a2 	rbit	r2, r2
 8002138:	603a      	str	r2, [r7, #0]
  return result;
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	fab2 f282 	clz	r2, r2
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	40d3      	lsrs	r3, r2
 8002144:	4a04      	ldr	r2, [pc, #16]	@ (8002158 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002146:	5cd3      	ldrb	r3, [r2, r3]
 8002148:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	080035a8 	.word	0x080035a8

0800215c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b092      	sub	sp, #72	@ 0x48
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80d2 	beq.w	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002180:	4b4d      	ldr	r3, [pc, #308]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10e      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	4b4a      	ldr	r3, [pc, #296]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	4a49      	ldr	r2, [pc, #292]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002196:	61d3      	str	r3, [r2, #28]
 8002198:	4b47      	ldr	r3, [pc, #284]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021aa:	4b44      	ldr	r3, [pc, #272]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d118      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b6:	4b41      	ldr	r3, [pc, #260]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a40      	ldr	r2, [pc, #256]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c2:	f7fe fadd 	bl	8000780 <HAL_GetTick>
 80021c6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	e008      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ca:	f7fe fad9 	bl	8000780 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b64      	cmp	r3, #100	@ 0x64
 80021d6:	d901      	bls.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e1d4      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021dc:	4b37      	ldr	r3, [pc, #220]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021e8:	4b33      	ldr	r3, [pc, #204]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8082 	beq.w	80022fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002202:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002204:	429a      	cmp	r2, r3
 8002206:	d07a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002208:	4b2b      	ldr	r3, [pc, #172]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002212:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002216:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	4b25      	ldr	r3, [pc, #148]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	461a      	mov	r2, r3
 8002232:	2301      	movs	r3, #1
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800223a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	4b1c      	ldr	r3, [pc, #112]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	461a      	mov	r2, r3
 8002256:	2300      	movs	r3, #0
 8002258:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800225a:	4a17      	ldr	r2, [pc, #92]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800225c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800225e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d049      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7fe fa89 	bl	8000780 <HAL_GetTick>
 800226e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe fa85 	bl	8000780 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e17e      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002288:	2302      	movs	r3, #2
 800228a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
 8002294:	2302      	movs	r3, #2
 8002296:	623b      	str	r3, [r7, #32]
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	61fb      	str	r3, [r7, #28]
  return result;
 80022a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d108      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80022b2:	4b01      	ldr	r3, [pc, #4]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	e00d      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40007000 	.word	0x40007000
 80022c0:	10908100 	.word	0x10908100
 80022c4:	2302      	movs	r3, #2
 80022c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	4b9a      	ldr	r3, [pc, #616]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d4:	2202      	movs	r2, #2
 80022d6:	613a      	str	r2, [r7, #16]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	fa92 f2a2 	rbit	r2, r2
 80022de:	60fa      	str	r2, [r7, #12]
  return result;
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	fab2 f282 	clz	r2, r2
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	f002 021f 	and.w	r2, r2, #31
 80022f2:	2101      	movs	r1, #1
 80022f4:	fa01 f202 	lsl.w	r2, r1, r2
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0b9      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022fe:	4b8f      	ldr	r3, [pc, #572]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	498c      	ldr	r1, [pc, #560]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230c:	4313      	orrs	r3, r2
 800230e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002310:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002318:	4b88      	ldr	r3, [pc, #544]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	4a87      	ldr	r2, [pc, #540]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800231e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002322:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002330:	4b82      	ldr	r3, [pc, #520]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002334:	f023 0203 	bic.w	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	497f      	ldr	r1, [pc, #508]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800233e:	4313      	orrs	r3, r2
 8002340:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800234e:	4b7b      	ldr	r3, [pc, #492]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	4978      	ldr	r1, [pc, #480]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235c:	4313      	orrs	r3, r2
 800235e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800236c:	4b73      	ldr	r3, [pc, #460]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002370:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	4970      	ldr	r1, [pc, #448]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237a:	4313      	orrs	r3, r2
 800237c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800238a:	4b6c      	ldr	r3, [pc, #432]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f023 0210 	bic.w	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	4969      	ldr	r1, [pc, #420]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002398:	4313      	orrs	r3, r2
 800239a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80023a8:	4b64      	ldr	r3, [pc, #400]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b4:	4961      	ldr	r1, [pc, #388]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023c6:	4b5d      	ldr	r3, [pc, #372]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	f023 0220 	bic.w	r2, r3, #32
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	495a      	ldr	r1, [pc, #360]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023e4:	4b55      	ldr	r3, [pc, #340]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	4952      	ldr	r1, [pc, #328]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002402:	4b4e      	ldr	r3, [pc, #312]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	494b      	ldr	r1, [pc, #300]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002410:	4313      	orrs	r3, r2
 8002412:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002420:	4b46      	ldr	r3, [pc, #280]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002424:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	4943      	ldr	r1, [pc, #268]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242e:	4313      	orrs	r3, r2
 8002430:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800243e:	4b3f      	ldr	r3, [pc, #252]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	493c      	ldr	r1, [pc, #240]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800245c:	4b37      	ldr	r3, [pc, #220]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002460:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	4934      	ldr	r1, [pc, #208]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246a:	4313      	orrs	r3, r2
 800246c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800247a:	4b30      	ldr	r3, [pc, #192]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002486:	492d      	ldr	r1, [pc, #180]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002488:	4313      	orrs	r3, r2
 800248a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002498:	4b28      	ldr	r3, [pc, #160]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a4:	4925      	ldr	r1, [pc, #148]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80024b6:	4b21      	ldr	r3, [pc, #132]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	491e      	ldr	r1, [pc, #120]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80024d4:	4b19      	ldr	r3, [pc, #100]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e0:	4916      	ldr	r1, [pc, #88]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80024f2:	4b12      	ldr	r3, [pc, #72]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fe:	490f      	ldr	r1, [pc, #60]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002500:	4313      	orrs	r3, r2
 8002502:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002510:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251c:	4907      	ldr	r1, [pc, #28]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800251e:	4313      	orrs	r3, r2
 8002520:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00c      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800252e:	4b03      	ldr	r3, [pc, #12]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	e002      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002542:	4913      	ldr	r1, [pc, #76]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002544:	4313      	orrs	r3, r2
 8002546:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002554:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002558:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002560:	490b      	ldr	r1, [pc, #44]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002562:	4313      	orrs	r3, r2
 8002564:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002572:	4b07      	ldr	r3, [pc, #28]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800257e:	4904      	ldr	r1, [pc, #16]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002580:	4313      	orrs	r3, r2
 8002582:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3748      	adds	r7, #72	@ 0x48
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000

08002594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e049      	b.n	800263a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fd ff96 	bl	80004ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3304      	adds	r3, #4
 80025d0:	4619      	mov	r1, r3
 80025d2:	4610      	mov	r0, r2
 80025d4:	f000 f99c 	bl	8002910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d001      	beq.n	800265c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e047      	b.n	80026ec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a23      	ldr	r2, [pc, #140]	@ (80026f8 <HAL_TIM_Base_Start+0xb4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01d      	beq.n	80026aa <HAL_TIM_Base_Start+0x66>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002676:	d018      	beq.n	80026aa <HAL_TIM_Base_Start+0x66>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1f      	ldr	r2, [pc, #124]	@ (80026fc <HAL_TIM_Base_Start+0xb8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <HAL_TIM_Base_Start+0x66>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1e      	ldr	r2, [pc, #120]	@ (8002700 <HAL_TIM_Base_Start+0xbc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d00e      	beq.n	80026aa <HAL_TIM_Base_Start+0x66>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a1c      	ldr	r2, [pc, #112]	@ (8002704 <HAL_TIM_Base_Start+0xc0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d009      	beq.n	80026aa <HAL_TIM_Base_Start+0x66>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1b      	ldr	r2, [pc, #108]	@ (8002708 <HAL_TIM_Base_Start+0xc4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d004      	beq.n	80026aa <HAL_TIM_Base_Start+0x66>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a19      	ldr	r2, [pc, #100]	@ (800270c <HAL_TIM_Base_Start+0xc8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d115      	bne.n	80026d6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	4b17      	ldr	r3, [pc, #92]	@ (8002710 <HAL_TIM_Base_Start+0xcc>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b06      	cmp	r3, #6
 80026ba:	d015      	beq.n	80026e8 <HAL_TIM_Base_Start+0xa4>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c2:	d011      	beq.n	80026e8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d4:	e008      	b.n	80026e8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0201 	orr.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e000      	b.n	80026ea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40012c00 	.word	0x40012c00
 80026fc:	40000400 	.word	0x40000400
 8002700:	40000800 	.word	0x40000800
 8002704:	40013400 	.word	0x40013400
 8002708:	40014000 	.word	0x40014000
 800270c:	40015000 	.word	0x40015000
 8002710:	00010007 	.word	0x00010007

08002714 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e049      	b.n	80027ba <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f841 	bl	80027c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3304      	adds	r3, #4
 8002750:	4619      	mov	r1, r3
 8002752:	4610      	mov	r0, r2
 8002754:	f000 f8dc 	bl	8002910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e088      	b.n	8002906 <HAL_TIM_IC_ConfigChannel+0x130>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d11b      	bne.n	800283a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002812:	f000 f927 	bl	8002a64 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 020c 	bic.w	r2, r2, #12
 8002824:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6999      	ldr	r1, [r3, #24]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	619a      	str	r2, [r3, #24]
 8002838:	e060      	b.n	80028fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d11c      	bne.n	800287a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002850:	f000 f976 	bl	8002b40 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002862:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6999      	ldr	r1, [r3, #24]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	021a      	lsls	r2, r3, #8
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	619a      	str	r2, [r3, #24]
 8002878:	e040      	b.n	80028fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b08      	cmp	r3, #8
 800287e:	d11b      	bne.n	80028b8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002890:	f000 f993 	bl	8002bba <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69da      	ldr	r2, [r3, #28]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 020c 	bic.w	r2, r2, #12
 80028a2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69d9      	ldr	r1, [r3, #28]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	61da      	str	r2, [r3, #28]
 80028b6:	e021      	b.n	80028fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d11c      	bne.n	80028f8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80028ce:	f000 f9b0 	bl	8002c32 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69da      	ldr	r2, [r3, #28]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80028e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69d9      	ldr	r1, [r3, #28]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	021a      	lsls	r2, r3, #8
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	61da      	str	r2, [r3, #28]
 80028f6:	e001      	b.n	80028fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002904:	7dfb      	ldrb	r3, [r7, #23]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a48      	ldr	r2, [pc, #288]	@ (8002a44 <TIM_Base_SetConfig+0x134>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <TIM_Base_SetConfig+0x40>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800292e:	d00f      	beq.n	8002950 <TIM_Base_SetConfig+0x40>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a45      	ldr	r2, [pc, #276]	@ (8002a48 <TIM_Base_SetConfig+0x138>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00b      	beq.n	8002950 <TIM_Base_SetConfig+0x40>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a44      	ldr	r2, [pc, #272]	@ (8002a4c <TIM_Base_SetConfig+0x13c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d007      	beq.n	8002950 <TIM_Base_SetConfig+0x40>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a43      	ldr	r2, [pc, #268]	@ (8002a50 <TIM_Base_SetConfig+0x140>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d003      	beq.n	8002950 <TIM_Base_SetConfig+0x40>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a42      	ldr	r2, [pc, #264]	@ (8002a54 <TIM_Base_SetConfig+0x144>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d108      	bne.n	8002962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a37      	ldr	r2, [pc, #220]	@ (8002a44 <TIM_Base_SetConfig+0x134>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01f      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002970:	d01b      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a34      	ldr	r2, [pc, #208]	@ (8002a48 <TIM_Base_SetConfig+0x138>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d017      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a33      	ldr	r2, [pc, #204]	@ (8002a4c <TIM_Base_SetConfig+0x13c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a32      	ldr	r2, [pc, #200]	@ (8002a50 <TIM_Base_SetConfig+0x140>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00f      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a32      	ldr	r2, [pc, #200]	@ (8002a58 <TIM_Base_SetConfig+0x148>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00b      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a31      	ldr	r2, [pc, #196]	@ (8002a5c <TIM_Base_SetConfig+0x14c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d007      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a30      	ldr	r2, [pc, #192]	@ (8002a60 <TIM_Base_SetConfig+0x150>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d003      	beq.n	80029aa <TIM_Base_SetConfig+0x9a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a54 <TIM_Base_SetConfig+0x144>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d108      	bne.n	80029bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a18      	ldr	r2, [pc, #96]	@ (8002a44 <TIM_Base_SetConfig+0x134>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d013      	beq.n	8002a10 <TIM_Base_SetConfig+0x100>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a19      	ldr	r2, [pc, #100]	@ (8002a50 <TIM_Base_SetConfig+0x140>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00f      	beq.n	8002a10 <TIM_Base_SetConfig+0x100>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a19      	ldr	r2, [pc, #100]	@ (8002a58 <TIM_Base_SetConfig+0x148>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00b      	beq.n	8002a10 <TIM_Base_SetConfig+0x100>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a18      	ldr	r2, [pc, #96]	@ (8002a5c <TIM_Base_SetConfig+0x14c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <TIM_Base_SetConfig+0x100>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a17      	ldr	r2, [pc, #92]	@ (8002a60 <TIM_Base_SetConfig+0x150>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d003      	beq.n	8002a10 <TIM_Base_SetConfig+0x100>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a12      	ldr	r2, [pc, #72]	@ (8002a54 <TIM_Base_SetConfig+0x144>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d103      	bne.n	8002a18 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d105      	bne.n	8002a36 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f023 0201 	bic.w	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	611a      	str	r2, [r3, #16]
  }
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	40000400 	.word	0x40000400
 8002a4c:	40000800 	.word	0x40000800
 8002a50:	40013400 	.word	0x40013400
 8002a54:	40015000 	.word	0x40015000
 8002a58:	40014000 	.word	0x40014000
 8002a5c:	40014400 	.word	0x40014400
 8002a60:	40014800 	.word	0x40014800

08002a64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f023 0201 	bic.w	r2, r3, #1
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4a26      	ldr	r2, [pc, #152]	@ (8002b28 <TIM_TI1_SetConfig+0xc4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d017      	beq.n	8002ac2 <TIM_TI1_SetConfig+0x5e>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a98:	d013      	beq.n	8002ac2 <TIM_TI1_SetConfig+0x5e>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4a23      	ldr	r2, [pc, #140]	@ (8002b2c <TIM_TI1_SetConfig+0xc8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00f      	beq.n	8002ac2 <TIM_TI1_SetConfig+0x5e>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a22      	ldr	r2, [pc, #136]	@ (8002b30 <TIM_TI1_SetConfig+0xcc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00b      	beq.n	8002ac2 <TIM_TI1_SetConfig+0x5e>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4a21      	ldr	r2, [pc, #132]	@ (8002b34 <TIM_TI1_SetConfig+0xd0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <TIM_TI1_SetConfig+0x5e>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a20      	ldr	r2, [pc, #128]	@ (8002b38 <TIM_TI1_SetConfig+0xd4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d003      	beq.n	8002ac2 <TIM_TI1_SetConfig+0x5e>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a1f      	ldr	r2, [pc, #124]	@ (8002b3c <TIM_TI1_SetConfig+0xd8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d101      	bne.n	8002ac6 <TIM_TI1_SetConfig+0x62>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <TIM_TI1_SetConfig+0x64>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	e003      	b.n	8002ae6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f023 030a 	bic.w	r3, r3, #10
 8002b00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f003 030a 	and.w	r3, r3, #10
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	621a      	str	r2, [r3, #32]
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40013400 	.word	0x40013400
 8002b38:	40014000 	.word	0x40014000
 8002b3c:	40015000 	.word	0x40015000

08002b40 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f023 0210 	bic.w	r2, r3, #16
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	031b      	lsls	r3, r3, #12
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b92:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	621a      	str	r2, [r3, #32]
}
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b087      	sub	sp, #28
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bf6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002c0a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	621a      	str	r2, [r3, #32]
}
 8002c26:	bf00      	nop
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b087      	sub	sp, #28
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c5e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c70:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	031b      	lsls	r3, r3, #12
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002c84:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	031b      	lsls	r3, r3, #12
 8002c8a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	621a      	str	r2, [r3, #32]
}
 8002ca0:	bf00      	nop
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e040      	b.n	8002d40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7fd fc4e 	bl	8000570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2224      	movs	r2, #36	@ 0x24
 8002cd8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0201 	bic.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f9fc 	bl	80030f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f825 	bl	8002d48 <UART_SetConfig>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e01b      	b.n	8002d40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fa7b 	bl	8003234 <UART_CheckIdleState>
 8002d3e:	4603      	mov	r3, r0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b92      	ldr	r3, [pc, #584]	@ (8002fbc <UART_SetConfig+0x274>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	6979      	ldr	r1, [r7, #20]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a80      	ldr	r2, [pc, #512]	@ (8002fc0 <UART_SetConfig+0x278>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d120      	bne.n	8002e06 <UART_SetConfig+0xbe>
 8002dc4:	4b7f      	ldr	r3, [pc, #508]	@ (8002fc4 <UART_SetConfig+0x27c>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d817      	bhi.n	8002e00 <UART_SetConfig+0xb8>
 8002dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd8 <UART_SetConfig+0x90>)
 8002dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd6:	bf00      	nop
 8002dd8:	08002de9 	.word	0x08002de9
 8002ddc:	08002df5 	.word	0x08002df5
 8002de0:	08002dfb 	.word	0x08002dfb
 8002de4:	08002def 	.word	0x08002def
 8002de8:	2301      	movs	r3, #1
 8002dea:	77fb      	strb	r3, [r7, #31]
 8002dec:	e0b5      	b.n	8002f5a <UART_SetConfig+0x212>
 8002dee:	2302      	movs	r3, #2
 8002df0:	77fb      	strb	r3, [r7, #31]
 8002df2:	e0b2      	b.n	8002f5a <UART_SetConfig+0x212>
 8002df4:	2304      	movs	r3, #4
 8002df6:	77fb      	strb	r3, [r7, #31]
 8002df8:	e0af      	b.n	8002f5a <UART_SetConfig+0x212>
 8002dfa:	2308      	movs	r3, #8
 8002dfc:	77fb      	strb	r3, [r7, #31]
 8002dfe:	e0ac      	b.n	8002f5a <UART_SetConfig+0x212>
 8002e00:	2310      	movs	r3, #16
 8002e02:	77fb      	strb	r3, [r7, #31]
 8002e04:	e0a9      	b.n	8002f5a <UART_SetConfig+0x212>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a6f      	ldr	r2, [pc, #444]	@ (8002fc8 <UART_SetConfig+0x280>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d124      	bne.n	8002e5a <UART_SetConfig+0x112>
 8002e10:	4b6c      	ldr	r3, [pc, #432]	@ (8002fc4 <UART_SetConfig+0x27c>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e1c:	d011      	beq.n	8002e42 <UART_SetConfig+0xfa>
 8002e1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e22:	d817      	bhi.n	8002e54 <UART_SetConfig+0x10c>
 8002e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e28:	d011      	beq.n	8002e4e <UART_SetConfig+0x106>
 8002e2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e2e:	d811      	bhi.n	8002e54 <UART_SetConfig+0x10c>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <UART_SetConfig+0xf4>
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e38:	d006      	beq.n	8002e48 <UART_SetConfig+0x100>
 8002e3a:	e00b      	b.n	8002e54 <UART_SetConfig+0x10c>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	e08b      	b.n	8002f5a <UART_SetConfig+0x212>
 8002e42:	2302      	movs	r3, #2
 8002e44:	77fb      	strb	r3, [r7, #31]
 8002e46:	e088      	b.n	8002f5a <UART_SetConfig+0x212>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	77fb      	strb	r3, [r7, #31]
 8002e4c:	e085      	b.n	8002f5a <UART_SetConfig+0x212>
 8002e4e:	2308      	movs	r3, #8
 8002e50:	77fb      	strb	r3, [r7, #31]
 8002e52:	e082      	b.n	8002f5a <UART_SetConfig+0x212>
 8002e54:	2310      	movs	r3, #16
 8002e56:	77fb      	strb	r3, [r7, #31]
 8002e58:	e07f      	b.n	8002f5a <UART_SetConfig+0x212>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002fcc <UART_SetConfig+0x284>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d124      	bne.n	8002eae <UART_SetConfig+0x166>
 8002e64:	4b57      	ldr	r3, [pc, #348]	@ (8002fc4 <UART_SetConfig+0x27c>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e68:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002e6c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002e70:	d011      	beq.n	8002e96 <UART_SetConfig+0x14e>
 8002e72:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002e76:	d817      	bhi.n	8002ea8 <UART_SetConfig+0x160>
 8002e78:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e7c:	d011      	beq.n	8002ea2 <UART_SetConfig+0x15a>
 8002e7e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e82:	d811      	bhi.n	8002ea8 <UART_SetConfig+0x160>
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <UART_SetConfig+0x148>
 8002e88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e8c:	d006      	beq.n	8002e9c <UART_SetConfig+0x154>
 8002e8e:	e00b      	b.n	8002ea8 <UART_SetConfig+0x160>
 8002e90:	2300      	movs	r3, #0
 8002e92:	77fb      	strb	r3, [r7, #31]
 8002e94:	e061      	b.n	8002f5a <UART_SetConfig+0x212>
 8002e96:	2302      	movs	r3, #2
 8002e98:	77fb      	strb	r3, [r7, #31]
 8002e9a:	e05e      	b.n	8002f5a <UART_SetConfig+0x212>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	77fb      	strb	r3, [r7, #31]
 8002ea0:	e05b      	b.n	8002f5a <UART_SetConfig+0x212>
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	77fb      	strb	r3, [r7, #31]
 8002ea6:	e058      	b.n	8002f5a <UART_SetConfig+0x212>
 8002ea8:	2310      	movs	r3, #16
 8002eaa:	77fb      	strb	r3, [r7, #31]
 8002eac:	e055      	b.n	8002f5a <UART_SetConfig+0x212>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a47      	ldr	r2, [pc, #284]	@ (8002fd0 <UART_SetConfig+0x288>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d124      	bne.n	8002f02 <UART_SetConfig+0x1ba>
 8002eb8:	4b42      	ldr	r3, [pc, #264]	@ (8002fc4 <UART_SetConfig+0x27c>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002ec0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ec4:	d011      	beq.n	8002eea <UART_SetConfig+0x1a2>
 8002ec6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002eca:	d817      	bhi.n	8002efc <UART_SetConfig+0x1b4>
 8002ecc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ed0:	d011      	beq.n	8002ef6 <UART_SetConfig+0x1ae>
 8002ed2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ed6:	d811      	bhi.n	8002efc <UART_SetConfig+0x1b4>
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <UART_SetConfig+0x19c>
 8002edc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ee0:	d006      	beq.n	8002ef0 <UART_SetConfig+0x1a8>
 8002ee2:	e00b      	b.n	8002efc <UART_SetConfig+0x1b4>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	77fb      	strb	r3, [r7, #31]
 8002ee8:	e037      	b.n	8002f5a <UART_SetConfig+0x212>
 8002eea:	2302      	movs	r3, #2
 8002eec:	77fb      	strb	r3, [r7, #31]
 8002eee:	e034      	b.n	8002f5a <UART_SetConfig+0x212>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	77fb      	strb	r3, [r7, #31]
 8002ef4:	e031      	b.n	8002f5a <UART_SetConfig+0x212>
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	77fb      	strb	r3, [r7, #31]
 8002efa:	e02e      	b.n	8002f5a <UART_SetConfig+0x212>
 8002efc:	2310      	movs	r3, #16
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	e02b      	b.n	8002f5a <UART_SetConfig+0x212>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a33      	ldr	r2, [pc, #204]	@ (8002fd4 <UART_SetConfig+0x28c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d124      	bne.n	8002f56 <UART_SetConfig+0x20e>
 8002f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc4 <UART_SetConfig+0x27c>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f10:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002f14:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f18:	d011      	beq.n	8002f3e <UART_SetConfig+0x1f6>
 8002f1a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f1e:	d817      	bhi.n	8002f50 <UART_SetConfig+0x208>
 8002f20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f24:	d011      	beq.n	8002f4a <UART_SetConfig+0x202>
 8002f26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f2a:	d811      	bhi.n	8002f50 <UART_SetConfig+0x208>
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <UART_SetConfig+0x1f0>
 8002f30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f34:	d006      	beq.n	8002f44 <UART_SetConfig+0x1fc>
 8002f36:	e00b      	b.n	8002f50 <UART_SetConfig+0x208>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	e00d      	b.n	8002f5a <UART_SetConfig+0x212>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	77fb      	strb	r3, [r7, #31]
 8002f42:	e00a      	b.n	8002f5a <UART_SetConfig+0x212>
 8002f44:	2304      	movs	r3, #4
 8002f46:	77fb      	strb	r3, [r7, #31]
 8002f48:	e007      	b.n	8002f5a <UART_SetConfig+0x212>
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	77fb      	strb	r3, [r7, #31]
 8002f4e:	e004      	b.n	8002f5a <UART_SetConfig+0x212>
 8002f50:	2310      	movs	r3, #16
 8002f52:	77fb      	strb	r3, [r7, #31]
 8002f54:	e001      	b.n	8002f5a <UART_SetConfig+0x212>
 8002f56:	2310      	movs	r3, #16
 8002f58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f62:	d16b      	bne.n	800303c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002f64:	7ffb      	ldrb	r3, [r7, #31]
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d838      	bhi.n	8002fdc <UART_SetConfig+0x294>
 8002f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f70 <UART_SetConfig+0x228>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08002f95 	.word	0x08002f95
 8002f74:	08002f9d 	.word	0x08002f9d
 8002f78:	08002fa5 	.word	0x08002fa5
 8002f7c:	08002fdd 	.word	0x08002fdd
 8002f80:	08002fab 	.word	0x08002fab
 8002f84:	08002fdd 	.word	0x08002fdd
 8002f88:	08002fdd 	.word	0x08002fdd
 8002f8c:	08002fdd 	.word	0x08002fdd
 8002f90:	08002fb3 	.word	0x08002fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f94:	f7ff f89e 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 8002f98:	61b8      	str	r0, [r7, #24]
        break;
 8002f9a:	e024      	b.n	8002fe6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f9c:	f7ff f8bc 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 8002fa0:	61b8      	str	r0, [r7, #24]
        break;
 8002fa2:	e020      	b.n	8002fe6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd8 <UART_SetConfig+0x290>)
 8002fa6:	61bb      	str	r3, [r7, #24]
        break;
 8002fa8:	e01d      	b.n	8002fe6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002faa:	f7ff f833 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8002fae:	61b8      	str	r0, [r7, #24]
        break;
 8002fb0:	e019      	b.n	8002fe6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fb6:	61bb      	str	r3, [r7, #24]
        break;
 8002fb8:	e015      	b.n	8002fe6 <UART_SetConfig+0x29e>
 8002fba:	bf00      	nop
 8002fbc:	efff69f3 	.word	0xefff69f3
 8002fc0:	40013800 	.word	0x40013800
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40004400 	.word	0x40004400
 8002fcc:	40004800 	.word	0x40004800
 8002fd0:	40004c00 	.word	0x40004c00
 8002fd4:	40005000 	.word	0x40005000
 8002fd8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	77bb      	strb	r3, [r7, #30]
        break;
 8002fe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d073      	beq.n	80030d4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	005a      	lsls	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	441a      	add	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b0f      	cmp	r3, #15
 8003006:	d916      	bls.n	8003036 <UART_SetConfig+0x2ee>
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800300e:	d212      	bcs.n	8003036 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	b29b      	uxth	r3, r3
 8003014:	f023 030f 	bic.w	r3, r3, #15
 8003018:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	b29b      	uxth	r3, r3
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	b29a      	uxth	r2, r3
 8003026:	89fb      	ldrh	r3, [r7, #14]
 8003028:	4313      	orrs	r3, r2
 800302a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	89fa      	ldrh	r2, [r7, #14]
 8003032:	60da      	str	r2, [r3, #12]
 8003034:	e04e      	b.n	80030d4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	77bb      	strb	r3, [r7, #30]
 800303a:	e04b      	b.n	80030d4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800303c:	7ffb      	ldrb	r3, [r7, #31]
 800303e:	2b08      	cmp	r3, #8
 8003040:	d827      	bhi.n	8003092 <UART_SetConfig+0x34a>
 8003042:	a201      	add	r2, pc, #4	@ (adr r2, 8003048 <UART_SetConfig+0x300>)
 8003044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003048:	0800306d 	.word	0x0800306d
 800304c:	08003075 	.word	0x08003075
 8003050:	0800307d 	.word	0x0800307d
 8003054:	08003093 	.word	0x08003093
 8003058:	08003083 	.word	0x08003083
 800305c:	08003093 	.word	0x08003093
 8003060:	08003093 	.word	0x08003093
 8003064:	08003093 	.word	0x08003093
 8003068:	0800308b 	.word	0x0800308b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f832 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 8003070:	61b8      	str	r0, [r7, #24]
        break;
 8003072:	e013      	b.n	800309c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003074:	f7ff f850 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 8003078:	61b8      	str	r0, [r7, #24]
        break;
 800307a:	e00f      	b.n	800309c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800307c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <UART_SetConfig+0x3a4>)
 800307e:	61bb      	str	r3, [r7, #24]
        break;
 8003080:	e00c      	b.n	800309c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003082:	f7fe ffc7 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8003086:	61b8      	str	r0, [r7, #24]
        break;
 8003088:	e008      	b.n	800309c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800308a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800308e:	61bb      	str	r3, [r7, #24]
        break;
 8003090:	e004      	b.n	800309c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	77bb      	strb	r3, [r7, #30]
        break;
 800309a:	bf00      	nop
    }

    if (pclk != 0U)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d018      	beq.n	80030d4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	085a      	lsrs	r2, r3, #1
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	441a      	add	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b0f      	cmp	r3, #15
 80030ba:	d909      	bls.n	80030d0 <UART_SetConfig+0x388>
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c2:	d205      	bcs.n	80030d0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	e001      	b.n	80030d4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80030e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	007a1200 	.word	0x007a1200

080030f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01a      	beq.n	8003206 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031ee:	d10a      	bne.n	8003206 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	605a      	str	r2, [r3, #4]
  }
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b098      	sub	sp, #96	@ 0x60
 8003238:	af02      	add	r7, sp, #8
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003244:	f7fd fa9c 	bl	8000780 <HAL_GetTick>
 8003248:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b08      	cmp	r3, #8
 8003256:	d12e      	bne.n	80032b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003258:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003260:	2200      	movs	r2, #0
 8003262:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f88c 	bl	8003384 <UART_WaitOnFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d021      	beq.n	80032b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327a:	e853 3f00 	ldrex	r3, [r3]
 800327e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003282:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003286:	653b      	str	r3, [r7, #80]	@ 0x50
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003290:	647b      	str	r3, [r7, #68]	@ 0x44
 8003292:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003296:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800329e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e6      	bne.n	8003272 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e062      	b.n	800337c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d149      	bne.n	8003358 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032cc:	2200      	movs	r2, #0
 80032ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f856 	bl	8003384 <UART_WaitOnFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d03c      	beq.n	8003358 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e6:	e853 3f00 	ldrex	r3, [r3]
 80032ea:	623b      	str	r3, [r7, #32]
   return(result);
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80032fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003300:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003304:	e841 2300 	strex	r3, r2, [r1]
 8003308:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800330a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1e6      	bne.n	80032de <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3308      	adds	r3, #8
 8003316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	e853 3f00 	ldrex	r3, [r3]
 800331e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3308      	adds	r3, #8
 800332e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003330:	61fa      	str	r2, [r7, #28]
 8003332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003334:	69b9      	ldr	r1, [r7, #24]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	e841 2300 	strex	r3, r2, [r1]
 800333c:	617b      	str	r3, [r7, #20]
   return(result);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e5      	bne.n	8003310 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e011      	b.n	800337c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3758      	adds	r7, #88	@ 0x58
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003394:	e04f      	b.n	8003436 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d04b      	beq.n	8003436 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339e:	f7fd f9ef 	bl	8000780 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d302      	bcc.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e04e      	b.n	8003456 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d037      	beq.n	8003436 <UART_WaitOnFlagUntilTimeout+0xb2>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b80      	cmp	r3, #128	@ 0x80
 80033ca:	d034      	beq.n	8003436 <UART_WaitOnFlagUntilTimeout+0xb2>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b40      	cmp	r3, #64	@ 0x40
 80033d0:	d031      	beq.n	8003436 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d110      	bne.n	8003402 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2208      	movs	r2, #8
 80033e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f838 	bl	800345e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2208      	movs	r2, #8
 80033f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e029      	b.n	8003456 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800340c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003410:	d111      	bne.n	8003436 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800341a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f81e 	bl	800345e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e00f      	b.n	8003456 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4013      	ands	r3, r2
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	429a      	cmp	r2, r3
 8003444:	bf0c      	ite	eq
 8003446:	2301      	moveq	r3, #1
 8003448:	2300      	movne	r3, #0
 800344a:	b2db      	uxtb	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	429a      	cmp	r2, r3
 8003452:	d0a0      	beq.n	8003396 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800345e:	b480      	push	{r7}
 8003460:	b095      	sub	sp, #84	@ 0x54
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003476:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800347a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003484:	643b      	str	r3, [r7, #64]	@ 0x40
 8003486:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800348a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e6      	bne.n	8003466 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3308      	adds	r3, #8
 800349e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3308      	adds	r3, #8
 80034b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e5      	bne.n	8003498 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d118      	bne.n	8003506 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f023 0310 	bic.w	r3, r3, #16
 80034e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	6979      	ldr	r1, [r7, #20]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e6      	bne.n	80034d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800351a:	bf00      	nop
 800351c:	3754      	adds	r7, #84	@ 0x54
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <memset>:
 8003526:	4402      	add	r2, r0
 8003528:	4603      	mov	r3, r0
 800352a:	4293      	cmp	r3, r2
 800352c:	d100      	bne.n	8003530 <memset+0xa>
 800352e:	4770      	bx	lr
 8003530:	f803 1b01 	strb.w	r1, [r3], #1
 8003534:	e7f9      	b.n	800352a <memset+0x4>
	...

08003538 <__libc_init_array>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	4d0d      	ldr	r5, [pc, #52]	@ (8003570 <__libc_init_array+0x38>)
 800353c:	4c0d      	ldr	r4, [pc, #52]	@ (8003574 <__libc_init_array+0x3c>)
 800353e:	1b64      	subs	r4, r4, r5
 8003540:	10a4      	asrs	r4, r4, #2
 8003542:	2600      	movs	r6, #0
 8003544:	42a6      	cmp	r6, r4
 8003546:	d109      	bne.n	800355c <__libc_init_array+0x24>
 8003548:	4d0b      	ldr	r5, [pc, #44]	@ (8003578 <__libc_init_array+0x40>)
 800354a:	4c0c      	ldr	r4, [pc, #48]	@ (800357c <__libc_init_array+0x44>)
 800354c:	f000 f818 	bl	8003580 <_init>
 8003550:	1b64      	subs	r4, r4, r5
 8003552:	10a4      	asrs	r4, r4, #2
 8003554:	2600      	movs	r6, #0
 8003556:	42a6      	cmp	r6, r4
 8003558:	d105      	bne.n	8003566 <__libc_init_array+0x2e>
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003560:	4798      	blx	r3
 8003562:	3601      	adds	r6, #1
 8003564:	e7ee      	b.n	8003544 <__libc_init_array+0xc>
 8003566:	f855 3b04 	ldr.w	r3, [r5], #4
 800356a:	4798      	blx	r3
 800356c:	3601      	adds	r6, #1
 800356e:	e7f2      	b.n	8003556 <__libc_init_array+0x1e>
 8003570:	080035d0 	.word	0x080035d0
 8003574:	080035d0 	.word	0x080035d0
 8003578:	080035d0 	.word	0x080035d0
 800357c:	080035d4 	.word	0x080035d4

08003580 <_init>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	bf00      	nop
 8003584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003586:	bc08      	pop	{r3}
 8003588:	469e      	mov	lr, r3
 800358a:	4770      	bx	lr

0800358c <_fini>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	bf00      	nop
 8003590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003592:	bc08      	pop	{r3}
 8003594:	469e      	mov	lr, r3
 8003596:	4770      	bx	lr
